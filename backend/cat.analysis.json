{
  "info": {
    "va": true, 
    "stripped": true, 
    "rpath": "NONE", 
    "pic": false, 
    "intrp": "/lib64/ld-linux-x86-64.so.2", 
    "canary": true, 
    "binsz": 50218, 
    "static": false, 
    "checksums": {}, 
    "guid": "", 
    "program_class": "ELF64", 
    "lsyms": false, 
    "machine": "AMD x86-64 architecture", 
    "bintype": "elf", 
    "relro": "partial", 
    "filename": "/bin/cat", 
    "nx": true, 
    "pcalign": 0, 
    "minopsz": 1, 
    "bits": 64, 
    "dbg_file": "", 
    "compiled": "", 
    "linenum": false, 
    "subsys": "linux", 
    "arch": "AMD64", 
    "lang": "c", 
    "havecode": true, 
    "relocs": false, 
    "crypto": false, 
    "maxopsz": 16, 
    "endian": "little", 
    "entropy": 188, 
    "os": "linux"
  }, 
  "exports": [
    {
      "size": 8, 
      "name": "stdout", 
      "offset": 49928
    }, 
    {
      "size": 8, 
      "name": "program_invocation_short_name", 
      "offset": 49920
    }, 
    {
      "size": 8, 
      "name": "__progname_full", 
      "offset": 49944
    }, 
    {
      "size": 8, 
      "name": "stderr", 
      "offset": 49952
    }, 
    {
      "size": 4, 
      "name": "optind", 
      "offset": 49936
    }
  ], 
  "imports": [ 
    {
      "name": "__fprintf_chk", 
      "addr": 4200816
    }, 
    {
      "name": "mbsinit", 
      "addr": 4200832
    }, 
    {
      "name": "iswprint", 
      "addr": 4200848
    }, 
    {
      "name": "__ctype_b_loc", 
      "addr": 4200864
    }, 
    {
      "name": "iconv_open", 
      "addr": 4200880
    }, 
    {
      "name": "__sprintf_chk", 
      "addr": 4200896
    }, 
    {
      "name": "__gmon_start__", 
      "addr": 4194304
    }
  ], 
  "program": {
    "sha256": "44468ab5f493bd2c93a2d8327ffe36864a4905f4e8c8ac9c989847fa2acbec2c", 
    "md5": "efa10d52f37361f2e3a5d22742f0fcc4"
  }, 
  "libs": [
    {
      "name": "libc.so.6"
    }
  ], 
  "sections": [
    {
      "size": 0, 
      "name": "", 
      "md5": "d41d8cd98f00b204e9800998ecf8427e", 
      "offset": 0
    }, 
    {
      "size": 28, 
      "name": ".interp", 
      "md5": "91476dafa5ef669483350538fa6ec4cb", 
      "offset": 568
    }, 
    {
      "size": 32, 
      "name": ".note.ABI_tag", 
      "md5": "9a61e47e6c90a03fdb2c981b2315d002", 
      "offset": 596
    }, 
    {
      "size": 36, 
      "name": ".note.gnu.build_id", 
      "md5": "aae521d81a3887d32227816c57f1d21e", 
      "offset": 628
    }, 
    {
      "size": 64, 
      "name": ".gnu.hash", 
      "md5": "06dc25d8462a20478fc658c0b9271899", 
      "offset": 664
    }, 
    {
      "size": 1872, 
      "name": ".dynsym", 
      "md5": "518fa7b62f6887f0072a921c48b32fee", 
      "offset": 728
    }, 
    {
      "size": 790, 
      "name": ".dynstr", 
      "md5": "98a8f4fcabf71d2e9dbb2f6d9037f04d", 
      "offset": 2600
    }, 
    {
      "size": 156, 
      "name": ".gnu.version", 
      "md5": "f5be96115c0972d6b74c16280829d402", 
      "offset": 3390
    }, 
    {
      "size": 96, 
      "name": ".gnu.version_r", 
      "md5": "879bda185ed3a8b2af8927911bee93f7", 
      "offset": 3552
    }, 
    {
      "size": 144, 
      "name": ".rela.dyn", 
      "md5": "5f96258d5b3d8d4cc8c810424257a15e", 
      "offset": 3648
    }, 
    {
      "size": 1656, 
      "name": ".rela.plt", 
      "md5": "49e4c50a5671267e33913293d80253b4", 
      "offset": 3792
    }, 
    {
      "size": 26, 
      "name": ".init", 
      "md5": "a05527996ba51a59fe221aeb4717a879", 
      "offset": 5448
    }, 
    {
      "size": 1120, 
      "name": ".plt", 
      "md5": "4a122b70a0b9d9aa1e1fdbb012777a54", 
      "offset": 5488
    }, 
    {
      "size": 8, 
      "name": ".plt.got", 
      "md5": "8b943ea20df55c8d39644879c47d7ed4", 
      "offset": 6608
    }, 
    {
      "size": 29545, 
      "name": ".text", 
      "md5": "8db3fd69c3434dc0b9106ce8ea16951a", 
      "offset": 6624
    }, 
    {
      "size": 9, 
      "name": ".fini", 
      "md5": "c0ebd410fb9cd5628270064c1ed937ed", 
      "offset": 36172
    }, 
    {
      "size": 4659, 
      "name": ".rodata", 
      "md5": "50e1cf47ef2e5f14f74e797f64604c1a", 
      "offset": 36192
    }, 
    {
      "size": 772, 
      "name": ".eh_frame_hdr", 
      "md5": "66b997cb36e4f95a14c898da5a1478d9", 
      "offset": 40852
    }, 
    {
      "size": 4308, 
      "name": ".eh_frame", 
      "md5": "4be44f65eded102f02170863ad8e8994", 
      "offset": 41624
    }, 
    {
      "size": 8, 
      "name": ".init_array", 
      "md5": "fb1c977cf01ad0b4151b26a8d7e6afa1", 
      "offset": 48656
    }, 
    {
      "size": 8, 
      "name": ".fini_array", 
      "md5": "b48c521d6794888e4f2281569757d8cf", 
      "offset": 48664
    }, 
    {
      "size": 8, 
      "name": ".jcr", 
      "md5": "7dea362b3fac8e00956a4952a3d4f474", 
      "offset": 48672
    }, 
    {
      "size": 464, 
      "name": ".dynamic", 
      "md5": "1ba42e8f9282cb8d28b1acb1323a684d", 
      "offset": 48680
    }, 
    {
      "size": 8, 
      "name": ".got", 
      "md5": "7dea362b3fac8e00956a4952a3d4f474", 
      "offset": 49144
    }, 
    {
      "size": 576, 
      "name": ".got.plt", 
      "md5": "f9cab28fdaf82a10e1cfc60d08b5ae4f", 
      "offset": 49152
    }, 
    {
      "size": 180, 
      "name": ".data", 
      "md5": "beaf067b855a8a069a10e91c086987ff", 
      "offset": 49728
    }, 
    {
      "size": 0, 
      "name": ".bss", 
      "md5": "d41d8cd98f00b204e9800998ecf8427e", 
      "offset": 49908
    }, 
    {
      "size": 52, 
      "name": ".gnu_debuglink", 
      "md5": "f1d4b9ae844971f5c59f62648d5c0ea1", 
      "offset": 49908
    }, 
    {
      "size": 258, 
      "name": ".shstrtab", 
      "md5": "86627135066694d17720a52768a52d15", 
      "offset": 49960
    }, 
    {
      "size": 504, 
      "name": "PHDR", 
      "md5": "d632c0f7c0611eb54c4382083e4d3a20", 
      "offset": 64
    }, 
    {
      "size": 28, 
      "name": "INTERP", 
      "md5": "91476dafa5ef669483350538fa6ec4cb", 
      "offset": 568
    }, 
    {
      "size": 45932, 
      "name": "LOAD0", 
      "md5": "407d877e31fbdfcbcade4149d643eebe", 
      "offset": 0
    }, 
    {
      "size": 1252, 
      "name": "LOAD1", 
      "md5": "9610952f6518555b257ab47e2b71b305", 
      "offset": 48656
    }, 
    {
      "size": 464, 
      "name": "DYNAMIC", 
      "md5": "1ba42e8f9282cb8d28b1acb1323a684d", 
      "offset": 48680
    }, 
    {
      "size": 68, 
      "name": "NOTE", 
      "md5": "b7f3ea28c3bc4d6206498b37eb6de906", 
      "offset": 596
    }, 
    {
      "size": 772, 
      "name": "GNU_EH_FRAME", 
      "md5": "66b997cb36e4f95a14c898da5a1478d9", 
      "offset": 40852
    }, 
    {
      "size": 0, 
      "name": "GNU_STACK", 
      "md5": "d41d8cd98f00b204e9800998ecf8427e", 
      "offset": 0
    }, 
    {
      "size": 496, 
      "name": "GNU_RELRO", 
      "md5": "b4e3336223fb7b859713954634bcf4ba", 
      "offset": 48656
    }, 
    {
      "size": 64, 
      "name": "ehdr", 
      "md5": "17468a4aefd9ca894a265adffb91299e", 
      "offset": 0
    }
  ], 
  "strings": [
    {
      "encoding": "ascii", 
      "size": 15, 
      "val": "LmdudV9kZWJ1Z2xpbms=", 
      "offset": 50203
    }
  ], 
  "procs": [
    {
      "proc_desc": {
        "name": "sub.__gmon_start___248_9d0", 
        "raw_len": 6, 
        "vex_hash": "0100000000000000400000009bd0cea5a3fdb0459606ca6d0439392ff05f4f5e4cf0710a87f6f8be71ae376ad807e90dbea2243b4521530cce6fd454ee30d1086b86d8157cc73e1150441c28f2335b0d224dbc44b66f5b692d5d7a573badc51288e2d22f23463519a312c4027878f007d08f11638846f87c17b45f0c43ef3c0693871a359e86ad31a287c301f515450f6df35b0848ea5517d91015308e15de54921e9c4885e80647cafc9f4a509c623314eae825bae4db2f4a1d615998239e2094c5bb4feebfde2753a422119663fd2258cf164021e8377974f8940e72726d2f593268058a53d494ac521139d8e906237ea634070dd98d727413fc0ee3825d6c520eee0948fa964487a04f2c", 
        "raw": "/yUipiAA", 
        "flow_hash": "010000000000000020000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x4019d0   jmp qword [rip + 0x20a622]  ; section 13 va=0x004019d0 pa=0x000019d0 sz=8 vsz=8 rwx=--r-x .plt.got\n"
      }, 
      "offset": 4200912
    }, 
    {
      "proc_desc": {
        "name": "sub.__gmon_start___248_548", 
        "raw_len": 26, 
        "vex_hash": "010000000000000040000000fdc324092e50a402eee52e00769f51055b00000336acef01c4eb9d01ba2a74008e7f9609e43e1103cc7ca2007a98e904c4fada0af0b52005c5c992034f5ffd0632738a03eaab3e05cdc7f4048459d902e987ac0544baaa058c5602008990ab02915fdb021bf03f0cd3dbed01e71c1c06a3a62c023ffeab0185b1b300033fd3089ad035003d0e9e04262bd8002f844005be94d500c0f95f03e089b603e0fbdf07e4b9b5018203f500c2bc4a010cad5d0133b10c078e8f52058ee21c002ce86d007fa14a002b8fe909a65630049abb7e099a082301b3617a05e8dd9b0192b6d702956409022b5557026c5b5e025b342604a2ac8500df39f000e31ee8027723d804", 
        "raw": "SIPsCEiLBaWqIABIhcB0BehzBAAASIPECMM=", 
        "flow_hash": "010000000000000020000000fd6d4a6ad798f5483a60331aeab5d96f2dd6354142e62c4661bfe18fc43ab13a5ca8cce4a5efba123eaa696754a10b1c681eaf24414ece8d06ab3625b33f5070226c6e19cc7da70fdfc0746358c6f6465723c4eb12c6c951aeb77397934ab64034640a976c06db14c3926a1c2a26f68ec59028616fe72c6bbd1531d5c49e8610", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x401548   sub rsp, 8  ; section 11 va=0x00401548 pa=0x00001548 sz=26 vsz=26 rwx=--r-x .init\n0x40154c   mov rax, qword [rip + 0x20aaa5]\n0x401553   test rax, rax\n0x401556   je 0x40155d\n0x401558   call 0x4019d0\n0x40155d   add rsp, 8\n0x401561   ret\n"
      }, 
      "offset": 4199752
    }, 
    {
      "proc_desc": {
        "name": "fcn.00402b90", 
        "raw_len": 5, 
        "vex_hash": "010000000000000040000000ae43e6091e317f0f8f6c954b3cdc4850c9265a3f21b50e1157b4090dc018cde2b591bd775abd50705ec72c452f83b547e0b2170240ff3b1be3b71c190b18e222e7a7b1c1f92249cc2c50bab47421655a2410c133a258ea44cb7833069fb28bae18a6c3017c821f050d5cd21d7d35bf1aee4a01119f7b62c9059a6646f169b745829b9e1bb4d8551faf49ad95befade137e27a916fe13dc6ff24119508eff020075e9410ea810d45fcad29715d74c465027bc6d7ae20c218d9c66e1227d5b3d770a74cd4edb3879084b4dfd5f1040a22dfc5de538f863b2660fac5a1f9b3cf18a11a6e889078b2e067ef08d074ef71326254e13b3f11b693434626d07d5f7e820", 
        "raw": "6cvr//8=", 
        "flow_hash": "010000000000000020000000fd6d4a6ab24d4be03a60331a78d58da22dd6354142e62c4639c5f0d2c43ab13a5ca8cce402d64226d18ba8c40e9dc923cbe63e5958460ef506ab36253eab26d0475ddce4cc7da70fdfc07463c20cc6ff5723c4eb12c6c951aeb773979c35be4334640a97a228209a6472f8814eb950d55ba32ec06fe72c6be94f66f8c49e8610", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x402b90   jmp 0x401760\n"
      }, 
      "offset": 4205456
    }, 
    {
      "proc_desc": {
        "name": "entry2.fini", 
        "raw_len": 28, 
        "vex_hash": "010000000000000040000000be6d0e122e50a402faf99502f9593b050a46a100518d4404b24ca6020f7289068e7f9609bdf73e11c4bbc5024a5dec032f1ba20000344d040c001f01c74b4912483cff03bddc130547151d01ac298602e987ac053e1f50042904940382367f0151a32902d491ca039f448100589c7b051f556b031e490106c196c40361ffe70423c561043d0e9e0484fea9032b7bc70077eeaa050c725e0086fe9f000c134705362d971d1a849c02f6c71c061dbe070465b300041c825a010bf0fe03ab17540620177303aae8dc00a6563004786a500be17c3a06c6db56020cd5390087fbe600c5b3d2070296210b203b760068603100f90a670851484b01cba4250a8b688e02", 
        "raw": "gD3BnCAAAHURVUiJ5ehu////XcYFrpwgAAHzww==", 
        "flow_hash": "010000000000000020000000fd6d4a6ad798f5483a60331aeab5d96f2dd6354142e62c4661bfe18fc43ab13a5ca8cce4a5efba123eaa696754a10b1c681eaf24414ece8d06ab3625b33f5070226c6e19cc7da70fdfc0746358c6f6465723c4eb12c6c951aeb77397934ab64034640a976c06db14c3926a1c2a26f68ec59028616fe72c6bbd1531d5c49e8610", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x402660   cmp byte [rip + 0x209cc1], 0\n0x402667   jne 0x40267a\n0x402669   push rbp\n0x40266a   mov rbp, rsp\n0x40266d   call 0x4025e0\n0x402672   pop rbp\n0x402673   mov byte [rip + 0x209cae], 1\n0x40267a   ret\n"
      }, 
      "offset": 4204128
    }, 
    {
      "proc_desc": {
        "name": "sub.__errno_location_bd0", 
        "raw_len": 118, 
        "vex_hash": "0100000000000000400000002fd674028e183601eee52e0059d7b200f16606007de40600117529015a4e61029ff8c20099f54d00f68bd800399a4b00427a1d02d6cb38000da32e02c6e72e04483cff0322c62e00872fd700d7ff3b01a23e80006d2aa701b61735006329a4019b07b50035013400ca89b9014eb0a601caa75100ec8b0700828b88002d444400e1b358019dcd5301f8db72002b7bc700c8b452000c725e0086fe9f0049b21401dbcd320050fa5100c41022000cad5d0127ee0b0068874e001b989b0023372300d8102d0007ddca0074053200374d0201d416100168c9950093ea4e0030a734005b7c90019fd51b0062778a0168603100f6138000df39f0005a713d00f4392101", 
        "raw": "QVVBVFVTSIPsCEiF0nRiQYn9SIn1SInTRTHk6xMPHwBIhcB0M0kBxEgBxUgpw3QUSInaSInuRInv6KImAABIg/j/ddxIg8QITIngW11BXEFdw2YPH0QAAOiT6f//xwAcAAAASIPECEyJ4FtdQVxBXcNFMeTrzg==", 
        "flow_hash": "0100000000000000200000003534b83a9492c03e16ef330046341323ae96740fe4007300e1cb291a939ccc00cef6d400bab6911378446523549ab908cbe63e59d2888d15ff8acb219b67713c3b5c3b3dcc7da70f007b4911db01a1138a82264a27d3972222639d3d9c35be4375278f25626a5510c030e6029c174040fd7c674e0cdf6002763fb329c49e8610", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x402bd0   push r13\n0x402bd2   push r12\n0x402bd4   push rbp\n0x402bd5   push rbx\n0x402bd6   sub rsp, 8\n0x402bda   test rdx, rdx\n0x402bdd   je 0x402c41\n0x402bdf   mov r13d, edi\n0x402be2   mov rbp, rsi\n0x402be5   mov rbx, rdx\n0x402be8   xor r12d, r12d\n0x402beb   jmp 0x402c00\n0x402bf0   test rax, rax\n0x402bf3   je 0x402c28\n0x402bf5   add r12, rax\n0x402bf8   add rbp, rax\n0x402bfb   sub rbx, rax\n0x402bfe   je 0x402c14\n0x402c00   mov rdx, rbx\n0x402c03   mov rsi, rbp\n0x402c06   mov edi, r13d\n0x402c09   call 0x4052b0\n0x402c0e   cmp rax, 0xffffffffffffffff\n0x402c12   jne 0x402bf0\n0x402c14   add rsp, 8\n0x402c18   mov rax, r12\n0x402c1b   pop rbx\n0x402c1c   pop rbp\n0x402c1d   pop r12\n0x402c1f   pop r13\n0x402c21   ret\n0x402c28   call 0x4015c0\n0x402c2d   mov dword [rax], 0x1c\n0x402c33   add rsp, 8\n0x402c37   mov rax, r12\n0x402c3a   pop rbx\n0x402c3b   pop rbp\n0x402c3c   pop r12\n0x402c3e   pop r13\n0x402c40   ret\n0x402c41   xor r12d, r12d\n0x402c44   jmp 0x402c14\n"
      }, 
      "offset": 4205520
    }, 
    {
      "proc_desc": {
        "name": "sub.0_6b0", 
        "raw_len": 100, 
        "vex_hash": "0100000000000000400000002fd67402520b4701eee52e00f2975d00325aa2025fba2801d7a76b003aa2fa020c79e903c91cb1013fd557013f260801fe9f3700847649008f0f8602738c1900b3428300a1f23f00b6de2a02225bde0224ffeb027b516900e83f6f00cd035400f5789803051d0a03ff709a028cc88c00a3a62c02e2942901318f8900361e6f035fc42e00f4fe0a015c602d00fbf0d100c8b45200dfe29600fe6dfb008ae83b0208f6ac01e4348601c4102200c64e570289a87701722496018ee21c007272ed02db1827002b284001bc33ea018b87700148437500398e620023023e00cadba000e5f89a04ae28bf01912fb302594adc00163e5101a8174201c78e9301f4392101", 
        "raw": "SIsNmZsgALhxwmAA6w9mkEiD6AHGQAEwSDnIchMPthCA+jh/64PCAYgQww8fRAAASIH5YMJgAHYvSI1B/8ZB/zFIiQVYmyAASInBSIsFVpsgAEg5yHYLSIPoAUiJBUabIADzww==", 
        "flow_hash": "0100000000000000200000008ce14137e8f7c9163a60331a7e7df52c2dd6354142e62c46cfa36636c43ab13afd956746a5efba126df71867549ab908681eaf24e719af0aff8acb214c29e051226c6e19cc7da70f177a9737983a8b142dc17b8927d39722797c4b7e934ab640bcfea9526c06db14c030e6025e03cf72e0f03043b55271108d12553ac49e8610", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x4026b0   mov rcx, qword [rip + 0x209b99]\n0x4026b7   mov eax, 0x60c271\n0x4026bc   jmp 0x4026cd\n0x4026c0   sub rax, 1\n0x4026c4   mov byte [rax + 1], 0x30\n0x4026c8   cmp rax, rcx\n0x4026cb   jb 0x4026e0\n0x4026cd   movzx edx, byte [rax]\n0x4026d0   cmp dl, 0x38\n0x4026d3   jg 0x4026c0\n0x4026d5   add edx, 1\n0x4026d8   mov byte [rax], dl\n0x4026da   ret\n0x4026e0   cmp rcx, 0x60c260\n0x4026e7   jbe 0x402718\n0x4026e9   lea rax, [rcx - 1]\n0x4026ed   mov byte [rcx - 1], 0x31\n0x4026f1   mov qword [rip + 0x209b58], rax\n0x4026f8   mov rcx, rax\n0x4026fb   mov rax, qword [rip + 0x209b56]\n0x402702   cmp rax, rcx\n0x402705   jbe 0x402712\n0x402707   sub rax, 1\n0x40270b   mov qword [rip + 0x209b46], rax\n0x402712   ret\n"
      }, 
      "offset": 4204208
    }, 
    {
      "proc_desc": {
        "name": "fcn.004025e0", 
        "raw_len": 50, 
        "vex_hash": "0100000000000000400000002fd6740236544f00eee52e00021748015aa3b001f6fdd90150d68100cf284504d5669900b1b9fc00c4bbc502372f1502427a1d023807d706f9992800afe4b60087a5b7028cf0dd040424b203568d5401e987ac058fde7103e83f6f00b49eed0398b36002fecce201f9d44f015ef88108a3a62c02bbf3e600375459006cb5160210f8de02b0b0c20032be010638ea3300c24e63060c725e0086fe9f00b7727b00065fe50179356801f6c71c066f2c4a079cee43017e45e9011bdd4905afbfdb08bd773c0074099f0274350d028b8770015943db09226a3e00d95e060087fbe60078efa1002b5557026c5b5e02686031004f682f01df39f0004008fe00f4392101", 
        "raw": "uP/CYABVSC34wmAASIP4DkiJ5XYbuAAAAABIhcB0EV2/+MJgAP/gZg8fhAAAAAAAXcM=", 
        "flow_hash": "0100000000000000200000008ce14137e8f7c91678c9edb07e7df52c8d93cdae7451e2aacfa36636dba3a8c477fd7d736811db7e6df71867e29ddf1e035e3e85e719af0a33ff6e204c29e051e6a8d31f7d47715cf8d2182d983a8b144be6353f902758538e84c4432fba8359bcfea952a000893dfbf101075e03cf72c253b227b5527110c353dbe8eb467c7d", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x4025e0   mov eax, 0x60c2ff\n0x4025e5   push rbp\n0x4025e6   sub rax, 0x60c2f8\n0x4025ec   cmp rax, 0xe\n0x4025f0   mov rbp, rsp\n0x4025f3   jbe 0x402610\n0x4025f5   mov eax, 0\n0x4025fa   test rax, rax\n0x4025fd   je 0x402610\n0x4025ff   pop rbp\n0x402600   mov edi, 0x60c2f8\n0x402605   jmp rax\n0x402610   pop rbp\n0x402611   ret\n"
      }, 
      "offset": 4204000
    }, 
    {
      "proc_desc": {
        "name": "sub.A_NULL_argv_0__was_passed_through_an_exec_system_call._c50", 
        "raw_len": 147, 
        "vex_hash": "010000000000000040000000e58540010e448d00eee52e008dca5a02f16606002fdf87012a9591013e3e1000f877fb0099c7e20077506a00789c4a00427a1d02483495003f0eb100dfe15d0165aa760321bdcb011e495b0100f61f01bd42b80040d12301e83f6f0088e24e00e81d8c03fd7627013dfcae003c32390072d14d010c7bb00180a3df016cb51602fd585200609719006012a60038ea3300dd686a01b06032007cbc4900b87e9500f69c3900b47e310279a86400e5874002807996003e9dc300cedb6100b6c57600bd773c000f28c100ac850400f73e73004bcf9e00226a3e004879d601177b9400bcd39300242a07029f281e0368603100c5ab2f003c3d120027921000e61f5e00", 
        "raw": "SIX/U3Rtvi8AAABIifvofer//0iFwHRLSI1QAUiJ0Ugp2UiD+QZ+O0iNcPq/SJVAALkHAAAA86Z1KbkDAAAASInWv1CVQADzpkiJ00APl8YPksFAOM51C0iNWARIiR1NliAASIkdlpYgAEiJHVeWIABbw0iLDVaWIAC6NwAAAL4BAAAAvxCVQADoguz//+jN6P//", 
        "flow_hash": "0100000000000000200000003edcbd1643049f0264dda200f72eca002bb90f0be4007300cc361c09c43ab13acef6d4004a7c2b001f86e60be6edb60dcbe63e59d2888d150b6df1029b67713cb7799f45cc7da70f007b4911db01a113e454ee2012c6c951a80bff3c60c05d1534640a9789a0e83c178e6204bd97a407f201170c8364170d763fb329c49e8610", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x402c50   test rdi, rdi\n0x402c53   push rbx\n0x402c54   je 0x402cc3\n0x402c56   mov esi, 0x2f\n0x402c5b   mov rbx, rdi\n0x402c5e   call 0x4016e0\n0x402c63   test rax, rax\n0x402c66   je 0x402cb3\n0x402c68   lea rdx, [rax + 1]\n0x402c6c   mov rcx, rdx\n0x402c6f   sub rcx, rbx\n0x402c72   cmp rcx, 6\n0x402c76   jle 0x402cb3\n0x402c78   lea rsi, [rax - 6]\n0x402c7c   mov edi, 0x409548\n0x402c81   mov ecx, 7\n0x402c86   repe cmpsb byte [rsi], byte ptr [rdi]\n0x402c88   jne 0x402cb3\n0x402c8a   mov ecx, 3\n0x402c8f   mov rsi, rdx\n0x402c92   mov edi, 0x409550\n0x402c97   repe cmpsb byte [rsi], byte ptr [rdi]\n0x402c99   mov rbx, rdx\n0x402c9c   seta sil\n0x402ca0   setb cl\n0x402ca3   cmp sil, cl\n0x402ca6   jne 0x402cb3\n0x402ca8   lea rbx, [rax + 4]\n0x402cac   mov qword [rip + 0x20964d], rbx\n0x402cb3   mov qword [rip + 0x209696], rbx\n0x402cba   mov qword [rip + 0x209657], rbx\n0x402cc1   pop rbx\n0x402cc2   ret\n0x402cc3   mov rcx, qword [rip + 0x209656]\n0x402cca   mov edx, 0x37\n0x402ccf   mov esi, 1\n0x402cd4   mov edi, 0x409510\n0x402cd9   call 0x401960\n0x402cde   call 0x4015b0\n"
      }, 
      "offset": 4205648
    }, 
    {
      "proc_desc": {
        "name": "entry0", 
        "raw_len": 41, 
        "vex_hash": "010000000000000040000000c3e3c001e10ddd057fd9e900d80324017a635f01cc11d10832b41600f15387045b382c03483bb108f68bd800137d9200ebfbdc0080f37301a0a44c04310cd901b5762b06a8000e02b88a6e00bea5a301e987ac05ee6636006c1c0904d2733f0328c9050240139700c95e34044756480f6e8f2e00a9589f00c196c40361ffe7041d39c701b2b54205ec90ad002b7bc700e5c65f088798f809b8463b0049b2140162e12b02f6fd080d8152c3017eebbf00bab8c604a7aae4005b66500133d337000e835e000ebbd501a6563004aca8da057eb6ad09928d77052be93b03dd4da800a5fa9c0c98615a01cddf070068603100f6138000df39f000fa515401e977a102", 
        "raw": "Me1JidFeSIniSIPk8FBUScfAEI1AAEjHwaCMQABIx8fgGUAA6Mfx//8=", 
        "flow_hash": "010000000000000020000000fd6d4a6ab24d4be03a60331a78d58da22dd6354142e62c4639c5f0d2c43ab13a5ca8cce402d64226d18ba8c40e9dc923cbe63e5958460ef506ab36253eab26d0475ddce4cc7da70fdfc07463c20cc6ff5723c4eb12c6c951aeb773979c35be4334640a97a228209a6472f8814eb950d55ba32ec06fe72c6be94f66f8c49e8610", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x4025b0   xor ebp, ebp\n0x4025b2   mov r9, rdx\n0x4025b5   pop rsi\n0x4025b6   mov rdx, rsp\n0x4025b9   and rsp, 0xfffffffffffffff0\n0x4025bd   push rax\n0x4025be   push rsp\n0x4025bf   mov r8, 0x408d10\n0x4025c6   mov rcx, 0x408ca0\n0x4025cd   mov rdi, 0x4019e0\n0x4025d4   call 0x4017a0\n"
      }, 
      "offset": 4203952
    }, 
    {
      "proc_desc": {
        "name": "fcn.004039f0", 
        "raw_len": 137, 
        "vex_hash": "010000000000000040000000ff78400036544f00eee52e00e0fa1900b1dfc402f6fdd901d7a76b0000f9f100eb66590584abb2003c9a7b00c3ecba00304fee00a4d3fd01c8892e02c4aa2f00b114b803935b7a009be4880057f639009224ac002f12a700e37964002e90a500b8493400664f75001683480059326c026e8f2e0017267a00e91f0b0051af32005e8143034dfa3f00be4c0b008eb27700c8b45200dfe29600b8463b004f510d01065fe5016f520f00c41022007eebbf0055bd1e0589595300fc5585002ce86d007c9f23006c964301ab136d00f83fc00381744e000068a900d95e060076074700cca275000297a400de055c01a1dc2f01f6138000df39f0004c6d2e00971d3900", 
        "raw": "SIPsSEiJ+rkHAAAAZEiLBCUoAAAASIlEJDgxwEiJ54P+CvNIq3RYiTQkSIsEJEiLTCQ4ZEgzDCUoAAAASIkCSItEJAhIiUIISItEJBBIiUIQSItEJBhIiUIYSItEJCBIiUIgSItEJChIiUIoSItEJDBIiUIwSInQdQpIg8RIw+g82///6Cfc//8=", 
        "flow_hash": "010000000000000020000000fd6d4a6a3ec898413a60331acedfa2712dd63541134b9718e3dcc72dc43ab13a6806171202d64226ee35813de6edb60dcbe63e59d2bb496c33ff6e209b67713cb7799f45cc7da70f007b4911db01a1134be6353f12c6c9518e84c4439c35be4334640a97a000893db7cbad0cfa0ba247c253b2276fe72c6b3760d48bc49e8610", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x4039f0   sub rsp, 0x48\n0x4039f4   mov rdx, rdi\n0x4039f7   mov ecx, 7\n0x4039fc   mov rax, qword fs:[0x28]\n0x403a05   mov qword [rsp + 0x38], rax\n0x403a0a   xor eax, eax\n0x403a0c   mov rdi, rsp\n0x403a0f   cmp esi, 0xa\n0x403a12   rep stosq qword [rdi], rax\n0x403a15   je 0x403a6f\n0x403a17   mov dword [rsp], esi\n0x403a1a   mov rax, qword [rsp]\n0x403a1e   mov rcx, qword [rsp + 0x38]\n0x403a23   xor rcx, qword fs:[0x28]\n0x403a2c   mov qword [rdx], rax\n0x403a2f   mov rax, qword [rsp + 8]\n0x403a34   mov qword [rdx + 8], rax\n0x403a38   mov rax, qword [rsp + 0x10]\n0x403a3d   mov qword [rdx + 0x10], rax\n0x403a41   mov rax, qword [rsp + 0x18]\n0x403a46   mov qword [rdx + 0x18], rax\n0x403a4a   mov rax, qword [rsp + 0x20]\n0x403a4f   mov qword [rdx + 0x20], rax\n0x403a53   mov rax, qword [rsp + 0x28]\n0x403a58   mov qword [rdx + 0x28], rax\n0x403a5c   mov rax, qword [rsp + 0x30]\n0x403a61   mov qword [rdx + 0x30], rax\n0x403a65   mov rax, rdx\n0x403a68   jne 0x403a74\n0x403a6a   add rsp, 0x48\n0x403a6e   ret\n0x403a6f   call 0x4015b0\n0x403a74   call 0x4016a0\n"
      }, 
      "offset": 4209136
    }, 
    {
      "proc_desc": {
        "name": "entry1.init", 
        "raw_len": 38, 
        "vex_hash": "010000000000000040000000265f150036544f00eee52e00670f4d01ac0db800f7fb07017b629b0083c76c01f877fb0033847800f68bd8002f9c2001427a1d02825cd70017e1fa013d4a0f02b0ed7800e35e83001bb1b800d7503700c4ad0a01f1f32800e83f6f001e2b3a01c8d8570104729c00d18a0c015d00b00153ad1301bbf3e600375459006246fb01d9d91f00b0b0c2003b528b0553e70400efc431000c725e008fd22400b7727b00ba195300a1ebad00166e77011cdea8007c2d1201a7aae4002ef52a01e8d942020ae5bd02bd76de010b4fbd012425d5005a4e2500226a3e002162310062f5180026c40e001514730030eb1b0168603100eb331e00635fc400cd0c3d04f4392101", 
        "raw": "vyC+YABIgz8AdQXrkw8fALgAAAAASIXAdPFVSInl/9Bd6Xr///8=", 
        "flow_hash": "01000000000000002000000084331b783ec89841f1bd7e1fac076c53cbe4556b134b9718e3dcc72da1308117680617123e192d1aee35813d80c04002d283fe338a761d3e8afa0d1df4042c0b7292ec1c09e8ce12f83e170fdb01a113dd7cb013902758538e84c4431b09bc01245514bfa000893db7cbad0cfa0ba247c253b227202d5e5d3760d48bce2a2e33", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x402620   mov esi, 0x60c2f8\n0x402625   push rbp\n0x402626   sub rsi, 0x60c2f8\n0x40262d   sar rsi, 3\n0x402631   mov rbp, rsp\n0x402634   mov rax, rsi\n0x402637   shr rax, 0x3f\n0x40263b   add rsi, rax\n0x40263e   sar rsi, 1\n0x402641   je 0x402658\n0x402643   mov eax, 0\n0x402648   test rax, rax\n0x40264b   je 0x402658\n0x40264d   pop rbp\n0x40264e   mov edi, 0x60c2f8\n0x402653   jmp rax\n0x402658   pop rbp\n0x402659   ret\n0x402680   mov edi, 0x60be20\n0x402685   cmp qword [rdi], 0\n0x402689   jne 0x402690\n0x40268b   jmp 0x402620\n0x402690   mov eax, 0\n0x402695   test rax, rax\n0x402698   je 0x40268b\n0x40269a   push rbp\n0x40269b   mov rbp, rsp\n0x40269e   call rax\n0x4026a0   pop rbp\n0x4026a1   jmp 0x402620\n"
      }, 
      "offset": 4204160
    }, 
    {
      "proc_desc": {
        "name": "sub.l______l_a80", 
        "raw_len": 204, 
        "vex_hash": "010000000000000040000000abe599007c312f00a0280d00f2975d003100cb00f924410011752901d790390022a9e900d290dc012d023500427b130072370900d6cb38000cae1400d36d7000b342830020ef7b0086785b00b813a200a23e800026bd0800da131b0048eb110072d584009f8c5e002d3fe00007ee310005514d008c50e001828b8800aac7f00045e9e90086ae1e008e2437001be18300c8b452009d43270049a47600b12c3e00265b1c006f520f007d6a0a00202ad900b9fab7008f8d49004d05490053ac3b00f9ae3d0092bd690074053200d5263e00967b8a00833e38004fec3b001a3a3f00c95f39003b800f00fc79650068603100f77b2100f54a030012540000907f1400", 
        "raw": "VVOJ9UiJ+0iD7AjosCcAAA+2EIPi34D6VXVFD7ZQAYPi34D6VHVKD7ZQAoPi34D6RnU+gHgDLXU4gHgEOHUygHgFAHUsgDtguseVQAC4w5VAAEgPRcJIg8QIW13DDx8AgPpHdQwPtlABg+LfgPpCdB+D/Qm6jpVAALjSlUAASA9FwkiDxAhbXcMPH4AAAAAAgHgCMXXbgHgDOHXVgHgEMHXPgHgFM3XJgHgGMHXDgHgHAHW9gDtgus+VQAC4y5VAAEgPRcJIg8QIW13D", 
        "flow_hash": "010000000000000020000000d9bff4030112fe0364dda200b56cbf0384836305e400730031536710939ccc000c082215bab691137844652310e61a03cc11c014d27fc8108325f7072e36f125d8164509cc7da70ff83e170fe25cb416c1d1230d7594ee037d9410061b09bc0119785b0dd0e33202c030e602fd98280f481fa9335455922eb0546f29c49e8610", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x403a80   push rbp\n0x403a81   push rbx\n0x403a82   mov ebp, esi\n0x403a84   mov rbx, rdi\n0x403a87   sub rsp, 8\n0x403a8b   call 0x406240\n0x403a90   movzx edx, byte [rax]\n0x403a93   and edx, 0xffffffdf\n0x403a96   cmp dl, 0x55\n0x403a99   jne 0x403ae0\n0x403a9b   movzx edx, byte [rax + 1]\n0x403a9f   and edx, 0xffffffdf\n0x403aa2   cmp dl, 0x54\n0x403aa5   jne 0x403af1\n0x403aa7   movzx edx, byte [rax + 2]\n0x403aab   and edx, 0xffffffdf\n0x403aae   cmp dl, 0x46\n0x403ab1   jne 0x403af1\n0x403ab3   cmp byte [rax + 3], 0x2d\n0x403ab7   jne 0x403af1\n0x403ab9   cmp byte [rax + 4], 0x38\n0x403abd   jne 0x403af1\n0x403abf   cmp byte [rax + 5], 0\n0x403ac3   jne 0x403af1\n0x403ac5   cmp byte [rbx], 0x60\n0x403ac8   mov edx, 0x4095c7\n0x403acd   mov eax, 0x4095c3\n0x403ad2   cmovne rax, rdx\n0x403ad6   add rsp, 8\n0x403ada   pop rbx\n0x403adb   pop rbp\n0x403adc   ret\n0x403ae0   cmp dl, 0x47\n0x403ae3   jne 0x403af1\n0x403ae5   movzx edx, byte [rax + 1]\n0x403ae9   and edx, 0xffffffdf\n0x403aec   cmp dl, 0x42\n0x403aef   je 0x403b10\n0x403af1   cmp ebp, 9\n0x403af4   mov edx, 0x40958e\n0x403af9   mov eax, 0x4095d2\n0x403afe   cmovne rax, rdx\n0x403b02   add rsp, 8\n0x403b06   pop rbx\n0x403b07   pop rbp\n0x403b08   ret\n0x403b10   cmp byte [rax + 2], 0x31\n0x403b14   jne 0x403af1\n0x403b16   cmp byte [rax + 3], 0x38\n0x403b1a   jne 0x403af1\n0x403b1c   cmp byte [rax + 4], 0x30\n0x403b20   jne 0x403af1\n0x403b22   cmp byte [rax + 5], 0x33\n0x403b26   jne 0x403af1\n0x403b28   cmp byte [rax + 6], 0x30\n0x403b2c   jne 0x403af1\n0x403b2e   cmp byte [rax + 7], 0\n0x403b32   jne 0x403af1\n0x403b34   cmp byte [rbx], 0x60\n0x403b37   mov edx, 0x4095cf\n0x403b3c   mov eax, 0x4095cb\n0x403b41   cmovne rax, rdx\n0x403b45   add rsp, 8\n0x403b49   pop rbx\n0x403b4a   pop rbp\n0x403b4b   ret\n"
      }, 
      "offset": 4209280
    }, 
    {
      "proc_desc": {
        "name": "fcn.00404ef0", 
        "raw_len": 12, 
        "vex_hash": "010000000000000040000000e3d5e801a9eb6e01eee52e00ba705b017a635f017de40600f814570100f9f1009ff8c200b1b9fc00d437b900cfc43102427a1d02d6cb38008afb7e0026c9f4003f0d3500a14aec00bfb64400cd073900647cb00113811a02e83f6f009ae53c01d5d59e01a072b102a3095e00d926fe0203caee0080920b00e91f0b0051b12700b896a801c3ea9f0035b312020e050d00d7b9cd010c725e00e1051c0049b21401a6c7680350fa5100831470043c2d3200b9fab7005bde22004c297e02bf3a1c01df89b203ee284201ab136d00374d0201d416100168c995001c3b700269756800bcd393002b55570262aeb3016860310056e02d00df39f000c2a74700f4392101", 
        "raw": "SInyif4x/+k0////", 
        "flow_hash": "010000000000000020000000fd6d4a6aee024673771edf13932333302dd6354163ac650ee3dcc72d1884062a680617123e192d1a1f86e60b80c04002d283fe33d2bb496c8afa0d1df4042c0b7292ec1ccc7da70f5c3f9810db01a113dd7cb01312c6c951ab98a48089bc753434640a975a33187bc379830dfa0ba247f201170c8364170d73ad0e7fc49e8610", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x404e30   push rbp\n0x404e31   push rbx\n0x404e32   mov rbp, rdx\n0x404e35   mov ebx, edi\n0x404e37   sub rsp, 0x48\n0x404e3b   mov rdi, rsp\n0x404e3e   mov rax, qword fs:[0x28]\n0x404e47   mov qword [rsp + 0x38], rax\n0x404e4c   xor eax, eax\n0x404e4e   call 0x4039f0\n0x404e53   mov rcx, rsp\n0x404e56   mov rdx, 0xffffffffffffffff\n0x404e5d   mov rsi, rbp\n0x404e60   mov edi, ebx\n0x404e62   call 0x4048f0\n0x404e67   mov rcx, qword [rsp + 0x38]\n0x404e6c   xor rcx, qword fs:[0x28]\n0x404e75   jne 0x404e7e\n0x404e77   add rsp, 0x48\n0x404e7b   pop rbx\n0x404e7c   pop rbp\n0x404e7d   ret\n0x404e7e   call 0x4016a0\n0x404ef0   mov rdx, rsi\n0x404ef3   mov esi, edi\n0x404ef5   xor edi, edi\n0x404ef7   jmp 0x404e30\n"
      }, 
      "offset": 4214512
    }, 
    {
      "proc_desc": {
        "name": "sub.__ctype_get_mb_cur_max_b50", 
        "raw_len": 138, 
        "vex_hash": "010000000000000040000000ff7840006e33e600eee52e00f2975d007a635f01e1eadc01d7a76b0035c17f009ff8c200e02c8d06f68bd80013185800f2d0fc0131d6fe00643572009d304b012bf20d02935b7a0048e60203cd0739001350c30013811a02e37964009a596800446b300175b2810116834800693c750577b40f0017267a00c196c403a287c301894b750011c6ec00be4c0b002b7bc700d8686b01541f3d0086fe9f0049b214019258c00184c8cc02f18ab5007eebbf00ed144c005bde2200e496390120c0e00056f0fb0007ea9b00443d83028b877001c843ca000238a000da699900760747000d33770098615a01de055c0168603100f6138000767c02004c6d2e00971d3900", 
        "raw": "QVdBVkWJx0FVQVRJif5VU0SJzUmJzYPlAkiB7KgAAABIi4Qk4AAAAEiJNCRIiVQkGESJTCQ4SIlEJChIi4Qk6AAAAEiJRCRYSIuEJPAAAABIiUQkUGRIiwQlKAAAAEiJhCSYAAAAMcDow9r//0GD/wpIiUQkYA+H4gsAAESJ+EyLFCT/JMVAlkAA", 
        "flow_hash": "010000000000000020000000fd6d4a6aad9024c33a60331acedfa2712dd63541134b9718e3dcc72dc43ab13a6806171202d64226ee35813de6edb60dcbe63e59d2bb496c06ab36259b67713cb7799f45cc7da70f007b4911db01a1138a82264a12c6c951aeb773979c35be4334640a97a228209a6472f881fa0ba2475ba32ec06fe72c6b3760d48bc49e8610", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x403b50   push r15\n0x403b52   push r14\n0x403b54   mov r15d, r8d\n0x403b57   push r13\n0x403b59   push r12\n0x403b5b   mov r14, rdi\n0x403b5e   push rbp\n0x403b5f   push rbx\n0x403b60   mov ebp, r9d\n0x403b63   mov r13, rcx\n0x403b66   and ebp, 2\n0x403b69   sub rsp, 0xa8\n0x403b70   mov rax, qword [rsp + 0xe0]\n0x403b78   mov qword [rsp], rsi\n0x403b7c   mov qword [rsp + 0x18], rdx\n0x403b81   mov dword [rsp + 0x38], r9d\n0x403b86   mov qword [rsp + 0x28], rax\n0x403b8b   mov rax, qword [rsp + 0xe8]\n0x403b93   mov qword [rsp + 0x58], rax\n0x403b98   mov rax, qword [rsp + 0xf0]\n0x403ba0   mov qword [rsp + 0x50], rax\n0x403ba5   mov rax, qword fs:[0x28]\n0x403bae   mov qword [rsp + 0x98], rax\n0x403bb6   xor eax, eax\n0x403bb8   call 0x401680\n0x403bbd   cmp r15d, 0xa\n0x403bc1   mov qword [rsp + 0x60], rax\n0x403bc6   ja 0x4047ae\n0x403bcc   mov eax, r15d\n0x403bcf   mov r10, qword [rsp]\n0x403bd3   jmp qword [rax*8 + 0x409640]\n"
      }, 
      "offset": 4209488
    }, 
    {
      "proc_desc": {
        "name": "sub.Usage:__s__OPTION_...__FILE_..._730", 
        "raw_len": 912, 
        "vex_hash": "010000000000000040000000e2a823009d581b0012c0210017160300f16606007de406001789210041565e008fef110040151f0066f10a00b5631a001109000055c0270031eb0f00738c190052743500ce6635003bc62a005cb9000070d0100048bbaf008c560200ce490500200b1000df7c03003f70050039ef3400c06a3e00bb4a0b008685320068b74b00a7500400eff73f0087be0f00cfb74100ac9e0400c668020089625700ade54c00a7f75f00b9dd2d0060d8ba002c005d0085dd07003fb60b007b6d660075ea0d001118280027ea0c00ac85040006b738002880a300e5494900d95e06009aef480032e60100b6580b00e1d903008d8c1500bb5c73009284070010e74000e1876000", 
        "raw": "QVRVugUAAABTiftIg8SASIstCpwgAGRIiwQlKAAAAEiJRCR4McCF/3QsvhCPQAAx/+gK7///SIs9s5sgAEiJwkiJ6b4BAAAAMcDo8fH//4nf6Mrx//++OI9AADH/6N7u//9IiepIica/AQAAADHA6Bzx//9Iiy1dmyAAugUAAAC+YI9AADH/6LTu//9Iie5Iicfo+e///0iLLTqbIAC6BQAAAL6Qj0AAMf/oke7//0iJ7kiJx+jW7///SIstF5sgALoFAAAAvsiPQAAx/+hu7v//SInuSInH6LPv//9Iiy30miAAugUAAAC+GJFAADH/6Evu//9Iie5IicfokO///0iLLdGaIAC6BQAAAL7wkUAAMf/oKO7//0iJ7kiJx+ht7///SIstrpogALoFAAAAviCSQAAx/+gF7v//SInuSInH6Erv//9Iiy3TmiAAugUAAAC+WJJAADH/6OLt//+/AQAAAEiJxkiJ6UiJ6jHA6B3w//9IxwQkZI1AAEjHRCQIao1AAL9kjUAASMdEJBDijUAASMdEJBh6jUAASIngSMdEJCCQjUAASMdEJCiajUAAQbhmjUAASMdEJDCpjUAASMdEJDiajUAASMdEJECzjUAASMdEJEiajUAASMdEJFC9jUAASMdEJFiajUAASMdEJGAAAAAASMdEJGgAAAAA6wxIg8AQSIs4SIX/dAy5BAAAAEyJxvOmdehIi2gIMf+6BQAAAL7HjUAASIXtD4SxAAAA6Art//+56JJAAEiJxrrejUAAvwEAAAAxwOhB7///Mfa/BQAAAOgl7///SIXAdBq6AwAAAL7sjUAASInH6C7s//+FwA+F7AAAADH/ugUAAAC+WJNAAOi17P//uWaNQABIica66JJAADHAvwEAAABBvLubQADo5u7//0iB/WaNQAAPhJoAAAAx/7oFAAAAvniTQADoeOz//0yJ4UiJxkiJ6r8BAAAAMcDos+7//+lt/f//6Fns//+56JJAAEiJxrrejUAAvwEAAAAxwOiQ7v//Mfa/BQAAAOh07v//SIXAdBa6AwAAAL7sjUAASInH6H3r//+FwHU6ugUAAAC+WJNAADH/6Ajs//+5Zo1AAEiJxrrokkAAvwEAAAAxwOg/7v//vWaNQABBvISNQADpVv///71mjUAAMf+6BQAAAL4Qk0AA6Mnr//+6Zo1AAEiJxr8BAAAAMcDoBe7//+nq/v//", 
        "flow_hash": "01000000000000002000000002de3805e8f7c916d576380a82403c076e270007b7d5fe0c704ee7011a0adf0ccef6d4004a7c2b00aba9680610e61a03f799d304e719af0a73b69d012778920313f3df14ae30f507007b4911db01a113e520ee015120c5040e1aa5324160e924c450543c25aede14c030e602483b5407bc91d50656d5410a35fc68060ce56a11", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x402730   push r12\n0x402732   push rbp\n0x402733   mov edx, 5\n0x402738   push rbx\n0x402739   mov ebx, edi\n0x40273b   add rsp, 0xffffffffffffff80\n0x40273f   mov rbp, qword [rip + 0x209c0a]\n0x402746   mov rax, qword fs:[0x28]\n0x40274f   mov qword [rsp + 0x78], rax\n0x402754   xor eax, eax\n0x402756   test edi, edi\n0x402758   je 0x402786\n0x40275a   mov esi, 0x408f10\n0x40275f   xor edi, edi\n0x402761   call 0x401670\n0x402766   mov rdi, qword [rip + 0x209bb3]\n0x40276d   mov rdx, rax\n0x402770   mov rcx, rbp\n0x402773   mov esi, 1\n0x402778   xor eax, eax\n0x40277a   call 0x401970\n0x40277f   mov edi, ebx\n0x402781   call 0x401950\n0x402786   mov esi, 0x408f38\n0x40278b   xor edi, edi\n0x40278d   call 0x401670\n0x402792   mov rdx, rbp\n0x402795   mov rsi, rax\n0x402798   mov edi, 1\n0x40279d   xor eax, eax\n0x40279f   call 0x4018c0\n0x4027a4   mov rbp, qword [rip + 0x209b5d]\n0x4027ab   mov edx, 5\n0x4027b0   mov esi, 0x408f60\n0x4027b5   xor edi, edi\n0x4027b7   call 0x401670\n0x4027bc   mov rsi, rbp\n0x4027bf   mov rdi, rax\n0x4027c2   call 0x4017c0\n0x4027c7   mov rbp, qword [rip + 0x209b3a]\n0x4027ce   mov edx, 5\n0x4027d3   mov esi, 0x408f90\n0x4027d8   xor edi, edi\n0x4027da   call 0x401670\n0x4027df   mov rsi, rbp\n0x4027e2   mov rdi, rax\n0x4027e5   call 0x4017c0\n0x4027ea   mov rbp, qword [rip + 0x209b17]\n0x4027f1   mov edx, 5\n0x4027f6   mov esi, 0x408fc8\n0x4027fb   xor edi, edi\n0x4027fd   call 0x401670\n0x402802   mov rsi, rbp\n0x402805   mov rdi, rax\n0x402808   call 0x4017c0\n0x40280d   mov rbp, qword [rip + 0x209af4]\n0x402814   mov edx, 5\n0x402819   mov esi, 0x409118\n0x40281e   xor edi, edi\n0x402820   call 0x401670\n0x402825   mov rsi, rbp\n0x402828   mov rdi, rax\n0x40282b   call 0x4017c0\n0x402830   mov rbp, qword [rip + 0x209ad1]\n0x402837   mov edx, 5\n0x40283c   mov esi, 0x4091f0\n0x402841   xor edi, edi\n0x402843   call 0x401670\n0x402848   mov rsi, rbp\n0x40284b   mov rdi, rax\n0x40284e   call 0x4017c0\n0x402853   mov rbp, qword [rip + 0x209aae]\n0x40285a   mov edx, 5\n0x40285f   mov esi, 0x409220\n0x402864   xor edi, edi\n0x402866   call 0x401670\n0x40286b   mov rsi, rbp\n0x40286e   mov rdi, rax\n0x402871   call 0x4017c0\n0x402876   mov rbp, qword [rip + 0x209ad3]\n0x40287d   mov edx, 5\n0x402882   mov esi, 0x409258\n0x402887   xor edi, edi\n0x402889   call 0x401670\n0x40288e   mov edi, 1\n0x402893   mov rsi, rax\n0x402896   mov rcx, rbp\n0x402899   mov rdx, rbp\n0x40289c   xor eax, eax\n0x40289e   call 0x4018c0\n0x4028a3   mov qword [rsp], 0x408d64\n0x4028ab   mov qword [rsp + 8], 0x408d6a\n0x4028b4   mov edi, 0x408d64\n0x4028b9   mov qword [rsp + 0x10], 0x408de2\n0x4028c2   mov qword [rsp + 0x18], 0x408d7a\n0x4028cb   mov rax, rsp\n0x4028ce   mov qword [rsp + 0x20], 0x408d90\n0x4028d7   mov qword [rsp + 0x28], 0x408d9a\n0x4028e0   mov r8d, 0x408d66\n0x4028e6   mov qword [rsp + 0x30], 0x408da9\n0x4028ef   mov qword [rsp + 0x38], 0x408d9a\n0x4028f8   mov qword [rsp + 0x40], 0x408db3\n0x402901   mov qword [rsp + 0x48], 0x408d9a\n0x40290a   mov qword [rsp + 0x50], 0x408dbd\n0x402913   mov qword [rsp + 0x58], 0x408d9a\n0x40291c   mov qword [rsp + 0x60], 0\n0x402925   mov qword [rsp + 0x68], 0\n0x40292e   jmp 0x40293c\n0x402930   add rax, 0x10\n0x402934   mov rdi, qword [rax]\n0x402937   test rdi, rdi\n0x40293a   je 0x402948\n0x40293c   mov ecx, 4\n0x402941   mov rsi, r8\n0x402944   repe cmpsb byte [rsi], byte ptr [rdi]\n0x402946   jne 0x402930\n0x402948   mov rbp, qword [rax + 8]\n0x40294c   xor edi, edi\n0x40294e   mov edx, 5\n0x402953   mov esi, 0x408dc7\n0x402958   test rbp, rbp\n0x40295b   je 0x402a12\n0x402961   call 0x401670\n0x402966   mov ecx, 0x4092e8\n0x40296b   mov rsi, rax\n0x40296e   mov edx, 0x408dde\n0x402973   mov edi, 1\n0x402978   xor eax, eax\n0x40297a   call 0x4018c0\n0x40297f   xor esi, esi\n0x402981   mov edi, 5\n0x402986   call 0x4018b0\n0x40298b   test rax, rax\n0x40298e   je 0x4029aa\n0x402990   mov edx, 3\n0x402995   mov esi, 0x408dec\n0x40299a   mov rdi, rax\n0x40299d   call 0x4015d0\n0x4029a2   test eax, eax\n0x4029a4   jne 0x402a96\n0x4029aa   xor edi, edi\n0x4029ac   mov edx, 5\n0x4029b1   mov esi, 0x409358\n0x4029b6   call 0x401670\n0x4029bb   mov ecx, 0x408d66\n0x4029c0   mov rsi, rax\n0x4029c3   mov edx, 0x4092e8\n0x4029c8   xor eax, eax\n0x4029ca   mov edi, 1\n0x4029cf   mov r12d, 0x409bbb\n0x4029d5   call 0x4018c0\n0x4029da   cmp rbp, 0x408d66\n0x4029e1   je 0x402a81\n0x4029e7   xor edi, edi\n0x4029e9   mov edx, 5\n0x4029ee   mov esi, 0x409378\n0x4029f3   call 0x401670\n0x4029f8   mov rcx, r12\n0x4029fb   mov rsi, rax\n0x4029fe   mov rdx, rbp\n0x402a01   mov edi, 1\n0x402a06   xor eax, eax\n0x402a08   call 0x4018c0\n0x402a0d   jmp 0x40277f\n0x402a12   call 0x401670\n0x402a17   mov ecx, 0x4092e8\n0x402a1c   mov rsi, rax\n0x402a1f   mov edx, 0x408dde\n0x402a24   mov edi, 1\n0x402a29   xor eax, eax\n0x402a2b   call 0x4018c0\n0x402a30   xor esi, esi\n0x402a32   mov edi, 5\n0x402a37   call 0x4018b0\n0x402a3c   test rax, rax\n0x402a3f   je 0x402a57\n0x402a41   mov edx, 3\n0x402a46   mov esi, 0x408dec\n0x402a4b   mov rdi, rax\n0x402a4e   call 0x4015d0\n0x402a53   test eax, eax\n0x402a55   jne 0x402a91\n0x402a57   mov edx, 5\n0x402a5c   mov esi, 0x409358\n0x402a61   xor edi, edi\n0x402a63   call 0x401670\n0x402a68   mov ecx, 0x408d66\n0x402a6d   mov rsi, rax\n0x402a70   mov edx, 0x4092e8\n0x402a75   mov edi, 1\n0x402a7a   xor eax, eax\n0x402a7c   call 0x4018c0\n0x402a81   mov ebp, 0x408d66\n0x402a86   mov r12d, 0x408d84\n0x402a8c   jmp 0x4029e7\n0x402a91   mov ebp, 0x408d66\n0x402a96   xor edi, edi\n0x402a98   mov edx, 5\n0x402a9d   mov esi, 0x409310\n0x402aa2   call 0x401670\n0x402aa7   mov edx, 0x408d66\n0x402aac   mov rsi, rax\n0x402aaf   mov edi, 1\n0x402ab4   xor eax, eax\n0x402ab6   call 0x4018c0\n0x402abb   jmp 0x4029aa\n"
      }, 
      "offset": 4204336
    }, 
    {
      "proc_desc": {
        "name": "fcn.00404fe0", 
        "raw_len": 17, 
        "vex_hash": "010000000000000040000000a008d10036544f00f6200e00f2975d002c9c79007de4060020e2f10005ca93002ff22300e527ec009be4340010abe100304fee001b425e00f21b9e0026c9f4005b89ba01b9ba3a0074336301cd073900c4ad0a01de3a5100f9c90900cd035400d7744d00646e0a00659883017a97f6006e8f2e00e2942901a0e873004c503501a867b700b0b0c20020f8b100542f1901ce38b800dfe2960023a34101ff6ab901db911200b9dd2d00b7d60300f44279003b7b30005bde22004d3e12022ce86d0016e0080130e6250098dd10001deb0200e631320068c99500ec440e00cadba0002d7f910198615a015b1f6900bf041800f6138000df39f000c2a74700971d3900", 
        "raw": "ujoAAABIx8b/////6R////8=", 
        "flow_hash": "010000000000000020000000fd6d4a6aee0246733a60331a932333302dd6354163ac650ee3dcc72d1884062a680617123e192d1a1f86e60b80c04002d283fe33d2bb496c8afa0d1df4042c0b7292ec1ccc7da70f007b4911db01a113dd7cb01312c6c951aeb7739789bc753434640a975a33187b2e217143fa0ba247f201170c8364170d73ad0e7fc49e8610", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x404f10   sub rsp, 0x48\n0x404f14   mov ecx, edx\n0x404f16   mov rax, qword fs:[0x28]\n0x404f1f   mov qword [rsp + 0x38], rax\n0x404f24   xor eax, eax\n0x404f26   mov rax, qword [rip + 0x207533]\n0x404f2d   and ecx, 0x1f\n0x404f30   mov qword [rsp], rax\n0x404f34   mov rax, qword [rip + 0x20752d]\n0x404f3b   mov qword [rsp + 8], rax\n0x404f40   mov rax, qword [rip + 0x207529]\n0x404f47   mov qword [rsp + 0x10], rax\n0x404f4c   mov rax, qword [rip + 0x207525]\n0x404f53   mov qword [rsp + 0x18], rax\n0x404f58   mov rax, qword [rip + 0x207521]\n0x404f5f   mov qword [rsp + 0x20], rax\n0x404f64   mov rax, qword [rip + 0x20751d]\n0x404f6b   mov qword [rsp + 0x28], rax\n0x404f70   mov rax, qword [rip + 0x207519]\n0x404f77   mov qword [rsp + 0x30], rax\n0x404f7c   mov eax, edx\n0x404f7e   shr al, 5\n0x404f81   movzx eax, al\n0x404f84   lea r8, [rsp + rax*4 + 8]\n0x404f89   mov edx, dword [r8]\n0x404f8c   mov eax, edx\n0x404f8e   shr eax, cl\n0x404f90   xor eax, 1\n0x404f93   and eax, 1\n0x404f96   shl eax, cl\n0x404f98   mov rcx, rsp\n0x404f9b   xor eax, edx\n0x404f9d   mov rdx, rsi\n0x404fa0   mov rsi, rdi\n0x404fa3   mov dword [r8], eax\n0x404fa6   xor edi, edi\n0x404fa8   call 0x4048f0\n0x404fad   mov rsi, qword [rsp + 0x38]\n0x404fb2   xor rsi, qword fs:[0x28]\n0x404fbb   jne 0x404fc2\n0x404fbd   add rsp, 0x48\n0x404fc1   ret\n0x404fc2   call 0x4016a0\n0x404fe0   mov edx, 0x3a\n0x404fe5   mov rsi, 0xffffffffffffffff\n0x404fec   jmp 0x404f10\n"
      }, 
      "offset": 4214752
    }, 
    {
      "proc_desc": {
        "name": "sub.memchr_310", 
        "raw_len": 58, 
        "vex_hash": "0100000000000000400000002fd67402a9eb6e01eee52e0059d7b200964739019dc9780011752901c630b5049ff8c2004f629e0177506a00acaf4e02427a1d02d6cb3800b753970060486507483cff0322c62e00b61fe501bea5a301a23e800013811a02e83f6f008990ab026aaef601664f7500a3095e00ecca0306a3a62c0284385803c196c403e6550c03d71e1f000e863502262bd8002b7bc700c8b452000c725e0086fe9f0049b2140172d47f06200a8602c41022000cad5d01b9fab700a7aae4008ee21c000a61de000e835e000a53990274053200f73e73005c17cf0368c995009c90360387fbe600a11515012b5557022eeca30168603100f6138000df39f00050554800f4392101", 
        "raw": "VVNIifJIifUx9kiJ+0iD7AjoWsT//0iFwHQVSCnYSIPECEiDwAFbXcMPH4AAAAAASIPECEiJ6Ftdww==", 
        "flow_hash": "010000000000000020000000fd6d4a6ad798f5483a60331aeab5d96f2dd6354142e62c4661bfe18fc43ab13a5ca8cce4a5efba123eaa696754a10b1c681eaf24414ece8d06ab3625b33f5070226c6e19cc7da70fdfc0746358c6f6465723c4eb12c6c951aeb77397934ab64034640a976c06db14c3926a1c2a26f68ec59028616fe72c6bbd1531d5c49e8610", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x405310   push rbp\n0x405311   push rbx\n0x405312   mov rdx, rsi\n0x405315   mov rbp, rsi\n0x405318   xor esi, esi\n0x40531a   mov rbx, rdi\n0x40531d   sub rsp, 8\n0x405321   call 0x401780\n0x405326   test rax, rax\n0x405329   je 0x405340\n0x40532b   sub rax, rbx\n0x40532e   add rsp, 8\n0x405332   add rax, 1\n0x405336   pop rbx\n0x405337   pop rbp\n0x405338   ret\n0x405340   add rsp, 8\n0x405344   mov rax, rbp\n0x405347   pop rbx\n0x405348   pop rbp\n0x405349   ret\n"
      }, 
      "offset": 4215568
    }, 
    {
      "proc_desc": {
        "name": "sub.read_250", 
        "raw_len": 94, 
        "vex_hash": "0100000000000000400000002fd67402520b4701eee52e00f2975d009cdc31018798e500674aa6013e3e10009ff8c200b1b9fc00f68bd800db81800014b1d3015512e100dc0e8b03f8023204323e7501a14aec000424b203bea5a301a23e800013811a02b6173500d2733f0307904001646e0a0016834800c91fd704a3a62c0217267a008a046f004f0c7101978bdb01dd876f01262bd8002b7bc7003289290044335b00df8e4400fb233b0088021c0150fa51002143bc007eebbf00ed144c0068874e00ccad830120c0e00023103f00c0013302740532008b877001d416100168c99500c3131c00697568009564090298615a010296b90168603100c5ab2f0053c5d200e31ee802ce0b3e00", 
        "raw": "QVVBVEGJ/VVTSYn0SInTSIPsCA8fRAAASInaTInmRInv6BrF//9IhcBIicV5Iug9w///iwCD+AR03oP4FnURSIH7AOD/f3YIuwDg/3/ryZBIg8QISInoW11BXEFdww==", 
        "flow_hash": "0100000000000000200000003edcbd1618cfec123a60331af72eca0084836305134b97185b6ee82aa1308117cef6d4004a7c2b00ae122f17e6edb60d62bbcd36d27fc81006ab36259b67713c2fddf042cc7da70ff83e170fdb01a1132975fa1c7594ee03a80bff3c1b09bc01828a62335ba2e36a178e62044e4cf617da849e28f648083bfd69992fc49e8610", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x405250   push r13\n0x405252   push r12\n0x405254   mov r13d, edi\n0x405257   push rbp\n0x405258   push rbx\n0x405259   mov r12, rsi\n0x40525c   mov rbx, rdx\n0x40525f   sub rsp, 8\n0x405263   nop dword [rax + rax]\n0x405268   mov rdx, rbx\n0x40526b   mov rsi, r12\n0x40526e   mov edi, r13d\n0x405271   call 0x401790\n0x405276   test rax, rax\n0x405279   mov rbp, rax\n0x40527c   jns 0x4052a0\n0x40527e   call 0x4015c0\n0x405283   mov eax, dword [rax]\n0x405285   cmp eax, 4\n0x405288   je 0x405268\n0x40528a   cmp eax, 0x16\n0x40528d   jne 0x4052a0\n0x40528f   cmp rbx, 0x7fffe000\n0x405296   jbe 0x4052a0\n0x405298   mov ebx, 0x7fffe000\n0x40529d   jmp 0x405268\n0x4052a0   add rsp, 8\n0x4052a4   mov rax, rbp\n0x4052a7   pop rbx\n0x4052a8   pop rbp\n0x4052a9   pop r12\n0x4052ab   pop r13\n0x4052ad   ret\n"
      }, 
      "offset": 4215376
    }, 
    {
      "proc_desc": {
        "name": "sub.write_2b0", 
        "raw_len": 94, 
        "vex_hash": "0100000000000000400000002fd67402520b4701eee52e00f2975d002e195f008798e500674aa6013e3e10009ff8c200b1b9fc00f68bd800db81800014b1d3015512e1005b6c8c00f8023204323e7501a14aec000424b203bea5a301a23e800013811a02b6173500d2733f037fda1900646e0a0016834800c91fd704a3a62c0217267a008a046f004f0c7101978bdb01dd876f01262bd8002b7bc7003289290044335b00df8e4400fb233b0088021c0150fa51002143bc007eebbf00ed144c0068874e00ccad830120c0e00023103f00c0013302740532008b877001d416100168c99500c3131c006975680018aa700198615a010296b90168603100c5ab2f0053c5d200e31ee802ce0b3e00", 
        "raw": "QVVBVEGJ/VVTSYn0SInTSIPsCA8fRAAASInaTInmRInv6ErD//9IhcBIicV5Iujdwv//iwCD+AR03oP4FnURSIH7AOD/f3YIuwDg/3/ryZBIg8QISInoW11BXEFdww==", 
        "flow_hash": "0100000000000000200000003edcbd1618cfec123a60331af72eca0084836305134b97185b6ee82aa1308117cef6d4004a7c2b00ae122f17e6edb60d62bbcd36d27fc81006ab36259b67713c2fddf042cc7da70ff83e170fdb01a1132975fa1c7594ee03a80bff3c1b09bc01828a62335ba2e36a178e62044e4cf617da849e28f648083bfd69992fc49e8610", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x4052b0   push r13\n0x4052b2   push r12\n0x4052b4   mov r13d, edi\n0x4052b7   push rbp\n0x4052b8   push rbx\n0x4052b9   mov r12, rsi\n0x4052bc   mov rbx, rdx\n0x4052bf   sub rsp, 8\n0x4052c3   nop dword [rax + rax]\n0x4052c8   mov rdx, rbx\n0x4052cb   mov rsi, r12\n0x4052ce   mov edi, r13d\n0x4052d1   call 0x401620\n0x4052d6   test rax, rax\n0x4052d9   mov rbp, rax\n0x4052dc   jns 0x405300\n0x4052de   call 0x4015c0\n0x4052e3   mov eax, dword [rax]\n0x4052e5   cmp eax, 4\n0x4052e8   je 0x4052c8\n0x4052ea   cmp eax, 0x16\n0x4052ed   jne 0x405300\n0x4052ef   cmp rbx, 0x7fffe000\n0x4052f6   jbe 0x405300\n0x4052f8   mov ebx, 0x7fffe000\n0x4052fd   jmp 0x4052c8\n0x405300   add rsp, 8\n0x405304   mov rax, rbp\n0x405307   pop rbx\n0x405308   pop rbp\n0x405309   pop r12\n0x40530b   pop r13\n0x40530d   ret\n"
      }, 
      "offset": 4215472
    }, 
    {
      "proc_desc": {
        "name": "fcn.00405010", 
        "raw_len": 180, 
        "vex_hash": "010000000000000040000000ff78400051f62600eee52e00f2975d002e992600b3682000d7a76b0000f9f1009c705d00d5c7d500d437b900afdf5800cb6b6f00d6cb38002e23b90026c9f40048478401935b7a0089592a01cd0739009224ac006c202101e37964002e90a50025b0a80028c0e100d3dbed01cdc3a404efccb200c1ca9b01e91f0b0028c95c004eb6000004635a00be4c0b000e050d00705a41000c725e006b398200bd26dd009379c3026f520f00c410220020e21500b9fab7005bde22003928d201a63ac301df89b20307ea9b00ab136d00374d0201d416100168c9950058ac3f00760747000d337700936eda001bfb4e0068603100eb331e00df39f0004c6d2e00971d3900", 
        "raw": "VVOJ+0iJ1UiB7IgAAABIiedkSIsEJSgAAABIiUQkeDHA6Lrp//9Ii1QkEEiLBCRIjUwkQInfSInuSIlUJFBIi1QkGEiJRCRASItEJAhIiVQkWEiLVCQgSIlEJEhIweggSIlUJGBIi1QkKEiJVCRoSItUJDBIiVQkcInC99KB4gAAAAQx0EjHwv////+JRCRM6Ev4//9Ii1wkeGRIMxwlKAAAAHUKSIHEiAAAAFtdw+jcxf//", 
        "flow_hash": "010000000000000020000000fd6d4a6ad798f5483a60331a932333302dd6354163ac650ee3dcc72dc43ab13a68061712a5efba121f86e60be6edb60d681eaf24d2bb496c06ab36259b67713c226c6e19cc7da70f007b4911db01a11341211b2312c6c951aeb7739789bc753434640a976c06db14c3926a1cfa0ba247f201170c8364170d73ad0e7fc49e8610", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x405010   push rbp\n0x405011   push rbx\n0x405012   mov ebx, edi\n0x405014   mov rbp, rdx\n0x405017   sub rsp, 0x88\n0x40501e   mov rdi, rsp\n0x405021   mov rax, qword fs:[0x28]\n0x40502a   mov qword [rsp + 0x78], rax\n0x40502f   xor eax, eax\n0x405031   call 0x4039f0\n0x405036   mov rdx, qword [rsp + 0x10]\n0x40503b   mov rax, qword [rsp]\n0x40503f   lea rcx, [rsp + 0x40]\n0x405044   mov edi, ebx\n0x405046   mov rsi, rbp\n0x405049   mov qword [rsp + 0x50], rdx\n0x40504e   mov rdx, qword [rsp + 0x18]\n0x405053   mov qword [rsp + 0x40], rax\n0x405058   mov rax, qword [rsp + 8]\n0x40505d   mov qword [rsp + 0x58], rdx\n0x405062   mov rdx, qword [rsp + 0x20]\n0x405067   mov qword [rsp + 0x48], rax\n0x40506c   shr rax, 0x20\n0x405070   mov qword [rsp + 0x60], rdx\n0x405075   mov rdx, qword [rsp + 0x28]\n0x40507a   mov qword [rsp + 0x68], rdx\n0x40507f   mov rdx, qword [rsp + 0x30]\n0x405084   mov qword [rsp + 0x70], rdx\n0x405089   mov edx, eax\n0x40508b   not edx\n0x40508d   and edx, 0x4000000\n0x405093   xor eax, edx\n0x405095   mov rdx, 0xffffffffffffffff\n0x40509c   mov dword [rsp + 0x4c], eax\n0x4050a0   call 0x4048f0\n0x4050a5   mov rbx, qword [rsp + 0x78]\n0x4050aa   xor rbx, qword fs:[0x28]\n0x4050b3   jne 0x4050bf\n0x4050b5   add rsp, 0x88\n0x4050bc   pop rbx\n0x4050bd   pop rbp\n0x4050be   ret\n0x4050bf   call 0x4016a0\n"
      }, 
      "offset": 4214800
    }, 
    {
      "proc_desc": {
        "name": "sub.dcgettext_700", 
        "raw_len": 739, 
        "vex_hash": "010000000000000040000000c7456000757f4700a0280d00e0fa19005d7d28007de4060095ff2f00a21e9f003e14230089ca0b005862030038d79f00e3cb740065460e00ca5c2500a6391a00cc4f0900e49f220046732b000b667600a23e800058cfaa00b61735008e572800ef292a00350134005fea25009b969d00bc22300017267a0078c95b00a4ae1600db051000b1a82301be4c0b0053e70400ac9e0400a8380a0090d34e00f53aa20072610700ab512b00c4102200dfe4ab0085dd07008f5516007ef41900f2443a0011182800fb6f710066c02400c1be0b005cb80e00d71e8100d95e060012b13200279a0c004b230a00e1d90300700603009e7b2100928407004c6d2e00971d3900", 
        "raw": "QVdBVroFAAAAQVVBVEmJ/FVTSInzSIn+Mf9Ig+wY6E3f//9JicXoFSsAAL6qlUAASInHSInF6DUqAACFwA+FxQAAAEiF2w+EFAIAAEiJXCQISIndRTH/RTH2TInmTInv6Hvg//+FwA+EgwAAAEyJ5kyJ7+h49f//hMB1PEiDfCQIAHQRSIt0JAhMie/oX/X//4TAdSNIhdsPhGIBAABIid5Mie/oR/X//4TAD4RPAQAADx+AAAAAAE2F9nQITIn36Nvd//9Nhf9Mieh0EkyJ/0iJRCQI6Mbd//9Ii0QkCEiDxBhbXUFcQV1BXkFfw2aQSIPEGEiJ6FtdQVxBXUFeQV/DZg8fRAAASInqvqqVQABIid/oKCkAAEiJ70mJxuht3v//SI14C0mJx+iBJgAATIn6SInuSInH6LPf//9IicFJAcdIuC8vVFJBTlNMSYkHuElUAABIicpIid++qpVAAGZBiUcIQcZHCgBIiUwkCOjMKAAASItMJAhIicNIic/oHN3//0iF23Qavj8AAABIid/oOt7//0iFwHQlSInf6P3c//9NhfYPhNQAAABMiXQkCEyJ9THbRTH/6Zz+//9mkE2F9g+E1wAAAEyJ5kyJ7+gM3///hcAPheAAAABJOd4PhM8AAABIid/os9z//0iDxBhMifBbXUFcQV1BXkFfw5BMie/oiN3//0iJ70iJw+h93f//SI18AwTokyUAAEmJ6UiJx0iJw02J6DHAuaKVQABIx8L/////vgEAAADof+D//02F9nQITIn36FLc//9Nhf9IidgPhXP+///pgP7//5BIx0QkCAAAAABFMf9FMfZMieXp4/3//2YPH4QAAAAAADHbSMdEJAgAAAAARTH/TInl6cT9//9mLg8fhAAAAAAASMdEJAgAAAAASYnfSInd6ab9//9MifDpI/7//0yJ5kyJ7+gp8///hMB1EEyJdCQISYnfTIn16aH9//9Jid/p2v3//w==", 
        "flow_hash": "010000000000000020000000b2849f043902b303d576380af72eca006e27000753c5440493aa1f0bc9a42616cef6d40037b8300013dd370264915001a196720658e068048325f7072e36f12598d65b00ae30f507189204048685d603ee699003c6fd7b1170314d013fa22203e728db0fa9cf510575154702483b5407a7c5130f61b69a033f049922b57ae400", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x403700   push r15\n0x403702   push r14\n0x403704   mov edx, 5\n0x403709   push r13\n0x40370b   push r12\n0x40370d   mov r12, rdi\n0x403710   push rbp\n0x403711   push rbx\n0x403712   mov rbx, rsi\n0x403715   mov rsi, rdi\n0x403718   xor edi, edi\n0x40371a   sub rsp, 0x18\n0x40371e   call 0x401670\n0x403723   mov r13, rax\n0x403726   call 0x406240\n0x40372b   mov esi, 0x4095aa\n0x403730   mov rdi, rax\n0x403733   mov rbp, rax\n0x403736   call 0x406170\n0x40373b   test eax, eax\n0x40373d   jne 0x403808\n0x403743   test rbx, rbx\n0x403746   je 0x403960\n0x40374c   mov qword [rsp + 8], rbx\n0x403751   mov rbp, rbx\n0x403754   xor r15d, r15d\n0x403757   xor r14d, r14d\n0x40375a   mov rsi, r12\n0x40375d   mov rdi, r13\n0x403760   call 0x4017e0\n0x403765   test eax, eax\n0x403767   je 0x4037f0\n0x40376d   mov rsi, r12\n0x403770   mov rdi, r13\n0x403773   call 0x402cf0\n0x403778   test al, al\n0x40377a   jne 0x4037b8\n0x40377c   cmp qword [rsp + 8], 0\n0x403782   je 0x403795\n0x403784   mov rsi, qword [rsp + 8]\n0x403789   mov rdi, r13\n0x40378c   call 0x402cf0\n0x403791   test al, al\n0x403793   jne 0x4037b8\n0x403795   test rbx, rbx\n0x403798   je 0x403900\n0x40379e   mov rsi, rbx\n0x4037a1   mov rdi, r13\n0x4037a4   call 0x402cf0\n0x4037a9   test al, al\n0x4037ab   je 0x403900\n0x4037b1   nop dword [rax]\n0x4037b8   test r14, r14\n0x4037bb   je 0x4037c5\n0x4037bd   mov rdi, r14\n0x4037c0   call 0x4015a0\n0x4037c5   test r15, r15\n0x4037c8   mov rax, r13\n0x4037cb   je 0x4037df\n0x4037cd   mov rdi, r15\n0x4037d0   mov qword [rsp + 8], rax\n0x4037d5   call 0x4015a0\n0x4037da   mov rax, qword [rsp + 8]\n0x4037df   add rsp, 0x18\n0x4037e3   pop rbx\n0x4037e4   pop rbp\n0x4037e5   pop r12\n0x4037e7   pop r13\n0x4037e9   pop r14\n0x4037eb   pop r15\n0x4037ed   ret\n0x4037f0   add rsp, 0x18\n0x4037f4   mov rax, rbp\n0x4037f7   pop rbx\n0x4037f8   pop rbp\n0x4037f9   pop r12\n0x4037fb   pop r13\n0x4037fd   pop r14\n0x4037ff   pop r15\n0x403801   ret\n0x403808   mov rdx, rbp\n0x40380b   mov esi, 0x4095aa\n0x403810   mov rdi, rbx\n0x403813   call 0x406140\n0x403818   mov rdi, rbp\n0x40381b   mov r14, rax\n0x40381e   call 0x401690\n0x403823   lea rdi, [rax + 0xb]\n0x403827   mov r15, rax\n0x40382a   call 0x405eb0\n0x40382f   mov rdx, r15\n0x403832   mov rsi, rbp\n0x403835   mov rdi, rax\n0x403838   call 0x4017f0\n0x40383d   mov rcx, rax\n0x403840   add r15, rax\n0x403843   movabs rax, 0x4c534e4152542f2f\n0x40384d   mov qword [r15], rax\n0x403850   mov eax, 0x5449\n0x403855   mov rdx, rcx\n0x403858   mov rdi, rbx\n0x40385b   mov esi, 0x4095aa\n0x403860   mov word [r15 + 8], ax\n0x403865   mov byte [r15 + 0xa], 0\n0x40386a   mov qword [rsp + 8], rcx\n0x40386f   call 0x406140\n0x403874   mov rcx, qword [rsp + 8]\n0x403879   mov rbx, rax\n0x40387c   mov rdi, rcx\n0x40387f   call 0x4015a0\n0x403884   test rbx, rbx\n0x403887   je 0x4038a3\n0x403889   mov esi, 0x3f\n0x40388e   mov rdi, rbx\n0x403891   call 0x4016d0\n0x403896   test rax, rax\n0x403899   je 0x4038c0\n0x40389b   mov rdi, rbx\n0x40389e   call 0x4015a0\n0x4038a3   test r14, r14\n0x4038a6   je 0x403980\n0x4038ac   mov qword [rsp + 8], r14\n0x4038b1   mov rbp, r14\n0x4038b4   xor ebx, ebx\n0x4038b6   xor r15d, r15d\n0x4038b9   jmp 0x40375a\n0x4038c0   test r14, r14\n0x4038c3   je 0x4039a0\n0x4038c9   mov rsi, r12\n0x4038cc   mov rdi, r13\n0x4038cf   call 0x4017e0\n0x4038d4   test eax, eax\n0x4038d6   jne 0x4039bc\n0x4038dc   cmp r14, rbx\n0x4038df   je 0x4039b4\n0x4038e5   mov rdi, rbx\n0x4038e8   call 0x4015a0\n0x4038ed   add rsp, 0x18\n0x4038f1   mov rax, r14\n0x4038f4   pop rbx\n0x4038f5   pop rbp\n0x4038f6   pop r12\n0x4038f8   pop r13\n0x4038fa   pop r14\n0x4038fc   pop r15\n0x4038fe   ret\n0x403900   mov rdi, r13\n0x403903   call 0x401690\n0x403908   mov rdi, rbp\n0x40390b   mov rbx, rax\n0x40390e   call 0x401690\n0x403913   lea rdi, [rbx + rax + 4]\n0x403918   call 0x405eb0\n0x40391d   mov r9, rbp\n0x403920   mov rdi, rax\n0x403923   mov rbx, rax\n0x403926   mov r8, r13\n0x403929   xor eax, eax\n0x40392b   mov ecx, 0x4095a2\n0x403930   mov rdx, 0xffffffffffffffff\n0x403937   mov esi, 1\n0x40393c   call 0x4019c0\n0x403941   test r14, r14\n0x403944   je 0x40394e\n0x403946   mov rdi, r14\n0x403949   call 0x4015a0\n0x40394e   test r15, r15\n0x403951   mov rax, rbx\n0x403954   jne 0x4037cd\n0x40395a   jmp 0x4037df\n0x403960   mov qword [rsp + 8], 0\n0x403969   xor r15d, r15d\n0x40396c   xor r14d, r14d\n0x40396f   mov rbp, r12\n0x403972   jmp 0x40375a\n0x403980   xor ebx, ebx\n0x403982   mov qword [rsp + 8], 0\n0x40398b   xor r15d, r15d\n0x40398e   mov rbp, r12\n0x403991   jmp 0x40375a\n0x4039a0   mov qword [rsp + 8], 0\n0x4039a9   mov r15, rbx\n0x4039ac   mov rbp, rbx\n0x4039af   jmp 0x40375a\n0x4039b4   mov rax, r14\n0x4039b7   jmp 0x4037df\n0x4039bc   mov rsi, r12\n0x4039bf   mov rdi, r13\n0x4039c2   call 0x402cf0\n0x4039c7   test al, al\n0x4039c9   jne 0x4039db\n0x4039cb   mov qword [rsp + 8], r14\n0x4039d0   mov r15, rbx\n0x4039d3   mov rbp, r14\n0x4039d6   jmp 0x40377c\n0x4039db   mov r15, rbx\n0x4039de   jmp 0x4037bd\n"
      }, 
      "offset": 4208384
    }, 
    {
      "proc_desc": {
        "name": "sub.__errno_location_8f0", 
        "raw_len": 426, 
        "vex_hash": "010000000000000040000000796cdc00858a1400bd270e00e0fa1900b8624b007de4060092339f00bec31b0000db360053a0df001b54490065265c00cb6b6f00b1d5170047b3250069423c008843df0073b74d003812b30057f63900a23e8000858690009be708003e8e4f00ef292a00646e0a00b46f1400d91648000a692a00460c260049a80800e4c56b014eb600004115b000be4c0b00d3703a00d90f1f000c725e0054a785009679a20072610700c0511400d81b78007eebbf00cb3d3f000bae22008ee21c00f2443a00f85c4d00fb6f71005a6927006bb402005a4e250094702f0058ac3f005529230013c304009fd51b001e25940035300a00f6138000767c02004c6d2e00971d3900", 
        "raw": "QVdBVkmJ1kFVQVRMY+dVU0iJzUiD7ChIiXQkCOivzP//SYnFiwBFheRIix24eSAAiUQkGA+IawEAAEQ7Jb95IAByWkGNVCQBSInWSYnXSMHmBEiB++DCYAAPhBEBAABIid9IiVQkEOikFQAASItUJBBIicNIiQVteSAAiz1/eSAAMfZIKfpIwecESMHiBEgB3+iKzf//RIk9Y3kgAItFBEnB5ARMjX0ITAHjSIPsCESLRQBMixtMi2MITInxg8gBiUQkJP91MEGJwf91KEFXTIneSItUJChMiedMiVwkMOh88f//SIPEIEyLXCQQSTnDd2RIjXABSYH8YMNgAEiJM3QSTInnSIl0JBDoocv//0iLdCQQSIn3SIl0JBDonxQAAEiD7AhIiUMIRItFAP91MP91KEyJ8UFXRItMJDxIicdIi1QkKEiLdCQwSYnE6A7x//9Ig8Qgi0QkGEGJRQBIg8QoTIngW11BXEFdQV5BX8Mx/0iJVCQQ6JQUAABIizVteCAASIs9bnggAEiJw0iJBVR4IABIi1QkEEiJMEiJeAjp1v7//+gWy///", 
        "flow_hash": "0100000000000000200000006a683906e8f7c9163a60331a07bfcf182bb90f0b63ac650e5b6ee82aa708f51b680617124a7c2b001f86e60b80c04002a196720658e06804577f9a09f4042c0b226c6e19cc7da70f007b4911db01a113ee6990035120c504a80bff3c06dc111842a8ea106c06db14178e62046760af18f201170c8364170dfd69992fe7406709", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x4048f0   push r15\n0x4048f2   push r14\n0x4048f4   mov r14, rdx\n0x4048f7   push r13\n0x4048f9   push r12\n0x4048fb   movsxd r12, edi\n0x4048fe   push rbp\n0x4048ff   push rbx\n0x404900   mov rbp, rcx\n0x404903   sub rsp, 0x28\n0x404907   mov qword [rsp + 8], rsi\n0x40490c   call 0x4015c0\n0x404911   mov r13, rax\n0x404914   mov eax, dword [rax]\n0x404916   test r12d, r12d\n0x404919   mov rbx, qword [rip + 0x2079b8]\n0x404920   mov dword [rsp + 0x18], eax\n0x404924   js 0x404a95\n0x40492a   cmp r12d, dword [rip + 0x2079bf]\n0x404931   jb 0x40498d\n0x404933   lea edx, [r12 + 1]\n0x404938   mov rsi, rdx\n0x40493b   mov r15, rdx\n0x40493e   shl rsi, 4\n0x404942   cmp rbx, 0x60c2e0\n0x404949   je 0x404a60\n0x40494f   mov rdi, rbx\n0x404952   mov qword [rsp + 0x10], rdx\n0x404957   call 0x405f00\n0x40495c   mov rdx, qword [rsp + 0x10]\n0x404961   mov rbx, rax\n0x404964   mov qword [rip + 0x20796d], rax\n0x40496b   mov edi, dword [rip + 0x20797f]\n0x404971   xor esi, esi\n0x404973   sub rdx, rdi\n0x404976   shl rdi, 4\n0x40497a   shl rdx, 4\n0x40497e   add rdi, rbx\n0x404981   call 0x401710\n0x404986   mov dword [rip + 0x207963], r15d\n0x40498d   mov eax, dword [rbp + 4]\n0x404990   shl r12, 4\n0x404994   lea r15, [rbp + 8]\n0x404998   add rbx, r12\n0x40499b   sub rsp, 8\n0x40499f   mov r8d, dword [rbp]\n0x4049a3   mov r11, qword [rbx]\n0x4049a6   mov r12, qword [rbx + 8]\n0x4049aa   mov rcx, r14\n0x4049ad   or eax, 1\n0x4049b0   mov dword [rsp + 0x24], eax\n0x4049b4   push qword [rbp + 0x30]\n0x4049b7   mov r9d, eax\n0x4049ba   push qword [rbp + 0x28]\n0x4049bd   push r15\n0x4049bf   mov rsi, r11\n0x4049c2   mov rdx, qword [rsp + 0x28]\n0x4049c7   mov rdi, r12\n0x4049ca   mov qword [rsp + 0x30], r11\n0x4049cf   call 0x403b50\n0x4049d4   add rsp, 0x20\n0x4049d8   mov r11, qword [rsp + 0x10]\n0x4049dd   cmp r11, rax\n0x4049e0   ja 0x404a46\n0x4049e2   lea rsi, [rax + 1]\n0x4049e6   cmp r12, 0x60c360\n0x4049ed   mov qword [rbx], rsi\n0x4049f0   je 0x404a04\n0x4049f2   mov rdi, r12\n0x4049f5   mov qword [rsp + 0x10], rsi\n0x4049fa   call 0x4015a0\n0x4049ff   mov rsi, qword [rsp + 0x10]\n0x404a04   mov rdi, rsi\n0x404a07   mov qword [rsp + 0x10], rsi\n0x404a0c   call 0x405eb0\n0x404a11   sub rsp, 8\n0x404a15   mov qword [rbx + 8], rax\n0x404a19   mov r8d, dword [rbp]\n0x404a1d   push qword [rbp + 0x30]\n0x404a20   push qword [rbp + 0x28]\n0x404a23   mov rcx, r14\n0x404a26   push r15\n0x404a28   mov r9d, dword [rsp + 0x3c]\n0x404a2d   mov rdi, rax\n0x404a30   mov rdx, qword [rsp + 0x28]\n0x404a35   mov rsi, qword [rsp + 0x30]\n0x404a3a   mov r12, rax\n0x404a3d   call 0x403b50\n0x404a42   add rsp, 0x20\n0x404a46   mov eax, dword [rsp + 0x18]\n0x404a4a   mov dword [r13], eax\n0x404a4e   add rsp, 0x28\n0x404a52   mov rax, r12\n0x404a55   pop rbx\n0x404a56   pop rbp\n0x404a57   pop r12\n0x404a59   pop r13\n0x404a5b   pop r14\n0x404a5d   pop r15\n0x404a5f   ret\n0x404a60   xor edi, edi\n0x404a62   mov qword [rsp + 0x10], rdx\n0x404a67   call 0x405f00\n0x404a6c   mov rsi, qword [rip + 0x20786d]\n0x404a73   mov rdi, qword [rip + 0x20786e]\n0x404a7a   mov rbx, rax\n0x404a7d   mov qword [rip + 0x207854], rax\n0x404a84   mov rdx, qword [rsp + 0x10]\n0x404a89   mov qword [rax], rsi\n0x404a8c   mov qword [rax + 8], rdi\n0x404a90   jmp 0x40496b\n0x404a95   call 0x4015b0\n"
      }, 
      "offset": 4212976
    }, 
    {
      "proc_desc": {
        "name": "fcn.00405cf0", 
        "raw_len": 138, 
        "vex_hash": "010000000000000040000000ef09410236544f00a0280d00f2975d0076adde007de40600f8145701c18bd400028c9200a5594f0077506a00b52dfb00d7f53e001978550242c33901c4aa2f00dd99eb00bebb8c0089592a01a2b8ef00c47b1d002f12a700e83f6f005424e5002bef0f03646e0a00df389001ac7aac026e8f2e00cb223d0085b1b30096cd9f006797f801b0b0c200262bd80019aebb00be94d500c3a23b006b398200e264070172610700a70b410318b56a007eebbf00663f94005e1de000e9ed80012ce86d004427bd00cbeaf002e69dbc015d0155019a08230168c9950005154500a0ec86006751a101a8ec4f01cefe0e01c931fd00f6138000df39f000201d4c031ff0a000", 
        "raw": "SIPsaEUxyWRIiwQlKAAAAEiJRCRYMcDrKg8fgAAAAABBicJNA1AQg8AIQYkASYsCSIXASokEzHQvSYPBAUmD+Qp0JUGLAIP4L3bVTYtQCEmNQghJiUAISYsCSIXASokEzHXWDx9EAABJieDogPv//0iLRCRYZEgzBCUoAAAAdQVIg8Row+gmuf//", 
        "flow_hash": "0100000000000000200000003edcbd1618cfec123a60331af72eca0084836305134b97185b6ee82a939ccc00680617124a7c2b00ae122f17e6edb60d681eaf24d27fc81006ab36259b67713c226c6e19cc7da70f007b4911db01a1132975fa1c7594ee03a80bff3c60c05d15828a6233626a5510178e62044e4cf617da849e28f648083bfd69992fc49e8610", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x405cf0   sub rsp, 0x68\n0x405cf4   xor r9d, r9d\n0x405cf7   mov rax, qword fs:[0x28]\n0x405d00   mov qword [rsp + 0x58], rax\n0x405d05   xor eax, eax\n0x405d07   jmp 0x405d33\n0x405d10   mov r10d, eax\n0x405d13   add r10, qword [r8 + 0x10]\n0x405d17   add eax, 8\n0x405d1a   mov dword [r8], eax\n0x405d1d   mov rax, qword [r10]\n0x405d20   test rax, rax\n0x405d23   mov qword [rsp + r9*8], rax\n0x405d27   je 0x405d58\n0x405d29   add r9, 1\n0x405d2d   cmp r9, 0xa\n0x405d31   je 0x405d58\n0x405d33   mov eax, dword [r8]\n0x405d36   cmp eax, 0x2f\n0x405d39   jbe 0x405d10\n0x405d3b   mov r10, qword [r8 + 8]\n0x405d3f   lea rax, [r10 + 8]\n0x405d43   mov qword [r8 + 8], rax\n0x405d47   mov rax, qword [r10]\n0x405d4a   test rax, rax\n0x405d4d   mov qword [rsp + r9*8], rax\n0x405d51   jne 0x405d29\n0x405d53   nop dword [rax + rax]\n0x405d58   mov r8, rsp\n0x405d5b   call 0x4058e0\n0x405d60   mov rax, qword [rsp + 0x58]\n0x405d65   xor rax, qword fs:[0x28]\n0x405d6e   jne 0x405d75\n0x405d70   add rsp, 0x68\n0x405d74   ret\n0x405d75   call 0x4016a0\n"
      }, 
      "offset": 4218096
    }, 
    {
      "proc_desc": {
        "name": "fcn.00406060", 
        "raw_len": 40, 
        "vex_hash": "0100000000000000400000001f902104a9eb6e01eee52e007905a9067a635f0136acef017a41f70ac86785049ff8c20052afa600f68bd800f77a5a02e0b21702d6cb38004d3d90109cedad066f3c1f04bddc130598193002bea5a301468dca0213811a02e83f6f00d2733f036aaef6013199c602a3095e00ecca0306a3a62c0284385803c196c40380fb2602861cf8030e863502482644002b7bc700d7b9cd010c725e0086fe9f0049b2140188021c019b227609cf869a030cad5d01b9fab700a7aae40067a0dd01a63ac3010e835e000a53990207376c09374d0201568e3504dd0f2408db891b0487fbe600956409029e78de067ef08d0768603100cc5ab506a8174201e31ee802c9838607", 
        "raw": "VVNIif1IifdIifNIg+wI6Dz+//9Ig8QISInaSInuW11IicfpaLf//w==", 
        "flow_hash": "010000000000000020000000fd6d4a6aad9024c33a60331acedfa2712dd63541134b9718e3dcc72dc43ab13a6806171202d64226ee35813de6edb60dcbe63e59d2bb496c06ab36259b67713cb7799f45cc7da70f007b4911db01a1138a82264a12c6c951aeb773979c35be4334640a97a228209a6472f881fa0ba2475ba32ec06fe72c6b3760d48bc49e8610", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x406060   push rbp\n0x406061   push rbx\n0x406062   mov rbp, rdi\n0x406065   mov rdi, rsi\n0x406068   mov rbx, rsi\n0x40606b   sub rsp, 8\n0x40606f   call 0x405eb0\n0x406074   add rsp, 8\n0x406078   mov rdx, rbx\n0x40607b   mov rsi, rbp\n0x40607e   pop rbx\n0x40607f   pop rbp\n0x406080   mov rdi, rax\n0x406083   jmp 0x4017f0\n"
      }, 
      "offset": 4218976
    }, 
    {
      "proc_desc": {
        "name": "fcn.00405d80", 
        "raw_len": 167, 
        "vex_hash": "010000000000000040000000f93b3c0236544f00a0280d00116710012ca201008bf4d4002b2834007c6ecb0063fb240228be4f02f68bd800c3ecba00cb6b6f00c430be01d6602900e3c22f01483cff03dcbb2c0046732b008459d90210ea420360424700e37964002e90a5006f791300dffb0601411d1500ed273a016e8f2e0081f0120085b1b3006baaf9019ad03500b0b0c20020f8b100c34b9d01be94d5003413a5008d1c82038833e400065fe501e416c901d8a57b007eebbf003fc91803982046018ee21c0051ab5100b3c28302d067dc001a0c57018bccd2029a082301dfbe4e00738b0e00d3e67d00c26a0700a5f47200cefe0e01c931fd00f61380006e9878000ca62300971d3900", 
        "raw": "SIHs2AAAAITATIlEJEBMiUwkSHQ3DylEJFAPKUwkYA8pVCRwDymcJIAAAAAPKaQkkAAAAA8prCSgAAAADym0JLAAAAAPKbwkwAAAAGRIiwQlKAAAAEiJRCQYMcBIjYQk4AAAAEmJ4EiJRCQISI1EJCDHBCQgAAAAx0QkBDAAAABIiUQkEOjm/v//SItEJBhkSDMEJSgAAAB1CEiBxNgAAADD6Hm4//8=", 
        "flow_hash": "010000000000000020000000fd6d4a6ad798f5483a60331aeab5d96f2dd63541134b9718e3dcc72dc43ab13a68061712a5efba12ee35813de6edb60d681eaf24d2bb496c06ab36259b67713c226c6e19cc7da70f007b4911db01a1138a82264a12c6c951aeb77397934ab64034640a976c06db14c3926a1cfa0ba247c59028616fe72c6b3760d48bc49e8610", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x405d80   sub rsp, 0xd8\n0x405d87   test al, al\n0x405d89   mov qword [rsp + 0x40], r8\n0x405d8e   mov qword [rsp + 0x48], r9\n0x405d93   je 0x405dcc\n0x405d95   movaps xmmword [rsp + 0x50], xmm0\n0x405d9a   movaps xmmword [rsp + 0x60], xmm1\n0x405d9f   movaps xmmword [rsp + 0x70], xmm2\n0x405da4   movaps xmmword [rsp + 0x80], xmm3\n0x405dac   movaps xmmword [rsp + 0x90], xmm4\n0x405db4   movaps xmmword [rsp + 0xa0], xmm5\n0x405dbc   movaps xmmword [rsp + 0xb0], xmm6\n0x405dc4   movaps xmmword [rsp + 0xc0], xmm7\n0x405dcc   mov rax, qword fs:[0x28]\n0x405dd5   mov qword [rsp + 0x18], rax\n0x405dda   xor eax, eax\n0x405ddc   lea rax, [rsp + 0xe0]\n0x405de4   mov r8, rsp\n0x405de7   mov qword [rsp + 8], rax\n0x405dec   lea rax, [rsp + 0x20]\n0x405df1   mov dword [rsp], 0x20\n0x405df8   mov dword [rsp + 4], 0x30\n0x405e00   mov qword [rsp + 0x10], rax\n0x405e05   call 0x405cf0\n0x405e0a   mov rax, qword [rsp + 0x18]\n0x405e0f   xor rax, qword fs:[0x28]\n0x405e18   jne 0x405e22\n0x405e1a   add rsp, 0xd8\n0x405e21   ret\n0x405e22   call 0x4016a0\n"
      }, 
      "offset": 4218240
    }, 
    {
      "proc_desc": {
        "name": "sub.malloc_eb0", 
        "raw_len": 66, 
        "vex_hash": "010000000000000040000000dc0b3c01a9eb6e01eee52e006133da009bdcc000f6fdd901dc267c0200f9f1009ff8c200b9555201f68bd800399a4b00427a1d0231d6fe000c001f018e66b6005a416602684df3001b804d01bea5a301374c4c05e48a2300b655640447883d028ae538004f17f601d3dbed01bd2f8901a3a62c02bbf3e6004f541f004b112602c31b9d05c427db03bb6c51012b7bc70098e0a6015382d001a92e4a0249b214011f9d5200793568018314700432bb1d06b9fab700a7aae40015746b01ef39ba00bd773c000a5399029e8f6803374d0201449e1d0212499201d95e06009d15e905bcd393002b5557026c5b5e0268603100ff05c105df39f0007e261e02b9d10705", 
        "raw": "U0iJ++h3uf//SIXAdQVIhdt1AlvD6OYBAABmDx9EAABIifhI9+ZwBUiJx+vTUOjNAQAADx8AZi4PH4QAAAAAAOu+", 
        "flow_hash": "010000000000000020000000d9bff4033ec898413a60331a932333305ee8441363ac650e31536710dc7162270c08221502d642261f86e60be29ddf1ecc11c0141c58ed3833ff6e205bfb7d4ba8f1cb46cc7da70ff8d2182d3c3d123f41211b2309f4a346573bd90c89bc753434640a97a000893db7cbad0cba1c1a25f201170c8364170d1919627ac49e8610", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x405eb0   push rbx\n0x405eb1   mov rbx, rdi\n0x405eb4   call 0x401830\n0x405eb9   test rax, rax\n0x405ebc   jne 0x405ec3\n0x405ebe   test rbx, rbx\n0x405ec1   jne 0x405ec5\n0x405ec3   pop rbx\n0x405ec4   ret\n0x405ec5   call 0x4060b0\n0x405eca   nop word [rax + rax]\n0x405ed0   mov rax, rdi\n0x405ed3   mul rsi\n0x405ed6   jo 0x405edd\n0x405ed8   mov rdi, rax\n0x405edb   jmp 0x405eb0\n0x405edd   push rax\n0x405ede   call 0x4060b0\n0x405ee3   nop dword [rax]\n0x405ee6   nop word cs:[rax + rax]\n0x405ef0   jmp 0x405eb0\n"
      }, 
      "offset": 4218544
    }, 
    {
      "proc_desc": {
        "name": "sub.memory_exhausted_b0", 
        "raw_len": 49, 
        "vex_hash": "010000000000000040000000ef0941027e7c9601b69a9a03b1a400022ca201007de40600f8145701654fb0073469ff018ef314013c9a7b005cdbe102e3f31d01b144410047b3250081dabc04c68a3002b9ba3a00d9b6be05cd073900647cb0013a375007a7bbb00474d293047a23b303646e0a00ae884800e71c1c066e8f2e007e44a300f284d3024f0c71015e81430312163b00617c4f06542f1901be94d5009d0cd503a2755b02ff6ab90172610700df93cb01628ce4007eebbf0010c406007e727701654413002ce86d008ddaaf02f7364a041a63f400a9cb5d03392dd6018467d60057bb6c00dd4da800bcd393005ca7af003c367c0239a30e02f61380006e987800d86f56019c875f02", 
        "raw": "SIPsCLoFAAAAvu+eQAAx/+irtf//iz21YSAASInBugmVQAAx9jHA6CS4///oz7T//w==", 
        "flow_hash": "010000000000000020000000fd6d4a6adf3b55873a60331a932333302dd6354163ac650ee3dcc72dc43ab13a6806171202d642261f86e60be6edb60dcbe63e59d2bb496c06ab36259b67713cb7799f45cc7da70f007b4911db01a11341211b2312c6c951aeb7739789bc753434640a975a33187bee9d1480fa0ba247f201170c8364170d73ad0e7fc49e8610", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x4060b0   sub rsp, 8\n0x4060b4   mov edx, 5\n0x4060b9   mov esi, 0x409eef\n0x4060be   xor edi, edi\n0x4060c0   call 0x401670\n0x4060c5   mov edi, dword [rip + 0x2061b5]\n0x4060cb   mov rcx, rax\n0x4060ce   mov edx, 0x409509\n0x4060d3   xor esi, esi\n0x4060d5   xor eax, eax\n0x4060d7   call 0x401900\n0x4060dc   call 0x4015b0\n"
      }, 
      "offset": 4219056
    }, 
    {
      "proc_desc": {
        "name": "sub.__errno_location_140", 
        "raw_len": 48, 
        "vex_hash": "0100000000000000400000003c31af02845682009f36ef019d7b59015b000003dd126d00bc3c57038acf420433178b00db625f02c4bbc5025cdbe102427a1d02a029f8086f87b001bc9b9007d3b46e03bddc13050424b2034d02a80124ffeb027f115701182dd90047883d021d01170648580e0534cfbd0078c68a01c21beb07843858037de25303e6550c03fc27ab00b75fac06861f89072b7bc700d7b9cd017acb94049eeeef01655e100077eccc0179356801831470046f2c4a07b9fab7007e45e90174456a0330fc78060e835e00f7364a04111215048b877001449e1d0208dd980178d10701fa1c6e09bcd393002b55570291b15a0068603100cc5ab50692145800e31ee802381b9e06", 
        "raw": "U+hKJgAASIXASInDdApIidhbww8fRAAA6GO0//+DOAx17OhJ////Zg8fhAAAAAAA", 
        "flow_hash": "010000000000000020000000fd6d4a6a3ec898413a60331a932333302dd6354163ac650ee3dcc72da1308117680617129234bd231f86e60be6edb60dcbe63e598a761d3e33ff6e209b67713c2fddf042cc7da70ff83e170fdb01a11341211b2312c6c9518e84c4431b09bc0134640a97a000893db7cbad0cfa0ba247f201170c8364170d73ad0e7fc49e8610", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x406140   push rbx\n0x406141   call 0x408790\n0x406146   test rax, rax\n0x406149   mov rbx, rax\n0x40614c   je 0x406158\n0x40614e   mov rax, rbx\n0x406151   pop rbx\n0x406152   ret\n0x406158   call 0x4015c0\n0x40615d   cmp dword [rax], 0xc\n0x406160   jne 0x40614e\n0x406162   call 0x4060b0\n0x406167   nop word [rax + rax]\n"
      }, 
      "offset": 4219200
    }, 
    {
      "proc_desc": {
        "name": "sub.s__s_8e0", 
        "raw_len": 1005, 
        "vex_hash": "010000000000000040000000a835a300d9024200694d2c00bded1800f6061f007de40600719332009d64070075cf680053a0df00d437b9001a35c400cb6b6f00fee6d000d51b8700513c79006da82000b9ba3a00af598500cd073900a23e8000d1407700b617350033562e005b227f00664f7500168348005cd1ee016042e00081f01200e91f0b001855530003d82a000bf9bf01be4c0b00a1b45a0097e04c00eca34d0081497a0085671b00c88c9f00e33ec900f18ab50020e2150085dd0700ddf642006f3f5c00af472f0060602000fb6f710074053200e58756004d6753008c9a6a0058ac3f0076074700a5635f00dfc93e01fddf530068603100f613800047212a004c6d2e00640b0000", 
        "raw": "QVdBVkFVQVRNicxVU0iJ/UyJw0iD7ChIhfYPhGgDAABJiclJidBIifG6YptAAL4BAAAAMcDoVsD//zH/ugUAAAC+dZtAAOhFvf//QbjgBwAASInBusCeQAC+AQAAAEiJ7zHA6CjA//8x/7oFAAAAvgCcQADoF73//0iJ7kiJx+hcvv//SYP8CQ+HGgMAAEL/JOVYnkAAZi4PH4QAAAAAAEyLSzhIi0MQugUAAABMi0MIvnCdQAAx/0yLazBMi2MoTIlMJBBMi3sgTItzGEiJBCRMiUQkCEiLG+iyvP//SIPsCEyLTCQYSInZSInCSInvvgEAAAAxwEFRQVVBVEFXQVZMi0wkMEyLRCQ46IC///9Ig8QwSIPEKFtdQVxBXUFeQV/DDx9EAABMi1NATItLOLoFAAAASItDEEyLQwi+oJ1AAEyLazBMi2MoTIt7IEyLcxhIixtMiVQkGEyJTCQQSIkEJEyJRCQIMf/oIbz//0yLVCQYQVLpZ////w8fRAAA6Eu7//8PHwBIixu6BQAAAL55m0AAMf/o9Lv//0iDxChIidlIie9bXUFcQV1BXkFfSInCvgEAAAAxwOnRvv//kEyLYwhIixu6BQAAAL6Jm0AAMf/ouLv//0iDxChNieBIidlIie9IicK+AQAAAFtdQVxBXUFeQV8xwOmSvv//ZpBMi2sQTItjCLoFAAAASIsbvqCbQAAx/+h0u///SIPEKE2J6U2J4EiJ2UiJ70iJwltdQVxBXUFeQV++AQAAADHA6Uu+//8PHwC6BQAAAL7QnEAAMf9Mi3MYTItrEEyLYwhIixvoKLv//0iD7AhBVkiJwk2J6U2J4EiJ2UiJ774BAAAAMcDoB77//1haSIPEKFtdQVxBXUFeQV/DZg8fRAAATIt7ILoFAAAAvvCcQAAx/0yLcxhMi2sQTItjCEiLG+jMuv//QVfrpA8fhAAAAAAATItDCEyLYyi6BQAAAEyLeyBMi3MYvhidQABMi2sQMf9IixtMiQQk6JS6//9Ig+wITYnpQVRBV0FWTItEJCBIidlIicJIie++AQAAADHA6G29//9Ig8QgSIPEKFtdQVxBXUFeQV/DZi4PH4QAAAAAAEyLSxBMi2swugUAAABMi2MoTIt7IL5AnUAATItzGEyLQwgx/0yJTCQISIsbTIkEJOgbuv//QVVBVEFXQVZMi0wkKOuFDx9AAEmJyL4BAAAASInRMcC6bptAAOjxvP//6Zb8//8PH0AATItTQEyLSzi6BQAAAEiLQxBMi0MIvtidQABMi2swTItjKEyLeyBMi3MYTIlUJBhMiUwkEEiJBCRMiUQkCEiLG+l7/f//", 
        "flow_hash": "010000000000000020000000d9bff40318cfec1264dda2008f39af2f84836305e400730031536710a13081170c082215bab691131f86e60b80c04002cc11c014d27fc8108afa0d1df4042c0b7292ec1cc0f01c65f83e170f3c3d123fdd7cb0137594ee03e3cced561b09bc01828a6233fea81129d3f079257afc9a17f201170c8364170d763fb32964356937", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x4058e0   push r15\n0x4058e2   push r14\n0x4058e4   push r13\n0x4058e6   push r12\n0x4058e8   mov r12, r9\n0x4058eb   push rbp\n0x4058ec   push rbx\n0x4058ed   mov rbp, rdi\n0x4058f0   mov rbx, r8\n0x4058f3   sub rsp, 0x28\n0x4058f7   test rsi, rsi\n0x4058fa   je 0x405c68\n0x405900   mov r9, rcx\n0x405903   mov r8, rdx\n0x405906   mov rcx, rsi\n0x405909   mov edx, 0x409b62\n0x40590e   mov esi, 1\n0x405913   xor eax, eax\n0x405915   call 0x401970\n0x40591a   xor edi, edi\n0x40591c   mov edx, 5\n0x405921   mov esi, 0x409b75\n0x405926   call 0x401670\n0x40592b   mov r8d, 0x7e0\n0x405931   mov rcx, rax\n0x405934   mov edx, 0x409ec0\n0x405939   mov esi, 1\n0x40593e   mov rdi, rbp\n0x405941   xor eax, eax\n0x405943   call 0x401970\n0x405948   xor edi, edi\n0x40594a   mov edx, 5\n0x40594f   mov esi, 0x409c00\n0x405954   call 0x401670\n0x405959   mov rsi, rbp\n0x40595c   mov rdi, rax\n0x40595f   call 0x4017c0\n0x405964   cmp r12, 9\n0x405968   ja 0x405c88\n0x40596e   jmp qword [r12*8 + 0x409e58]\n0x4059c2   mov r9, qword [rsp + 0x18]\n0x4059c7   mov rcx, rbx\n0x4059ca   mov rdx, rax\n0x4059cd   mov rdi, rbp\n0x4059d0   mov esi, 1\n0x4059d5   xor eax, eax\n0x4059d7   push r9\n0x4059d9   push r13\n0x4059db   push r12\n0x4059dd   push r15\n0x4059df   push r14\n0x4059e1   mov r9, qword [rsp + 0x30]\n0x4059e6   mov r8, qword [rsp + 0x38]\n0x4059eb   call 0x401970\n0x4059f0   add rsp, 0x30\n0x4059f4   add rsp, 0x28\n0x4059f8   pop rbx\n0x4059f9   pop rbp\n0x4059fa   pop r12\n0x4059fc   pop r13\n0x4059fe   pop r14\n0x405a00   pop r15\n0x405a02   ret\n0x405a48   xor edi, edi\n0x405a4a   call 0x401670\n0x405a4f   mov r10, qword [rsp + 0x18]\n0x405a54   push r10\n0x405a56   jmp 0x4059c2\n0x405c68   mov r8, rcx\n0x405c6b   mov esi, 1\n0x405c70   mov rcx, rdx\n0x405c73   xor eax, eax\n0x405c75   mov edx, 0x409b6e\n0x405c7a   call 0x401970\n0x405c7f   jmp 0x40591a\n0x405c88   mov r10, qword [rbx + 0x40]\n0x405c8c   mov r9, qword [rbx + 0x38]\n0x405c90   mov edx, 5\n0x405c95   mov rax, qword [rbx + 0x10]\n0x405c99   mov r8, qword [rbx + 8]\n0x405c9d   mov esi, 0x409dd8\n0x405ca2   mov r13, qword [rbx + 0x30]\n0x405ca6   mov r12, qword [rbx + 0x28]\n0x405caa   mov r15, qword [rbx + 0x20]\n0x405cae   mov r14, qword [rbx + 0x18]\n0x405cb2   mov qword [rsp + 0x18], r10\n0x405cb7   mov qword [rsp + 0x10], r9\n0x405cbc   mov qword [rsp], rax\n0x405cc0   mov qword [rsp + 8], r8\n0x405cc5   mov rbx, qword [rbx]\n0x405cc8   jmp 0x405a48\n"
      }, 
      "offset": 4217056
    }, 
    {
      "proc_desc": {
        "name": "fcn.00406170", 
        "raw_len": 80, 
        "vex_hash": "010000000000000040000000f7425f022f2d1201eee52e00f2975d00767509009bb65102f8145701340bed02a7174e009e43480043350a00afdf58000f26a2001a70ba01fbefb70158411d03b862d800b9ba3a0077aa19012dab1a0062fc8900364f4e07e83f6f00577abe0227df0401664f75008773ac027d375700a3507600ad5901012aaea600324bce005fc42e0003764c024cd33f00e6ab5300c8b452006003740022ff050053a1b10008f6ac016f520f00c4102200dbc31c0083db6e01829940011b989b00bf3a1c0153e8fc000a43c50034699e008b877001b08c4c0168c99500b62c6100fdafb8005d36ca01abe65a00ae225701594adc00c5ab2f00f18837018e990801f4392101", 
        "raw": "SDn3dRfrRmYPH4QAAAAAAEiDxwFIg8YBONB1KA+2B4nCjUggg+pBgPoZD7YWD0bBidFEjUogg+lBgPkZQQ9G0YTAdcwPttIPtsAp0MMxwMM=", 
        "flow_hash": "0100000000000000200000008ce14137e8f7c91664dda200463413233075b617e4007300198dea34a27b7b49cef6d400bab691136df71867549ab908d767b586e719af0aff8acb210f46e23ee6a8d31fc612772d177a9737983a8b14fd9d247327d39722797c4b7e0afef251bcfea9527af20a4bc030e6025e03cf72e0f03043b5527110763fb329d15b7370", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x406170   cmp rdi, rsi\n0x406173   jne 0x40618c\n0x406175   jmp 0x4061bd\n0x406180   add rdi, 1\n0x406184   add rsi, 1\n0x406188   cmp al, dl\n0x40618a   jne 0x4061b4\n0x40618c   movzx eax, byte [rdi]\n0x40618f   mov edx, eax\n0x406191   lea ecx, [rax + 0x20]\n0x406194   sub edx, 0x41\n0x406197   cmp dl, 0x19\n0x40619a   movzx edx, byte [rsi]\n0x40619d   cmovbe eax, ecx\n0x4061a0   mov ecx, edx\n0x4061a2   lea r9d, [rdx + 0x20]\n0x4061a6   sub ecx, 0x41\n0x4061a9   cmp cl, 0x19\n0x4061ac   cmovbe edx, r9d\n0x4061b0   test al, al\n0x4061b2   jne 0x406180\n0x4061b4   movzx edx, dl\n0x4061b7   movzx eax, al\n0x4061ba   sub eax, edx\n0x4061bc   ret\n0x4061bd   xor eax, eax\n0x4061bf   ret\n"
      }, 
      "offset": 4219248
    }, 
    {
      "proc_desc": {
        "name": "sub.realloc_f00", 
        "raw_len": 311, 
        "vex_hash": "010000000000000040000000265f150044229000a0280d00e0fa1900f16606007de406003f0c3c007cb14d0000db36009ea64800587f0c0038d79f00496ccf00c88e77001063cd00504a5201962b2600aee6080179e55b0095c354007b922000d1257d00b617350088e24e00d72e7300664f7500781a020049b300000db51e00a9589f004a613a00e20c5400d9d91f0074bff300ab4c550038ea3300efc43100812008008fd22400e0a9c4000fe72c006f520f00c410220078ea610185dd07005e1de0008506190051ab5100bd773c000f28c10088305a00c8a60b00d4161001226a3e00d95e060062f51800b83f14009fd51b00fddf530068603100784b0900e9435f00279210006ccf0900", 
        "raw": "SIX2U0iJ83UFSIX/dRpIid7oern//0iFwHUFSIXbdRFbw2YPH0QAAOhztv//McBbw+h6AQAAZi4PH4QAAAAAAEiJ8Ej34nAFSInG67NQ6F0BAAAPHwBmLg8fhAAAAAAASIX/SYnRSIsOdDUx0ki4qqqqqqqqqqpJ9/FIOcFzQEiJyEjR6EiNTAEBSIkOSQ+vyUiJzuln////Dx+AAAAAAEiFyXXlMdK4gAAAAEUxwEn38UiFwEEPlMBKjQwA68tQ6OsAAACQZi4PH4QAAAAAAEiF/0iLBnQoSLqpqqqqqqqqqkg50HcwSInCSNHqSI1EAgFIiQZIicbpA////w8fAEiFwLqAAAAASA9EwkiJBkiJxunp/v//UOiTAAAADx8AU0iJ++iH/v//SInaMfZIicdb6dm2//8=", 
        "flow_hash": "010000000000000020000000dd6b4d0ce8f7c916b3612314f72eca0054bea100e544a10bea621914939ccc00cef6d4004a7c2b001f86e60b80c04002fac1cb0be719af0a8afa0d1df4042c0b98d65b00cc7da70f007b4911db01a113dd7cb013c6fd7b11a80bff3c60c05d15cabea12b626a5510c030e6027afc9a17f201170c8364170d9eb5482503845c10", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x405f00   test rsi, rsi\n0x405f03   push rbx\n0x405f04   mov rbx, rsi\n0x405f07   jne 0x405f0e\n0x405f09   test rdi, rdi\n0x405f0c   jne 0x405f28\n0x405f0e   mov rsi, rbx\n0x405f11   call 0x401890\n0x405f16   test rax, rax\n0x405f19   jne 0x405f20\n0x405f1b   test rbx, rbx\n0x405f1e   jne 0x405f31\n0x405f20   pop rbx\n0x405f21   ret\n0x405f28   call 0x4015a0\n0x405f2d   xor eax, eax\n0x405f2f   pop rbx\n0x405f30   ret\n0x405f31   call 0x4060b0\n0x405f36   nop word cs:[rax + rax]\n0x405f40   mov rax, rsi\n0x405f43   mul rdx\n0x405f46   jo 0x405f4d\n0x405f48   mov rsi, rax\n0x405f4b   jmp 0x405f00\n0x405f4d   push rax\n0x405f4e   call 0x4060b0\n0x405f53   nop dword [rax]\n0x405f56   nop word cs:[rax + rax]\n0x405f60   test rdi, rdi\n0x405f63   mov r9, rdx\n0x405f66   mov rcx, qword [rsi]\n0x405f69   je 0x405fa0\n0x405f6b   xor edx, edx\n0x405f6d   movabs rax, 0xaaaaaaaaaaaaaaaa\n0x405f77   div r9\n0x405f7a   cmp rcx, rax\n0x405f7d   jae 0x405fbf\n0x405f7f   mov rax, rcx\n0x405f82   shr rax, 1\n0x405f85   lea rcx, [rcx + rax + 1]\n0x405f8a   mov qword [rsi], rcx\n0x405f8d   imul rcx, r9\n0x405f91   mov rsi, rcx\n0x405f94   jmp 0x405f00\n0x405fa0   test rcx, rcx\n0x405fa3   jne 0x405f8a\n0x405fa5   xor edx, edx\n0x405fa7   mov eax, 0x80\n0x405fac   xor r8d, r8d\n0x405faf   div r9\n0x405fb2   test rax, rax\n0x405fb5   sete r8b\n0x405fb9   lea rcx, [rax + r8]\n0x405fbd   jmp 0x405f8a\n0x405fbf   push rax\n0x405fc0   call 0x4060b0\n0x405fc5   nop\n0x405fc6   nop word cs:[rax + rax]\n0x405fd0   test rdi, rdi\n0x405fd3   mov rax, qword [rsi]\n0x405fd6   je 0x406000\n0x405fd8   movabs rdx, 0xaaaaaaaaaaaaaaa9\n0x405fe2   cmp rax, rdx\n0x405fe5   ja 0x406017\n0x405fe7   mov rdx, rax\n0x405fea   shr rdx, 1\n0x405fed   lea rax, [rdx + rax + 1]\n0x405ff2   mov qword [rsi], rax\n0x405ff5   mov rsi, rax\n0x405ff8   jmp 0x405f00\n0x406000   test rax, rax\n0x406003   mov edx, 0x80\n0x406008   cmove rax, rdx\n0x40600c   mov qword [rsi], rax\n0x40600f   mov rsi, rax\n0x406012   jmp 0x405f00\n0x406017   push rax\n0x406018   call 0x4060b0\n0x40601d   nop dword [rax]\n0x406020   push rbx\n0x406021   mov rbx, rdi\n0x406024   call 0x405eb0\n0x406029   mov rdx, rbx\n0x40602c   xor esi, esi\n0x40602e   mov rdi, rax\n0x406031   pop rbx\n0x406032   jmp 0x401710\n"
      }, 
      "offset": 4218624
    }, 
    {
      "proc_desc": {
        "name": "sub.__fpending_1c0", 
        "raw_len": 122, 
        "vex_hash": "010000000000000040000000d94de2016d4ee50012c02100f2975d00fc25b400f92441005489d800f52dc9009ff8c2004e54b700f68bd8008f8433002cde0801825cd700d51b87006fa6a101c2341e00b4df7500a483710118e95901a23e80006c202101b617350088e24e009f2f84004ffa4700a3095e009ede160161f3f201bbf3e600d14b150080fb26022d832702c891440132dc8e0053e70400a3a74b000c725e006b3982004140710088021c01c470ff00c4102200daa7350027ee0b008f8d4900e3809700f2443a00bd773c0074df870098dd100066062a00add48b0168c99500d95e060087fbe6002d667f0098615a01ad0f410168603100073a0500df39f0004ce31c0298455c00", 
        "raw": "QVRVSIn9U+gktP//i10ASInvSYnE6IYmAACD4yCF23UXhcB0Ck2F5Lj/////dClbXUFcww8fQACFwHU06L+z///HAAAAAAC4/////1tdQVzDDx+AAAAAAOijs///gzgJW11BXA+VwA+2wPfYww8fAFu4/////11BXMM=", 
        "flow_hash": "01000000000000002000000084331b783ec89841f1bd7e1f463413233075b61763ac650ee3dcc72d1884062acef6d4003e192d1a1f86e60b80c04002d283fe33d2888d158afa0d1df4042c0b7292ec1c09e8ce12007b4911db01a113dd7cb013902758538e84c44389bc75341fffbca9a000893db7cbad0cfa0ba247f201170c8364170d73ad0e7fce2a2e33", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x4061c0   push r12\n0x4061c2   push rbp\n0x4061c3   mov rbp, rdi\n0x4061c6   push rbx\n0x4061c7   call 0x4015f0\n0x4061cc   mov ebx, dword [rbp]\n0x4061cf   mov rdi, rbp\n0x4061d2   mov r12, rax\n0x4061d5   call 0x408860\n0x4061da   and ebx, 0x20\n0x4061dd   test ebx, ebx\n0x4061df   jne 0x4061f8\n0x4061e1   test eax, eax\n0x4061e3   je 0x4061ef\n0x4061e5   test r12, r12\n0x4061e8   mov eax, 0xffffffff\n0x4061ed   je 0x406218\n0x4061ef   pop rbx\n0x4061f0   pop rbp\n0x4061f1   pop r12\n0x4061f3   ret\n0x4061f8   test eax, eax\n0x4061fa   jne 0x406230\n0x4061fc   call 0x4015c0\n0x406201   mov dword [rax], 0\n0x406207   mov eax, 0xffffffff\n0x40620c   pop rbx\n0x40620d   pop rbp\n0x40620e   pop r12\n0x406210   ret\n0x406218   call 0x4015c0\n0x40621d   cmp dword [rax], 9\n0x406220   pop rbx\n0x406221   pop rbp\n0x406222   pop r12\n0x406224   setne al\n0x406227   movzx eax, al\n0x40622a   neg eax\n0x40622c   ret\n0x406230   pop rbx\n0x406231   mov eax, 0xffffffff\n0x406236   pop rbp\n0x406237   pop r12\n0x406239   ret\n"
      }, 
      "offset": 4219328
    }, 
    {
      "proc_desc": {
        "name": "fcn.00406700", 
        "raw_len": 409, 
        "vex_hash": "010000000000000040000000c4723c01cbf36200a0280d00733c2b00a9d301007de40600cfe43f00c1a43100f877fb000b0e0600e304060098bb1b00e3cb7400993f8f0031eb0f0069423c0014d72d00fae43b005ce1e5002b7b0400fe860c00031c3500b617350076dd05000a172100350134003dfcae00c71f0d0025922300cb223d00cc3b290070653d0071979d009dcd53016f26080027502e00dbaa23009d43270081497a00a7a11a00fc490700ab512b0098f92100cd7c7b0085dd0700895953001efd7100c48b14000d065d00099403005a692700c8a60b0079a98700226a3e00d95e060058240b0025a206009fd51b00fc060800f5021500f6138000eaae3f004c6d2e00971d3900", 
        "raw": "VUiJ5VNIg+w4ZEiLBCUoAAAASIlF6DHASLj/////////H0g5wnYbMcBIi03oZEgzDCUoAAAAD4VYAQAASItd+MnDSIn7SI081QAAAABIgf+vDwAAD4a8AAAASIlNyEiJVdBIiXXY6BUiAABIi03ISItV0EiJx0iLddhIhf90qEUxwEiD+gJIx0cIAQAAALgCAAAAdj4PHwBED7ZMBv9GOgwGdRrppwAAAA8fgAAAAABOKwTHRjoMBg+EkgAAAE2FwHXtSIkEx0UxwEiDwAFIOcJ1xUjHAQAAAABED7YDSYnZMcAPH0QAAEWEwHQaRDgEBnR1SIXAdEBMixTHTAHTTCnQRYTAdebo9CEAALgBAAAA6RP///9Ig8cuSIPn8Egp/EiNfCQPSIPn8EiDxxDpR////w8fRAAARQ+2QQFIg8MBSYPBAeuhZg8fhAAAAAAASYPAAUmJwU0pwUyJDMfpZ////w8fRAAASIPAAU2NUQFIOcJ0DUUPtkEBTYnR6Wb///9IiRnodiEAALgBAAAA6ZX+///oB67//w==", 
        "flow_hash": "0100000000000000200000006a68390603e8f51916ef3300f72eca0054bea100e40073007fb05e1442d4f310cef6d4009453cf08499e7e0880c0400225d66a15d2888d15577f9a09cfa4350798d65b00cc7da70f007b4911362f0e0a61513a075120c504573bd90cff742f13c34871213251cb30c030e602cd2a840ae7c9b1100cdf60022d6c9f139a8b190c", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x406700   push rbp\n0x406701   mov rbp, rsp\n0x406704   push rbx\n0x406705   sub rsp, 0x38\n0x406709   mov rax, qword fs:[0x28]\n0x406712   mov qword [rbp - 0x18], rax\n0x406716   xor eax, eax\n0x406718   movabs rax, 0x1fffffffffffffff\n0x406722   cmp rdx, rax\n0x406725   jbe 0x406742\n0x406727   xor eax, eax\n0x406729   mov rcx, qword [rbp - 0x18]\n0x40672d   xor rcx, qword fs:[0x28]\n0x406736   jne 0x406894\n0x40673c   mov rbx, qword [rbp - 8]\n0x406740   leave\n0x406741   ret\n0x406742   mov rbx, rdi\n0x406745   lea rdi, [rdx*8]\n0x40674d   cmp rdi, 0xfaf\n0x406754   jbe 0x406816\n0x40675a   mov qword [rbp - 0x38], rcx\n0x40675e   mov qword [rbp - 0x30], rdx\n0x406762   mov qword [rbp - 0x28], rsi\n0x406766   call 0x408980\n0x40676b   mov rcx, qword [rbp - 0x38]\n0x40676f   mov rdx, qword [rbp - 0x30]\n0x406773   mov rdi, rax\n0x406776   mov rsi, qword [rbp - 0x28]\n0x40677a   test rdi, rdi\n0x40677d   je 0x406727\n0x40677f   xor r8d, r8d\n0x406782   cmp rdx, 2\n0x406786   mov qword [rdi + 8], 1\n0x40678e   mov eax, 2\n0x406793   jbe 0x4067d3\n0x406795   nop dword [rax]\n0x406798   movzx r9d, byte [rsi + rax - 1]\n0x40679e   cmp r9b, byte [rsi + r8]\n0x4067a2   jne 0x4067be\n0x4067a4   jmp 0x406850\n0x4067b0   sub r8, qword [rdi + r8*8]\n0x4067b4   cmp r9b, byte [rsi + r8]\n0x4067b8   je 0x406850\n0x4067be   test r8, r8\n0x4067c1   jne 0x4067b0\n0x4067c3   mov qword [rdi + rax*8], rax\n0x4067c7   xor r8d, r8d\n0x4067ca   add rax, 1\n0x4067ce   cmp rdx, rax\n0x4067d1   jne 0x406798\n0x4067d3   mov qword [rcx], 0\n0x4067da   movzx r8d, byte [rbx]\n0x4067de   mov r9, rbx\n0x4067e1   xor eax, eax\n0x4067e3   nop dword [rax + rax]\n0x4067e8   test r8b, r8b\n0x4067eb   je 0x406807\n0x4067ed   cmp byte [rsi + rax], r8b\n0x4067f1   je 0x406868\n0x4067f3   test rax, rax\n0x4067f6   je 0x406838\n0x4067f8   mov r10, qword [rdi + rax*8]\n0x4067fc   add rbx, r10\n0x4067ff   sub rax, r10\n0x406802   test r8b, r8b\n0x406805   jne 0x4067ed\n0x406807   call 0x408a00\n0x40680c   mov eax, 1\n0x406811   jmp 0x406729\n0x406816   add rdi, 0x2e\n0x40681a   and rdi, 0xfffffffffffffff0\n0x40681e   sub rsp, rdi\n0x406821   lea rdi, [rsp + 0xf]\n0x406826   and rdi, 0xfffffffffffffff0\n0x40682a   add rdi, 0x10\n0x40682e   jmp 0x40677a\n0x406838   movzx r8d, byte [r9 + 1]\n0x40683d   add rbx, 1\n0x406841   add r9, 1\n0x406845   jmp 0x4067e8\n0x406850   add r8, 1\n0x406854   mov r9, rax\n0x406857   sub r9, r8\n0x40685a   mov qword [rdi + rax*8], r9\n0x40685e   jmp 0x4067ca\n0x406868   add rax, 1\n0x40686c   lea r10, [r9 + 1]\n0x406870   cmp rdx, rax\n0x406873   je 0x406882\n0x406875   movzx r8d, byte [r9 + 1]\n0x40687a   mov r9, r10\n0x40687d   jmp 0x4067e8\n0x406882   mov qword [rcx], rbx\n0x406885   call 0x408a00\n0x40688a   mov eax, 1\n0x40688f   jmp 0x406729\n0x406894   call 0x4016a0\n"
      }, 
      "offset": 4220672
    }, 
    {
      "proc_desc": {
        "name": "sub.iconv_320", 
        "raw_len": 615, 
        "vex_hash": "010000000000000040000000ff7840007c424100a0280d0052fb2100ed5107007de40600746067009d6407009ff8c200261a1000221f4a0038d79f000333340065460e00f9992800a6391a00a73a2c00b1f8060046732b00cd0739007ff8510070b324009be70800cd035400e5495600646e0a00168348004ba1700077b40f0017267a009f292d0051b12700a750040079390600be4c0b0053e70400483f9a004c08030089625700aeab3d007261070021f90100d81b780048a51b0085dd070089595300e1e961008c160300606020002d4c0c007a2c100097273d009ada5600b32e0600195a2a008b240e008c4d15009fd51b00e1d9030070060300655d1600eb3b24004c6d2e00971d3900", 
        "raw": "QVdBVkmJ90FVQVRJidRVUzHSSIn7MfYx7UiB7FgQAABIiXwkGEiJTCQQTInnTIlEJAgxyUUxwGRIiwQlKAAAAEiJhCRIEAAAMcDokZL//02F/0iJXCQgTIl8JChIjVwkQEyNdCQ4TI1sJDB1FutZkEiLRCQwSCnYSAHFSIN8JCgAdEVIjVQkKEiNdCQgTYnwTInpTInnSIlcJDBIx0QkOAAQAADoN5L//0iD+P91wejskf//iwCD+Ad0tYP4Fg+FQwEAAA8fQAAx0jH2TYnwTInpTInnSIlcJDBIx0QkOAAQAADo+JH//0iD+P8PhBUBAABIi0QkMEgp2EgBxQ+EDQEAAEiLRCQQSIsYSIXbD4TUAAAASItEJAhIOygPh8YAAABFMcAxyTHSMfZMieforZH//0iLRCQYTIl8JChIiVwkMEiJbCQ4SIlEJCDrKWaQSI1UJChIjXQkIE2J8EyJ6UyJ5+h4kf//SIP4/w+ErgAAAEyLfCQoTYX/ddQx0jH2TYnwTInpTInn6FKR//9Ig/j/D4SWAAAASIN8JDgAD4W5AAAASItEJBBIiRhIi0QkCEiJKDHtSIuMJEgQAABkSDMMJSgAAACJ6A+FkwAAAEiBxFgQAABbXUFcQV1BXkFfww8fgAAAAABIie/oIJP//0iFwEiJww+FJv///+ifkP//xwAMAAAAvf/////rqGaQSItEJAgx7UjHAAAAAADrluh7kP//gzgWD4RO////SItEJBC9/////0g7GA+Edf///+hakP//RIsoSYnESInf6CyQ//9FiSwk6Vn////oLpD//+gZkf//", 
        "flow_hash": "0100000000000000200000006a68390643049f0264dda200f72eca00ae96740fe4007300cc361c09939ccc0068061712ec228a070ff5111810e61a03fe7bef010d7a85020b6df1029b67713cd8164509cc7da70f4dd86710db01a11361513a075120c5048e6060023fa2220319785b0dd0e33202c030e602bd97a407e7c9b110b387b50d9eb5482503845c10", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x408320   push r15\n0x408322   push r14\n0x408324   mov r15, rsi\n0x408327   push r13\n0x408329   push r12\n0x40832b   mov r12, rdx\n0x40832e   push rbp\n0x40832f   push rbx\n0x408330   xor edx, edx\n0x408332   mov rbx, rdi\n0x408335   xor esi, esi\n0x408337   xor ebp, ebp\n0x408339   sub rsp, 0x1058\n0x408340   mov qword [rsp + 0x18], rdi\n0x408345   mov qword [rsp + 0x10], rcx\n0x40834a   mov rdi, r12\n0x40834d   mov qword [rsp + 8], r8\n0x408352   xor ecx, ecx\n0x408354   xor r8d, r8d\n0x408357   mov rax, qword fs:[0x28]\n0x408360   mov qword [rsp + 0x1048], rax\n0x408368   xor eax, eax\n0x40836a   call 0x401600\n0x40836f   test r15, r15\n0x408372   mov qword [rsp + 0x20], rbx\n0x408377   mov qword [rsp + 0x28], r15\n0x40837c   lea rbx, [rsp + 0x40]\n0x408381   lea r14, [rsp + 0x38]\n0x408386   lea r13, [rsp + 0x30]\n0x40838b   jne 0x4083a3\n0x40838d   jmp 0x4083e8\n0x408390   mov rax, qword [rsp + 0x30]\n0x408395   sub rax, rbx\n0x408398   add rbp, rax\n0x40839b   cmp qword [rsp + 0x28], 0\n0x4083a1   je 0x4083e8\n0x4083a3   lea rdx, [rsp + 0x28]\n0x4083a8   lea rsi, [rsp + 0x20]\n0x4083ad   mov r8, r14\n0x4083b0   mov rcx, r13\n0x4083b3   mov rdi, r12\n0x4083b6   mov qword [rsp + 0x30], rbx\n0x4083bb   mov qword [rsp + 0x38], 0x1000\n0x4083c4   call 0x401600\n0x4083c9   cmp rax, 0xffffffffffffffff\n0x4083cd   jne 0x408390\n0x4083cf   call 0x4015c0\n0x4083d4   mov eax, dword [rax]\n0x4083d6   cmp eax, 7\n0x4083d9   je 0x408390\n0x4083db   cmp eax, 0x16\n0x4083de   jne 0x408527\n0x4083e4   nop dword [rax]\n0x4083e8   xor edx, edx\n0x4083ea   xor esi, esi\n0x4083ec   mov r8, r14\n0x4083ef   mov rcx, r13\n0x4083f2   mov rdi, r12\n0x4083f5   mov qword [rsp + 0x30], rbx\n0x4083fa   mov qword [rsp + 0x38], 0x1000\n0x408403   call 0x401600\n0x408408   cmp rax, 0xffffffffffffffff\n0x40840c   je 0x408527\n0x408412   mov rax, qword [rsp + 0x30]\n0x408417   sub rax, rbx\n0x40841a   add rbp, rax\n0x40841d   je 0x408530\n0x408423   mov rax, qword [rsp + 0x10]\n0x408428   mov rbx, qword [rax]\n0x40842b   test rbx, rbx\n0x40842e   je 0x408508\n0x408434   mov rax, qword [rsp + 8]\n0x408439   cmp rbp, qword [rax]\n0x40843c   ja 0x408508\n0x408442   xor r8d, r8d\n0x408445   xor ecx, ecx\n0x408447   xor edx, edx\n0x408449   xor esi, esi\n0x40844b   mov rdi, r12\n0x40844e   call 0x401600\n0x408453   mov rax, qword [rsp + 0x18]\n0x408458   mov qword [rsp + 0x28], r15\n0x40845d   mov qword [rsp + 0x30], rbx\n0x408462   mov qword [rsp + 0x38], rbp\n0x408467   mov qword [rsp + 0x20], rax\n0x40846c   jmp 0x408497\n0x408470   lea rdx, [rsp + 0x28]\n0x408475   lea rsi, [rsp + 0x20]\n0x40847a   mov r8, r14\n0x40847d   mov rcx, r13\n0x408480   mov rdi, r12\n0x408483   call 0x401600\n0x408488   cmp rax, 0xffffffffffffffff\n0x40848c   je 0x408540\n0x408492   mov r15, qword [rsp + 0x28]\n0x408497   test r15, r15\n0x40849a   jne 0x408470\n0x40849c   xor edx, edx\n0x40849e   xor esi, esi\n0x4084a0   mov r8, r14\n0x4084a3   mov rcx, r13\n0x4084a6   mov rdi, r12\n0x4084a9   call 0x401600\n0x4084ae   cmp rax, 0xffffffffffffffff\n0x4084b2   je 0x40854e\n0x4084b8   cmp qword [rsp + 0x38], 0\n0x4084be   jne 0x40857d\n0x4084c4   mov rax, qword [rsp + 0x10]\n0x4084c9   mov qword [rax], rbx\n0x4084cc   mov rax, qword [rsp + 8]\n0x4084d1   mov qword [rax], rbp\n0x4084d4   xor ebp, ebp\n0x4084d6   mov rcx, qword [rsp + 0x1048]\n0x4084de   xor rcx, qword fs:[0x28]\n0x4084e7   mov eax, ebp\n0x4084e9   jne 0x408582\n0x4084ef   add rsp, 0x1058\n0x4084f6   pop rbx\n0x4084f7   pop rbp\n0x4084f8   pop r12\n0x4084fa   pop r13\n0x4084fc   pop r14\n0x4084fe   pop r15\n0x408500   ret\n0x408508   mov rdi, rbp\n0x40850b   call 0x401830\n0x408510   test rax, rax\n0x408513   mov rbx, rax\n0x408516   jne 0x408442\n0x40851c   call 0x4015c0\n0x408521   mov dword [rax], 0xc\n0x408527   mov ebp, 0xffffffff\n0x40852c   jmp 0x4084d6\n0x408530   mov rax, qword [rsp + 8]\n0x408535   xor ebp, ebp\n0x408537   mov qword [rax], 0\n0x40853e   jmp 0x4084d6\n0x408540   call 0x4015c0\n0x408545   cmp dword [rax], 0x16\n0x408548   je 0x40849c\n0x40854e   mov rax, qword [rsp + 0x10]\n0x408553   mov ebp, 0xffffffff\n0x408558   cmp rbx, qword [rax]\n0x40855b   je 0x4084d6\n0x408561   call 0x4015c0\n0x408566   mov r13d, dword [rax]\n0x408569   mov r12, rax\n0x40856c   mov rdi, rbx\n0x40856f   call 0x4015a0\n0x408574   mov dword [r12], r13d\n0x408578   jmp 0x4084d6\n0x40857d   call 0x4015b0\n0x408582   call 0x4016a0\n"
      }, 
      "offset": 4227872
    }, 
    {
      "proc_desc": {
        "name": "sub.strlen_590", 
        "raw_len": 500, 
        "vex_hash": "01000000000000004000000047c71700e83e2400a0280d00e0fa19001d9c28007de406007193320074011100780d5b0053a0df0009af1d00c3fe3100818f310056a35b00d66029005f842100234fa201509b050046732b0057f639006c32790086e92100481c30001e3a05005afc1600646e0a0019df1a00dc3a1f001cfac200cb223d004f541f0051b1270010322600e082b200be4c0b00f85d6500cf508600a8380a00829e6d0067b62000008aed0007502901f1b9820085981b0085dd0700a2bd3100de989b00f2443a00111828002d4c0c00740532006bb40200c843ca0025163f00c3131c0055292300c95f39009fd51b000e08010068603100407c01003c3d12004c6d2e00971d3900", 
        "raw": "QVdBVkmJ9kFVQVRVU0iD7DhkSIsEJSgAAABIiUQkKDHASIl8JAjo1ZD//0iJxUiJRCQQSMHlBEg9////D0gPR+hMjW0BTInv6FOS//9IhcAPhIoBAABIicNFMcAxyTHSMfZMiffoBpD//0iJXCQYSIlsJCDrbGYuDx+EAAAAAADoq4///0mJx4sAg/gWD4TMAAAAg/gHD4UbAQAASItsJBhPjWQtAEgp3U055Q+D/gAAAEyJ5kiJ3+hDkv//SIXAD4TqAAAASI0UKE2J5UiJw0iJVCQYSY1UJP9IKepIiVQkIEyNRCQgSI1MJBhIjVQkEEiNdCQITIn36HKP//9Ig/j/D4R4////61VmDx9EAADoG4///4M4B0mJxw+FlgAAAEiLbCQYT41kLQBIKd1NOeVzfUyJ5kiJ3+jCkf//SIXAdG1IjRQoTYnlSInDSIlUJBhJjVQk/0gp6kiJVCQgTI1EJCBIjUwkGDHSMfZMiffo+47//0iD+P90lUiLRCQYSI1QAUiJVCQYxgAASInYSIt0JBhIKd5JOfV2JUiJ3+hckf//SIXASA9Ew+sUDx8AQccHDAAAAEiJ3+hRjv//McBIi3wkKGRIMzwlKAAAAHUeSIPEOFtdQVxBXUFeQV/D6EuO///HAAwAAAAxwOvS6ByP//8=", 
        "flow_hash": "010000000000000020000000d9bff40343049f0216ef3300b56cbf035ee84413e400730078572e00dc71622710dbe20ed8148e09a113852780c04002a19672069f2105080b6df1022ae175007292ec1c5726d70875eb4226a5f86f0dee6990033517d0168e6060023fa2220375278f2565ed3701c030e602bd97a4075da1f3160cdf60022d6c9f13e7406709", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x408590   push r15\n0x408592   push r14\n0x408594   mov r14, rsi\n0x408597   push r13\n0x408599   push r12\n0x40859b   push rbp\n0x40859c   push rbx\n0x40859d   sub rsp, 0x38\n0x4085a1   mov rax, qword fs:[0x28]\n0x4085aa   mov qword [rsp + 0x28], rax\n0x4085af   xor eax, eax\n0x4085b1   mov qword [rsp + 8], rdi\n0x4085b6   call 0x401690\n0x4085bb   mov rbp, rax\n0x4085be   mov qword [rsp + 0x10], rax\n0x4085c3   shl rbp, 4\n0x4085c7   cmp rax, 0xfffffff\n0x4085cd   cmova rbp, rax\n0x4085d1   lea r13, [rbp + 1]\n0x4085d5   mov rdi, r13\n0x4085d8   call 0x401830\n0x4085dd   test rax, rax\n0x4085e0   je 0x408770\n0x4085e6   mov rbx, rax\n0x4085e9   xor r8d, r8d\n0x4085ec   xor ecx, ecx\n0x4085ee   xor edx, edx\n0x4085f0   xor esi, esi\n0x4085f2   mov rdi, r14\n0x4085f5   call 0x401600\n0x4085fa   mov qword [rsp + 0x18], rbx\n0x4085ff   mov qword [rsp + 0x20], rbp\n0x408604   jmp 0x408672\n0x408610   call 0x4015c0\n0x408615   mov r15, rax\n0x408618   mov eax, dword [rax]\n0x40861a   cmp eax, 0x16\n0x40861d   je 0x4086ef\n0x408623   cmp eax, 7\n0x408626   jne 0x408747\n0x40862c   mov rbp, qword [rsp + 0x18]\n0x408631   lea r12, [r13 + r13]\n0x408636   sub rbp, rbx\n0x408639   cmp r13, r12\n0x40863c   jae 0x408740\n0x408642   mov rsi, r12\n0x408645   mov rdi, rbx\n0x408648   call 0x401890\n0x40864d   test rax, rax\n0x408650   je 0x408740\n0x408656   lea rdx, [rax + rbp]\n0x40865a   mov r13, r12\n0x40865d   mov rbx, rax\n0x408660   mov qword [rsp + 0x18], rdx\n0x408665   lea rdx, [r12 - 1]\n0x40866a   sub rdx, rbp\n0x40866d   mov qword [rsp + 0x20], rdx\n0x408672   lea r8, [rsp + 0x20]\n0x408677   lea rcx, [rsp + 0x18]\n0x40867c   lea rdx, [rsp + 0x10]\n0x408681   lea rsi, [rsp + 8]\n0x408686   mov rdi, r14\n0x408689   call 0x401600\n0x40868e   cmp rax, 0xffffffffffffffff\n0x408692   je 0x408610\n0x408698   jmp 0x4086ef\n0x4086a0   call 0x4015c0\n0x4086a5   cmp dword [rax], 7\n0x4086a8   mov r15, rax\n0x4086ab   jne 0x408747\n0x4086b1   mov rbp, qword [rsp + 0x18]\n0x4086b6   lea r12, [r13 + r13]\n0x4086bb   sub rbp, rbx\n0x4086be   cmp r13, r12\n0x4086c1   jae 0x408740\n0x4086c3   mov rsi, r12\n0x4086c6   mov rdi, rbx\n0x4086c9   call 0x401890\n0x4086ce   test rax, rax\n0x4086d1   je 0x408740\n0x4086d3   lea rdx, [rax + rbp]\n0x4086d7   mov r13, r12\n0x4086da   mov rbx, rax\n0x4086dd   mov qword [rsp + 0x18], rdx\n0x4086e2   lea rdx, [r12 - 1]\n0x4086e7   sub rdx, rbp\n0x4086ea   mov qword [rsp + 0x20], rdx\n0x4086ef   lea r8, [rsp + 0x20]\n0x4086f4   lea rcx, [rsp + 0x18]\n0x4086f9   xor edx, edx\n0x4086fb   xor esi, esi\n0x4086fd   mov rdi, r14\n0x408700   call 0x401600\n0x408705   cmp rax, 0xffffffffffffffff\n0x408709   je 0x4086a0\n0x40870b   mov rax, qword [rsp + 0x18]\n0x408710   lea rdx, [rax + 1]\n0x408714   mov qword [rsp + 0x18], rdx\n0x408719   mov byte [rax], 0\n0x40871c   mov rax, rbx\n0x40871f   mov rsi, qword [rsp + 0x18]\n0x408724   sub rsi, rbx\n0x408727   cmp r13, rsi\n0x40872a   jbe 0x408751\n0x40872c   mov rdi, rbx\n0x40872f   call 0x401890\n0x408734   test rax, rax\n0x408737   cmove rax, rbx\n0x40873b   jmp 0x408751\n0x408740   mov dword [r15], 0xc\n0x408747   mov rdi, rbx\n0x40874a   call 0x4015a0\n0x40874f   xor eax, eax\n0x408751   mov rdi, qword [rsp + 0x28]\n0x408756   xor rdi, qword fs:[0x28]\n0x40875f   jne 0x40877f\n0x408761   add rsp, 0x38\n0x408765   pop rbx\n0x408766   pop rbp\n0x408767   pop r12\n0x408769   pop r13\n0x40876b   pop r14\n0x40876d   pop r15\n0x40876f   ret\n0x408770   call 0x4015c0\n0x408775   mov dword [rax], 0xc\n0x40877b   xor eax, eax\n0x40877d   jmp 0x408751\n0x40877f   call 0x4016a0\n"
      }, 
      "offset": 4228496
    }, 
    {
      "proc_desc": {
        "name": "sub.free_cf0", 
        "raw_len": 2419, 
        "vex_hash": "0100000000000000400000007fb1090056ba16002f910000bded18005d7d2800cf2f0200e4802d009d640700e2300b0083a301009d9d1000c6ba15009cad2000b1d517005e0a0400d5560400c58a44003392010004810500e81900007b112500de4e10004d13090033562e00d8bc03001a3c2f009bb218000ef12e00b69f1a00cec804002260060095530300a694060094354f0085f0090053e70400ac9e040083bd0500937b1100b4eb0d007261070060bf220077840300cae50800f4b526004d7e0e00575716002a0d01007f621400fbb94b00e3bb0b004f990700aa040700b8382500d95e0600a1d80100c26a0700fef313003e79160082830300655d160029d20400d4f82000845d3700", 
        "raw": "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", 
        "flow_hash": "010000000000000020000000b2849f04ef8d0b0116ef3300f72eca0054bea100e4007300c8ec02012c81b80283c44600113a340113dd370229464100ce0b4109f72605030b6df1021bc2c305483c84024170250230cb3c026ba7320061513a075120c50426d800013fa222035a23b00bd0e332025a3ce6008e0a1907e5f2e0001b370901468aa001fec43a01", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x402cf0   push r15\n0x402cf2   push r14\n0x402cf4   push r13\n0x402cf6   push r12\n0x402cf8   mov r12, rdi\n0x402cfb   push rbp\n0x402cfc   push rbx\n0x402cfd   mov rdi, rsi\n0x402d00   mov esi, 2\n0x402d05   sub rsp, 0xb8\n0x402d0c   mov rax, qword fs:[0x28]\n0x402d15   mov qword [rsp + 0xa8], rax\n0x402d1d   xor eax, eax\n0x402d1f   call 0x405350\n0x402d24   mov qword [rsp + 0x10], rax\n0x402d29   lea rax, [rsp + 0x84]\n0x402d31   lea r13, [rsp + 0x44]\n0x402d36   mov qword [rsp + 8], rax\n0x402d3b   nop dword [rax + rax]\n0x402d40   cmp byte [r12], 0\n0x402d45   je 0x402f90\n0x402d4b   mov rsi, qword [rsp + 0x10]\n0x402d50   mov rdi, r12\n0x402d53   call 0x4072c0\n0x402d58   test rax, rax\n0x402d5b   mov rbx, rax\n0x402d5e   je 0x402f90\n0x402d64   call 0x401680\n0x402d69   cmp rax, 1\n0x402d6d   jbe 0x402f38\n0x402d73   cmp r12, rbx\n0x402d76   mov qword [rsp + 0x30], r12\n0x402d7b   mov byte [rsp + 0x20], 0\n0x402d80   lea rbp, [rsp + 0x24]\n0x402d85   mov qword [rsp + 0x24], 0\n0x402d8e   mov byte [rsp + 0x2c], 0\n0x402d93   jb 0x402e10\n0x402d95   jmp 0x403410\n0x402da0   mov r12, qword [rsp + 0x30]\n0x402da5   movzx eax, byte [r12]\n0x402daa   mov edx, eax\n0x402dac   and eax, 0x1f\n0x402daf   shr dl, 5\n0x402db2   and edx, 7\n0x402db5   mov edx, dword [rdx*4 + 0x409f40]\n0x402dbc   bt edx, eax\n0x402dbf   jae 0x402ea8\n0x402dc5   mov qword [rsp + 0x38], 1\n0x402dce   movsx r15d, byte [r12]\n0x402dd3   mov byte [rsp + 0x40], 1\n0x402dd8   mov dword [rsp + 0x44], r15d\n0x402ddd   test r15d, r15d\n0x402de0   mov byte [rsp + 0x2c], 1\n0x402de5   je 0x402ea0\n0x402deb   mov r12, qword [rsp + 0x30]\n0x402df0   mov rdi, r12\n0x402df3   add rdi, qword [rsp + 0x38]\n0x402df8   movzx eax, byte [rsp + 0x40]\n0x402dfd   mov byte [rsp + 0x2c], 0\n0x402e02   cmp rbx, rdi\n0x402e05   mov qword [rsp + 0x30], rdi\n0x402e0a   jbe 0x402fd0\n0x402e10   cmp byte [rsp + 0x20], 0\n0x402e15   je 0x402da0\n0x402e17   call 0x401680\n0x402e1c   mov r12, qword [rsp + 0x30]\n0x402e21   mov rsi, rax\n0x402e24   mov rdi, r12\n0x402e27   call 0x405310\n0x402e2c   mov rcx, rbp\n0x402e2f   mov rdx, rax\n0x402e32   mov rsi, r12\n0x402e35   mov rdi, r13\n0x402e38   call 0x4016c0\n0x402e3d   cmp rax, 0xffffffffffffffff\n0x402e41   mov qword [rsp + 0x38], rax\n0x402e46   je 0x402ec8\n0x402e4c   cmp rax, 0xfffffffffffffffe\n0x402e50   je 0x402f10\n0x402e56   test rax, rax\n0x402e59   jne 0x402ee8\n0x402e5f   mov r12, qword [rsp + 0x30]\n0x402e64   mov qword [rsp + 0x38], 1\n0x402e6d   cmp byte [r12], 0\n0x402e72   jne 0x403645\n0x402e78   mov r15d, dword [rsp + 0x44]\n0x402e7d   test r15d, r15d\n0x402e80   jne 0x4035b1\n0x402e86   mov rdi, rbp\n0x402e89   mov byte [rsp + 0x40], 1\n0x402e8e   call 0x401980\n0x402e93   test eax, eax\n0x402e95   jne 0x402f02\n0x402e97   mov byte [rsp + 0x2c], 1\n0x402e9c   nop dword [rax]\n0x402ea0   call 0x4015b0\n0x402ea8   mov rdi, rbp\n0x402eab   call 0x401980\n0x402eb0   test eax, eax\n0x402eb2   je 0x40362c\n0x402eb8   mov byte [rsp + 0x20], 1\n0x402ebd   jmp 0x402e17\n0x402ec8   mov qword [rsp + 0x38], 1\n0x402ed1   mov byte [rsp + 0x40], 0\n0x402ed6   mov r15d, dword [rsp + 0x44]\n0x402edb   mov r12, qword [rsp + 0x30]\n0x402ee0   jmp 0x402df0\n0x402ee8   mov rdi, rbp\n0x402eeb   mov byte [rsp + 0x40], 1\n0x402ef0   mov r15d, dword [rsp + 0x44]\n0x402ef5   call 0x401980\n0x402efa   test eax, eax\n0x402efc   je 0x402ddd\n0x402f02   mov byte [rsp + 0x20], 0\n0x402f07   jmp 0x402ddd\n0x402f10   mov r12, qword [rsp + 0x30]\n0x402f15   mov rdi, r12\n0x402f18   call 0x401690\n0x402f1d   mov byte [rsp + 0x40], 0\n0x402f22   mov qword [rsp + 0x38], rax\n0x402f27   mov r15d, dword [rsp + 0x44]\n0x402f2c   jmp 0x402df0\n0x402f38   cmp r12, rbx\n0x402f3b   jae 0x4034bd\n0x402f41   call 0x4019a0\n0x402f46   movzx edx, byte [rbx - 1]\n0x402f4a   mov rax, qword [rax]\n0x402f4d   mov rdi, qword [rsp + 0x10]\n0x402f52   movzx ebp, word [rax + rdx*2]\n0x402f56   call 0x401690\n0x402f5b   movzx r12d, byte [rbx + rax]\n0x402f60   shr bp, 3\n0x402f64   xor ebp, 1\n0x402f67   and ebp, 1\n0x402f6a   test r12b, r12b\n0x402f6d   jne 0x4034da\n0x402f73   test bpl, bpl\n0x402f76   jne 0x403622\n0x402f7c   cmp byte [rbx], 0\n0x402f7f   je 0x402f90\n0x402f81   lea r12, [rbx + 1]\n0x402f85   cmp byte [r12], 0\n0x402f8a   jne 0x402d4b\n0x402f90   xor ebx, ebx\n0x402f92   mov rdi, qword [rsp + 0x10]\n0x402f97   call 0x4015a0\n0x402f9c   mov eax, ebx\n0x402f9e   mov rbx, qword [rsp + 0xa8]\n0x402fa6   xor rbx, qword fs:[0x28]\n0x402faf   jne 0x40365e\n0x402fb5   add rsp, 0xb8\n0x402fbc   pop rbx\n0x402fbd   pop rbp\n0x402fbe   pop r12\n0x402fc0   pop r13\n0x402fc2   pop r14\n0x402fc4   pop r15\n0x402fc6   ret\n0x402fd0   test al, al\n0x402fd2   je 0x403410\n0x402fd8   mov edi, r15d\n0x402fdb   call 0x401820\n0x402fe0   test eax, eax\n0x402fe2   sete byte [rsp + 0x1f]\n0x402fe7   mov byte [rsp + 0x60], 0\n0x402fec   cmp byte [rsp + 0x60], 0\n0x402ff1   lea rbp, [rsp + 0x64]\n0x402ff6   mov rax, qword [rsp + 0x10]\n0x402ffb   mov qword [rsp + 0x30], rbx\n0x403000   lea r12, [rsp + 0x24]\n0x403005   mov byte [rsp + 0x20], 0\n0x40300a   mov qword [rsp + 0x24], 0\n0x403013   mov byte [rsp + 0x2c], 0\n0x403018   mov qword [rsp + 0x64], 0\n0x403021   mov qword [rsp + 0x70], rax\n0x403026   mov byte [rsp + 0x6c], 0\n0x40302b   jne 0x4031e5\n0x403031   nop dword [rax]\n0x403038   mov rcx, qword [rsp + 0x70]\n0x40303d   movzx eax, byte [rcx]\n0x403040   mov edx, eax\n0x403042   and eax, 0x1f\n0x403045   shr dl, 5\n0x403048   and edx, 7\n0x40304b   mov edx, dword [rdx*4 + 0x409f40]\n0x403052   bt edx, eax\n0x403055   jae 0x403380\n0x40305b   mov qword [rsp + 0x78], 1\n0x403064   movsx eax, byte [rcx]\n0x403067   mov byte [rsp + 0x80], 1\n0x40306f   mov dword [rsp + 0x84], eax\n0x403076   mov edx, dword [rsp + 0x84]\n0x40307d   mov byte [rsp + 0x6c], 1\n0x403082   test edx, edx\n0x403084   jne 0x40319e\n0x40308a   movzx ebp, byte [rsp + 0x2c]\n0x40308f   test bpl, bpl\n0x403092   jne 0x4033f8\n0x403098   cmp byte [rsp + 0x20], 0\n0x40309d   jne 0x403509\n0x4030a3   mov rcx, qword [rsp + 0x30]\n0x4030a8   movzx eax, byte [rcx]\n0x4030ab   mov edx, eax\n0x4030ad   and eax, 0x1f\n0x4030b0   shr dl, 5\n0x4030b3   and edx, 7\n0x4030b6   mov edx, dword [rdx*4 + 0x409f40]\n0x4030bd   bt edx, eax\n0x4030c0   jae 0x4034f2\n0x4030c6   mov qword [rsp + 0x38], 1\n0x4030cf   movsx r12d, byte [rcx]\n0x4030d3   mov ebp, 1\n0x4030d8   mov byte [rsp + 0x40], 1\n0x4030dd   mov dword [rsp + 0x44], r12d\n0x4030e2   mov byte [rsp + 0x2c], 1\n0x4030e7   test bpl, bpl\n0x4030ea   je 0x4030f1\n0x4030ec   test r12d, r12d\n0x4030ef   je 0x403108\n0x4030f1   cmp byte [rsp + 0x40], 0\n0x4030f6   je 0x403108\n0x4030f8   mov edi, r12d\n0x4030fb   call 0x401820\n0x403100   test eax, eax\n0x403102   jne 0x403113\n0x403104   nop dword [rax]\n0x403108   cmp byte [rsp + 0x1f], 0\n0x40310d   jne 0x403622\n0x403113   mov qword [rsp + 0x30], rbx\n0x403118   mov byte [rsp + 0x20], 0\n0x40311d   lea rbp, [rsp + 0x24]\n0x403122   mov qword [rsp + 0x24], 0\n0x40312b   mov byte [rsp + 0x2c], 0\n0x403130   movzx eax, byte [rbx]\n0x403133   mov edx, eax\n0x403135   and eax, 0x1f\n0x403138   shr dl, 5\n0x40313b   and edx, 7\n0x40313e   mov edx, dword [rdx*4 + 0x409f40]\n0x403145   bt edx, eax\n0x403148   jae 0x403420\n0x40314e   mov qword [rsp + 0x38], 1\n0x403157   movsx eax, byte [rbx]\n0x40315a   mov byte [rsp + 0x40], 1\n0x40315f   mov dword [rsp + 0x44], eax\n0x403163   mov eax, dword [rsp + 0x44]\n0x403167   mov byte [rsp + 0x2c], 1\n0x40316c   test eax, eax\n0x40316e   je 0x402f90\n0x403174   add rbx, qword [rsp + 0x38]\n0x403179   mov r12, rbx\n0x40317c   jmp 0x402d40\n0x403188   mov qword [rsp + 0x78], 1\n0x403191   mov byte [rsp + 0x80], 0\n0x403199   mov byte [rsp + 0x6c], 1\n0x40319e   movzx r15d, byte [rsp + 0x2c]\n0x4031a4   test r15b, r15b\n0x4031a7   je 0x403278\n0x4031ad   movzx r15d, byte [rsp + 0x40]\n0x4031b3   test r15b, r15b\n0x4031b6   jne 0x4032c7\n0x4031bc   mov rax, qword [rsp + 0x38]\n0x4031c1   add qword [rsp + 0x30], rax\n0x4031c6   mov rax, qword [rsp + 0x78]\n0x4031cb   add qword [rsp + 0x70], rax\n0x4031d0   cmp byte [rsp + 0x60], 0\n0x4031d5   mov byte [rsp + 0x2c], 0\n0x4031da   mov byte [rsp + 0x6c], 0\n0x4031df   je 0x403038\n0x4031e5   call 0x401680\n0x4031ea   mov r15, qword [rsp + 0x70]\n0x4031ef   mov rsi, rax\n0x4031f2   mov rdi, r15\n0x4031f5   call 0x405310\n0x4031fa   mov rdi, qword [rsp + 8]\n0x4031ff   mov rcx, rbp\n0x403202   mov rdx, rax\n0x403205   mov rsi, r15\n0x403208   call 0x4016c0\n0x40320d   cmp rax, 0xffffffffffffffff\n0x403211   mov qword [rsp + 0x78], rax\n0x403216   je 0x403188\n0x40321c   cmp rax, 0xfffffffffffffffe\n0x403220   je 0x4033b8\n0x403226   test rax, rax\n0x403229   jne 0x403251\n0x40322b   mov rax, qword [rsp + 0x70]\n0x403230   mov qword [rsp + 0x78], 1\n0x403239   cmp byte [rax], 0\n0x40323c   jne 0x403645\n0x403242   mov esi, dword [rsp + 0x84]\n0x403249   test esi, esi\n0x40324b   jne 0x4035b1\n0x403251   mov rdi, rbp\n0x403254   mov byte [rsp + 0x80], 1\n0x40325c   call 0x401980\n0x403261   test eax, eax\n0x403263   je 0x403076\n0x403269   mov byte [rsp + 0x60], 0\n0x40326e   jmp 0x403076\n0x403278   cmp byte [rsp + 0x20], 0\n0x40327d   jne 0x4032f5\n0x40327f   mov rcx, qword [rsp + 0x30]\n0x403284   movzx eax, byte [rcx]\n0x403287   mov edx, eax\n0x403289   and eax, 0x1f\n0x40328c   shr dl, 5\n0x40328f   and edx, 7\n0x403292   mov edx, dword [rdx*4 + 0x409f40]\n0x403299   bt edx, eax\n0x40329c   jae 0x4032e0\n0x40329e   mov qword [rsp + 0x38], 1\n0x4032a7   movsx eax, byte [rcx]\n0x4032aa   mov r15d, 1\n0x4032b0   mov byte [rsp + 0x40], 1\n0x4032b5   mov dword [rsp + 0x44], eax\n0x4032b9   test r15b, r15b\n0x4032bc   mov byte [rsp + 0x2c], 1\n0x4032c1   je 0x4031bc\n0x4032c7   mov edi, dword [rsp + 0x44]\n0x4032cb   test edi, edi\n0x4032cd   jne 0x4031bc\n0x4032d3   jmp 0x402ea0\n0x4032e0   mov rdi, r12\n0x4032e3   call 0x401980\n0x4032e8   test eax, eax\n0x4032ea   je 0x40362c\n0x4032f0   mov byte [rsp + 0x20], 1\n0x4032f5   call 0x401680\n0x4032fa   mov r14, qword [rsp + 0x30]\n0x4032ff   mov rsi, rax\n0x403302   mov rdi, r14\n0x403305   call 0x405310\n0x40330a   mov rcx, r12\n0x40330d   mov rdx, rax\n0x403310   mov rsi, r14\n0x403313   mov rdi, r13\n0x403316   call 0x4016c0\n0x40331b   cmp rax, 0xffffffffffffffff\n0x40331f   mov qword [rsp + 0x38], rax\n0x403324   je 0x4033a0\n0x403326   cmp rax, 0xfffffffffffffffe\n0x40332a   je 0x4033d8\n0x403330   test rax, rax\n0x403333   jne 0x40335a\n0x403335   mov rax, qword [rsp + 0x30]\n0x40333a   mov qword [rsp + 0x38], 1\n0x403343   cmp byte [rax], 0\n0x403346   jne 0x403645\n0x40334c   mov r8d, dword [rsp + 0x44]\n0x403351   test r8d, r8d\n0x403354   jne 0x4035b1\n0x40335a   mov rdi, r12\n0x40335d   mov byte [rsp + 0x40], 1\n0x403362   mov r15d, 1\n0x403368   call 0x401980\n0x40336d   test eax, eax\n0x40336f   je 0x4032b9\n0x403375   mov byte [rsp + 0x20], 0\n0x40337a   jmp 0x4032b9\n0x403380   mov rdi, rbp\n0x403383   call 0x401980\n0x403388   test eax, eax\n0x40338a   je 0x40362c\n0x403390   mov byte [rsp + 0x60], 1\n0x403395   jmp 0x4031e5\n0x4033a0   mov qword [rsp + 0x38], 1\n0x4033a9   mov byte [rsp + 0x40], 0\n0x4033ae   jmp 0x4032b9\n0x4033b8   mov rdi, qword [rsp + 0x70]\n0x4033bd   call 0x401690\n0x4033c2   mov byte [rsp + 0x80], 0\n0x4033ca   mov qword [rsp + 0x78], rax\n0x4033cf   jmp 0x403199\n0x4033d8   mov rdi, qword [rsp + 0x30]\n0x4033dd   call 0x401690\n0x4033e2   mov byte [rsp + 0x40], 0\n0x4033e7   mov qword [rsp + 0x38], rax\n0x4033ec   jmp 0x4032b9\n0x4033f8   movzx ebp, byte [rsp + 0x40]\n0x4033fd   mov r12d, dword [rsp + 0x44]\n0x403402   jmp 0x4030e7\n0x403410   mov byte [rsp + 0x1f], 1\n0x403415   jmp 0x402fe7\n0x403420   mov rdi, rbp\n0x403423   call 0x401980\n0x403428   test eax, eax\n0x40342a   je 0x40362c\n0x403430   mov byte [rsp + 0x20], 1\n0x403435   call 0x401680\n0x40343a   mov r12, qword [rsp + 0x30]\n0x40343f   mov rsi, rax\n0x403442   mov rdi, r12\n0x403445   call 0x405310\n0x40344a   mov rcx, rbp\n0x40344d   mov rdx, rax\n0x403450   mov rsi, r12\n0x403453   mov rdi, r13\n0x403456   call 0x4016c0\n0x40345b   cmp rax, 0xffffffffffffffff\n0x40345f   mov qword [rsp + 0x38], rax\n0x403464   je 0x40357a\n0x40346a   cmp rax, 0xfffffffffffffffe\n0x40346e   je 0x4035d0\n0x403474   test rax, rax\n0x403477   jne 0x40349c\n0x403479   mov rax, qword [rsp + 0x30]\n0x40347e   mov qword [rsp + 0x38], 1\n0x403487   cmp byte [rax], 0\n0x40348a   jne 0x403645\n0x403490   mov ecx, dword [rsp + 0x44]\n0x403494   test ecx, ecx\n0x403496   jne 0x4035b1\n0x40349c   lea rdi, [rsp + 0x24]\n0x4034a1   mov byte [rsp + 0x40], 1\n0x4034a6   call 0x401980\n0x4034ab   test eax, eax\n0x4034ad   je 0x403163\n0x4034b3   mov byte [rsp + 0x20], 0\n0x4034b8   jmp 0x403163\n0x4034bd   mov rdi, qword [rsp + 0x10]\n0x4034c2   call 0x401690\n0x4034c7   movzx r12d, byte [rbx + rax]\n0x4034cc   test r12b, r12b\n0x4034cf   je 0x403622\n0x4034d5   mov ebp, 1\n0x4034da   call 0x4019a0\n0x4034df   mov rax, qword [rax]\n0x4034e2   test byte [rax + r12*2], 8\n0x4034e7   jne 0x402f7c\n0x4034ed   jmp 0x402f73\n0x4034f2   lea rdi, [rsp + 0x24]\n0x4034f7   call 0x401980\n0x4034fc   test eax, eax\n0x4034fe   je 0x40362c\n0x403504   mov byte [rsp + 0x20], 1\n0x403509   call 0x401680\n0x40350e   mov r12, qword [rsp + 0x30]\n0x403513   mov rsi, rax\n0x403516   mov rdi, r12\n0x403519   call 0x405310\n0x40351e   lea rcx, [rsp + 0x24]\n0x403523   mov rdx, rax\n0x403526   mov rsi, r12\n0x403529   mov rdi, r13\n0x40352c   call 0x4016c0\n0x403531   cmp rax, 0xffffffffffffffff\n0x403535   mov qword [rsp + 0x38], rax\n0x40353a   je 0x4035ec\n0x403540   cmp rax, 0xfffffffffffffffe\n0x403544   je 0x403604\n0x40354a   test rax, rax\n0x40354d   je 0x403590\n0x40354f   mov r12d, dword [rsp + 0x44]\n0x403554   lea rdi, [rsp + 0x24]\n0x403559   mov byte [rsp + 0x40], 1\n0x40355e   mov ebp, 1\n0x403563   call 0x401980\n0x403568   test eax, eax\n0x40356a   je 0x4030e2\n0x403570   mov byte [rsp + 0x20], 0\n0x403575   jmp 0x4030e2\n0x40357a   mov qword [rsp + 0x38], 1\n0x403583   add rbx, qword [rsp + 0x38]\n0x403588   mov r12, rbx\n0x40358b   jmp 0x402d40\n0x403590   mov rax, qword [rsp + 0x30]\n0x403595   mov qword [rsp + 0x38], 1\n0x40359e   cmp byte [rax], 0\n0x4035a1   jne 0x403645\n0x4035a7   mov r12d, dword [rsp + 0x44]\n0x4035ac   test r12d, r12d\n0x4035af   je 0x403554\n0x4035b1   mov ecx, 0x4095b0\n0x4035b6   mov edx, 0xb3\n0x4035bb   mov esi, 0x409554\n0x4035c0   mov edi, 0x409590\n0x4035c5   call 0x401700\n0x4035d0   mov rdi, qword [rsp + 0x30]\n0x4035d5   call 0x401690\n0x4035da   mov qword [rsp + 0x38], rax\n0x4035df   add rbx, qword [rsp + 0x38]\n0x4035e4   mov r12, rbx\n0x4035e7   jmp 0x402d40\n0x4035ec   mov qword [rsp + 0x38], 1\n0x4035f5   mov byte [rsp + 0x40], 0\n0x4035fa   mov r12d, dword [rsp + 0x44]\n0x4035ff   jmp 0x4030e2\n0x403604   mov rdi, qword [rsp + 0x30]\n0x403609   call 0x401690\n0x40360e   mov byte [rsp + 0x40], 0\n0x403613   mov qword [rsp + 0x38], rax\n0x403618   mov r12d, dword [rsp + 0x44]\n0x40361d   jmp 0x4030e2\n0x403622   mov ebx, 1\n0x403627   jmp 0x402f92\n0x40362c   mov ecx, 0x4095b0\n0x403631   mov edx, 0x96\n0x403636   mov esi, 0x409554\n0x40363b   mov edi, 0x409562\n0x403640   call 0x401700\n0x403645   mov ecx, 0x4095b0\n0x40364a   mov edx, 0xb2\n0x40364f   mov esi, 0x409554\n0x403654   mov edi, 0x409579\n0x403659   call 0x401700\n0x40365e   call 0x4016a0\n"
      }, 
      "offset": 4205808
    }, 
    {
      "proc_desc": {
        "name": "sub.__strdup_350", 
        "raw_len": 1417, 
        "vex_hash": "01000000000000004000000047c71700de680400a0280d00ef1a0400e1c827007de40600719332009d640700e2300b0094af100043350a00c6ba150051b50c0065460e000cae14008ec23900b99310003ac5340046732b00568f13003c9d010026bd08007935050033562e0030c47d003501340078c8110047e721005579010079380400aea10b0004c900004eb6000091d02200c7d10500f3100800b2380100a822030002393000b12c3e0092600e00af0c2b00848f0d00fe121300f1b90000173616008ee21c0066d74b0075b8000064d12d00864d0d000ad10c0034910000a0f61700c3131c00e6a40d0025a20600760905000e0801006860310099d80000767c0200d4f820002f003500", 
        "raw": "QVdBVkGJ9kFVQVRVU0iD7GhkSIsEJSgAAABIiUQkWDHA6PrD//9IhcAPhB4FAABIicXo+cL//0iD+AEPhs8CAABFhfYPhWYDAABIie9IiWwkKEUx/+jmwv//TI10BQDGRCQYAEjHRCQcAAAAAMZEJCQASInrTI1kJBxMOfVMiXQkEHJa6VACAAAPH4AAAAAAQYP/AQ+EZgEAAEGD/wIPhZQBAACAfCQ4AA+EiQEAAIt8JDzo2MT//4XAuAEAAABED0T4Dx9EAABMAevGRCQkAEw580iJXCQoD4MiAgAAgHwkGAAPhYwAAAAPtgOJwYPgH8DpBYPhB4sMjUCfQAAPo8FzXUjHRCQwAQAAAA++A0G9AQAAAEyLdCQQSItcJCjGRCQ4AYlEJDxFhf/GRCQkAQ+FWv///4B8JDgAQb8BAAAAdIWLfCQ8RTH/6EHE//+FwEEPlMfpbv///2YPH0QAAEyJ5+jIxP//hcAPhMQDAADGRCQYAUiNTCQcTInySI18JDxIKdpIid7o48H//0iD+P9IiUQkMA+ErAAAAEiD+P4PhNoAAABIhcAPhcEAAABIi1wkKEjHRCQwAQAAAIA7AA+FjAMAAItEJDyFwA+FngMAAEiNfCQcxkQkOAHoT8T//4XAdAXGRCQYAEyLdCQQTItsJDDpL////w8fgAAAAACAfCQ4AA+Evf7//4t8JDzofMP//0iLdCQIhcC4AgAAAEQPRfhID0XzSIl0JAjplv7//2YPH0QAAEG/AQAAAOmF/v//Dx9EAABIx0QkMAEAAADGRCQ4AEG9AQAAAEyLdCQQSItcJCjpvf7//w8fRAAASItcJCjpWP///2YPH0QAAEyLdCQQSItcJCjGRCQ4AE2J9Ukp3UyJbCQw6Yn+//+QSItcJChIx0QkMAEAAADGRCQ4AMZEJCQBSInf6IDA//9IjVABSIneSInv6NHC//9Bg/4BD4Vx/f//SIt0JFhkSDM0JSgAAABIiegPhXsCAABIg8RoW11BXEFdQV5BX8OQQYP/AnXTSItEJAjGAADryUWF9nRQD7ZdAITbD4QLAgAA6CrD//9JiexIiwDrD2aQSYPEAUEPthwkhNt0B/ZEWAEgdexMiefo9L///0iNUAFMieZIie/oRcL//0GD/gEPhHT///9Iie/o07///0iNXAX/SDndD4de////6NDC//9IixDrEw8fAMYDAEiD6wFIOd0Ph0H///8PtgP2REIBIHXm6TL///9mDx+EAAAAAABIie9IiWwkKEiJ6+iAv///TI1kBQDGRCQYAEjHRCQcAAAAAMZEJCQATDnlTIlkJBAPg9L+//9MjXwkHOtuDx8AD7YDicKD4B/A6gWD4geLFJVAn0AAD6PCD4PSAAAASMdEJDABAAAAD74DSItcJCjGRCQ4AYlEJDyLfCQ8xkQkJAHoWsH//4XAD4R6/v//SANcJDBMi2QkEMZEJCQASTncSIlcJCgPhl3+//+AfCQYAHSOSI1MJBxMieJIjXwkPEgp2kiJ3uj2vv//SIP4/0iJRCQwD4QX/v//SIP4/g+EfQAAAEiFwHVoSItcJChIx0QkMAEAAACAOwAPhaMAAACLVCQ8hdIPhbUAAABIjXwkHMZEJDgB6GbB//+FwA+EVv///8ZEJBgA6Uz///8PH0AATIn/6EjB//+FwHRIxkQkGAHpbP///2YuDx+EAAAAAABIi1wkKOu0Zg8fhAAAAAAASItcJChIi0QkEMZEJDgASCnYSIlEJDDph/3//0mJ7OkQ/v//uVCbQAC6jgAAAL44m0AAv2KVQADoY77//+gOCAAAuVCbQAC6qQAAAL44m0AAv3mVQADoRb7//+jgvf//uVCbQAC6qgAAAL44m0AAv5CVQADoJ77//w==", 
        "flow_hash": "01000000000000002000000002de380591ee850216ef3300b56cbf0354bea1009a20d807704ee701939ccc00cef6d4004a7c2b0000d9bb0d10e61a034b43dd000d7a85020b6df102cfa4350798d65b00a477e2021cabee0d6899b40aee6990035120c5048e6060023fa2220342a8ea107bd6e903c030e602483b5407e5f2e0009bb9db01468aa001b57ae400", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x405350   push r15\n0x405352   push r14\n0x405354   mov r14d, esi\n0x405357   push r13\n0x405359   push r12\n0x40535b   push rbp\n0x40535c   push rbx\n0x40535d   sub rsp, 0x68\n0x405361   mov rax, qword fs:[0x28]\n0x40536a   mov qword [rsp + 0x58], rax\n0x40536f   xor eax, eax\n0x405371   call 0x401770\n0x405376   test rax, rax\n0x405379   je 0x40589d\n0x40537f   mov rbp, rax\n0x405382   call 0x401680\n0x405387   cmp rax, 1\n0x40538b   jbe 0x405660\n0x405391   test r14d, r14d\n0x405394   jne 0x405700\n0x40539a   mov rdi, rbp\n0x40539d   mov qword [rsp + 0x28], rbp\n0x4053a2   xor r15d, r15d\n0x4053a5   call 0x401690\n0x4053aa   lea r14, [rbp + rax]\n0x4053af   mov byte [rsp + 0x18], 0\n0x4053b4   mov qword [rsp + 0x1c], 0\n0x4053bd   mov byte [rsp + 0x24], 0\n0x4053c2   mov rbx, rbp\n0x4053c5   lea r12, [rsp + 0x1c]\n0x4053ca   cmp rbp, r14\n0x4053cd   mov qword [rsp + 0x10], r14\n0x4053d2   jb 0x40542e\n0x4053d4   jmp 0x405629\n0x4053e0   cmp r15d, 1\n0x4053e4   je 0x405550\n0x4053ea   cmp r15d, 2\n0x4053ee   jne 0x405588\n0x4053f4   cmp byte [rsp + 0x38], 0\n0x4053f9   je 0x405588\n0x4053ff   mov edi, dword [rsp + 0x3c]\n0x405403   call 0x4018e0\n0x405408   test eax, eax\n0x40540a   mov eax, 1\n0x40540f   cmove r15d, eax\n0x405413   nop dword [rax + rax]\n0x405418   add rbx, r13\n0x40541b   mov byte [rsp + 0x24], 0\n0x405420   cmp rbx, r14\n0x405423   mov qword [rsp + 0x28], rbx\n0x405428   jae 0x405650\n0x40542e   cmp byte [rsp + 0x18], 0\n0x405433   jne 0x4054c5\n0x405439   movzx eax, byte [rbx]\n0x40543c   mov ecx, eax\n0x40543e   and eax, 0x1f\n0x405441   shr cl, 5\n0x405444   and ecx, 7\n0x405447   mov ecx, dword [rcx*4 + 0x409f40]\n0x40544e   bt ecx, eax\n0x405451   jae 0x4054b0\n0x405453   mov qword [rsp + 0x30], 1\n0x40545c   movsx eax, byte [rbx]\n0x40545f   mov r13d, 1\n0x405465   mov r14, qword [rsp + 0x10]\n0x40546a   mov rbx, qword [rsp + 0x28]\n0x40546f   mov byte [rsp + 0x38], 1\n0x405474   mov dword [rsp + 0x3c], eax\n0x405478   test r15d, r15d\n0x40547b   mov byte [rsp + 0x24], 1\n0x405480   jne 0x4053e0\n0x405486   cmp byte [rsp + 0x38], 0\n0x40548b   mov r15d, 1\n0x405491   je 0x405418\n0x405493   mov edi, dword [rsp + 0x3c]\n0x405497   xor r15d, r15d\n0x40549a   call 0x4018e0\n0x40549f   test eax, eax\n0x4054a1   sete r15b\n0x4054a5   jmp 0x405418\n0x4054b0   mov rdi, r12\n0x4054b3   call 0x401980\n0x4054b8   test eax, eax\n0x4054ba   je 0x405884\n0x4054c0   mov byte [rsp + 0x18], 1\n0x4054c5   lea rcx, [rsp + 0x1c]\n0x4054ca   mov rdx, r14\n0x4054cd   lea rdi, [rsp + 0x3c]\n0x4054d2   sub rdx, rbx\n0x4054d5   mov rsi, rbx\n0x4054d8   call 0x4016c0\n0x4054dd   cmp rax, 0xffffffffffffffff\n0x4054e1   mov qword [rsp + 0x30], rax\n0x4054e6   je 0x405598\n0x4054ec   cmp rax, 0xfffffffffffffffe\n0x4054f0   je 0x4055d0\n0x4054f6   test rax, rax\n0x4054f9   jne 0x4055c0\n0x4054ff   mov rbx, qword [rsp + 0x28]\n0x405504   mov qword [rsp + 0x30], 1\n0x40550d   cmp byte [rbx], 0\n0x405510   jne 0x4058a2\n0x405516   mov eax, dword [rsp + 0x3c]\n0x40551a   test eax, eax\n0x40551c   jne 0x4058c0\n0x405522   lea rdi, [rsp + 0x1c]\n0x405527   mov byte [rsp + 0x38], 1\n0x40552c   call 0x401980\n0x405531   test eax, eax\n0x405533   je 0x40553a\n0x405535   mov byte [rsp + 0x18], 0\n0x40553a   mov r14, qword [rsp + 0x10]\n0x40553f   mov r13, qword [rsp + 0x30]\n0x405544   jmp 0x405478\n0x405550   cmp byte [rsp + 0x38], 0\n0x405555   je 0x405418\n0x40555b   mov edi, dword [rsp + 0x3c]\n0x40555f   call 0x4018e0\n0x405564   mov rsi, qword [rsp + 8]\n0x405569   test eax, eax\n0x40556b   mov eax, 2\n0x405570   cmovne r15d, eax\n0x405574   cmovne rsi, rbx\n0x405578   mov qword [rsp + 8], rsi\n0x40557d   jmp 0x405418\n0x405588   mov r15d, 1\n0x40558e   jmp 0x405418\n0x405598   mov qword [rsp + 0x30], 1\n0x4055a1   mov byte [rsp + 0x38], 0\n0x4055a6   mov r13d, 1\n0x4055ac   mov r14, qword [rsp + 0x10]\n0x4055b1   mov rbx, qword [rsp + 0x28]\n0x4055b6   jmp 0x405478\n0x4055c0   mov rbx, qword [rsp + 0x28]\n0x4055c5   jmp 0x405522\n0x4055d0   mov r14, qword [rsp + 0x10]\n0x4055d5   mov rbx, qword [rsp + 0x28]\n0x4055da   mov byte [rsp + 0x38], 0\n0x4055df   mov r13, r14\n0x4055e2   sub r13, rbx\n0x4055e5   mov qword [rsp + 0x30], r13\n0x4055ea   jmp 0x405478\n0x4055f0   mov rbx, qword [rsp + 0x28]\n0x4055f5   mov qword [rsp + 0x30], 1\n0x4055fe   mov byte [rsp + 0x38], 0\n0x405603   mov byte [rsp + 0x24], 1\n0x405608   mov rdi, rbx\n0x40560b   call 0x401690\n0x405610   lea rdx, [rax + 1]\n0x405614   mov rsi, rbx\n0x405617   mov rdi, rbp\n0x40561a   call 0x4018f0\n0x40561f   cmp r14d, 1\n0x405623   jne 0x40539a\n0x405629   mov rsi, qword [rsp + 0x58]\n0x40562e   xor rsi, qword fs:[0x28]\n0x405637   mov rax, rbp\n0x40563a   jne 0x4058bb\n0x405640   add rsp, 0x68\n0x405644   pop rbx\n0x405645   pop rbp\n0x405646   pop r12\n0x405648   pop r13\n0x40564a   pop r14\n0x40564c   pop r15\n0x40564e   ret\n0x405650   cmp r15d, 2\n0x405654   jne 0x405629\n0x405656   mov rax, qword [rsp + 8]\n0x40565b   mov byte [rax], 0\n0x40565e   jmp 0x405629\n0x405660   test r14d, r14d\n0x405663   je 0x4056b5\n0x405665   movzx ebx, byte [rbp]\n0x405669   test bl, bl\n0x40566b   je 0x40587c\n0x405671   call 0x4019a0\n0x405676   mov r12, rbp\n0x405679   mov rax, qword [rax]\n0x40567c   jmp 0x40568d\n0x405680   add r12, 1\n0x405684   movzx ebx, byte [r12]\n0x405689   test bl, bl\n0x40568b   je 0x405694\n0x40568d   test byte [rax + rbx*2 + 1], 0x20\n0x405692   jne 0x405680\n0x405694   mov rdi, r12\n0x405697   call 0x401690\n0x40569c   lea rdx, [rax + 1]\n0x4056a0   mov rsi, r12\n0x4056a3   mov rdi, rbp\n0x4056a6   call 0x4018f0\n0x4056ab   cmp r14d, 1\n0x4056af   je 0x405629\n0x4056b5   mov rdi, rbp\n0x4056b8   call 0x401690\n0x4056bd   lea rbx, [rbp + rax - 1]\n0x4056c2   cmp rbp, rbx\n0x4056c5   ja 0x405629\n0x4056cb   call 0x4019a0\n0x4056d0   mov rdx, qword [rax]\n0x4056d3   jmp 0x4056e8\n0x4056d8   mov byte [rbx], 0\n0x4056db   sub rbx, 1\n0x4056df   cmp rbp, rbx\n0x4056e2   ja 0x405629\n0x4056e8   movzx eax, byte [rbx]\n0x4056eb   test byte [rdx + rax*2 + 1], 0x20\n0x4056f0   jne 0x4056d8\n0x4056f2   jmp 0x405629\n0x405700   mov rdi, rbp\n0x405703   mov qword [rsp + 0x28], rbp\n0x405708   mov rbx, rbp\n0x40570b   call 0x401690\n0x405710   lea r12, [rbp + rax]\n0x405715   mov byte [rsp + 0x18], 0\n0x40571a   mov qword [rsp + 0x1c], 0\n0x405723   mov byte [rsp + 0x24], 0\n0x405728   cmp rbp, r12\n0x40572b   mov qword [rsp + 0x10], r12\n0x405730   jae 0x405608\n0x405736   lea r15, [rsp + 0x1c]\n0x40573b   jmp 0x4057ab\n0x405740   movzx eax, byte [rbx]\n0x405743   mov edx, eax\n0x405745   and eax, 0x1f\n0x405748   shr dl, 5\n0x40574b   and edx, 7\n0x40574e   mov edx, dword [rdx*4 + 0x409f40]\n0x405755   bt edx, eax\n0x405758   jae 0x405830\n0x40575e   mov qword [rsp + 0x30], 1\n0x405767   movsx eax, byte [rbx]\n0x40576a   mov rbx, qword [rsp + 0x28]\n0x40576f   mov byte [rsp + 0x38], 1\n0x405774   mov dword [rsp + 0x3c], eax\n0x405778   mov edi, dword [rsp + 0x3c]\n0x40577c   mov byte [rsp + 0x24], 1\n0x405781   call 0x4018e0\n0x405786   test eax, eax\n0x405788   je 0x405608\n0x40578e   add rbx, qword [rsp + 0x30]\n0x405793   mov r12, qword [rsp + 0x10]\n0x405798   mov byte [rsp + 0x24], 0\n0x40579d   cmp r12, rbx\n0x4057a0   mov qword [rsp + 0x28], rbx\n0x4057a5   jbe 0x405608\n0x4057ab   cmp byte [rsp + 0x18], 0\n0x4057b0   je 0x405740\n0x4057b2   lea rcx, [rsp + 0x1c]\n0x4057b7   mov rdx, r12\n0x4057ba   lea rdi, [rsp + 0x3c]\n0x4057bf   sub rdx, rbx\n0x4057c2   mov rsi, rbx\n0x4057c5   call 0x4016c0\n0x4057ca   cmp rax, 0xffffffffffffffff\n0x4057ce   mov qword [rsp + 0x30], rax\n0x4057d3   je 0x4055f0\n0x4057d9   cmp rax, 0xfffffffffffffffe\n0x4057dd   je 0x405860\n0x4057e3   test rax, rax\n0x4057e6   jne 0x405850\n0x4057e8   mov rbx, qword [rsp + 0x28]\n0x4057ed   mov qword [rsp + 0x30], 1\n0x4057f6   cmp byte [rbx], 0\n0x4057f9   jne 0x4058a2\n0x4057ff   mov edx, dword [rsp + 0x3c]\n0x405803   test edx, edx\n0x405805   jne 0x4058c0\n0x40580b   lea rdi, [rsp + 0x1c]\n0x405810   mov byte [rsp + 0x38], 1\n0x405815   call 0x401980\n0x40581a   test eax, eax\n0x40581c   je 0x405778\n0x405822   mov byte [rsp + 0x18], 0\n0x405827   jmp 0x405778\n0x405830   mov rdi, r15\n0x405833   call 0x401980\n0x405838   test eax, eax\n0x40583a   je 0x405884\n0x40583c   mov byte [rsp + 0x18], 1\n0x405841   jmp 0x4057b2\n0x405850   mov rbx, qword [rsp + 0x28]\n0x405855   jmp 0x40580b\n0x405860   mov rbx, qword [rsp + 0x28]\n0x405865   mov rax, qword [rsp + 0x10]\n0x40586a   mov byte [rsp + 0x38], 0\n0x40586f   sub rax, rbx\n0x405872   mov qword [rsp + 0x30], rax\n0x405877   jmp 0x405603\n0x40587c   mov r12, rbp\n0x40587f   jmp 0x405694\n0x405884   mov ecx, 0x409b50\n0x405889   mov edx, 0x8e\n0x40588e   mov esi, 0x409b38\n0x405893   mov edi, 0x409562\n0x405898   call 0x401700\n0x40589d   call 0x4060b0\n0x4058a2   mov ecx, 0x409b50\n0x4058a7   mov edx, 0xa9\n0x4058ac   mov esi, 0x409b38\n0x4058b1   mov edi, 0x409579\n0x4058b6   call 0x401700\n0x4058bb   call 0x4016a0\n0x4058c0   mov ecx, 0x409b50\n0x4058c5   mov edx, 0xaa\n0x4058ca   mov esi, 0x409b38\n0x4058cf   mov edi, 0x409590\n0x4058d4   call 0x401700\n"
      }, 
      "offset": 4215632
    }, 
    {
      "proc_desc": {
        "name": "sub.fileno_860", 
        "raw_len": 123, 
        "vex_hash": "010000000000000040000000802067006d4ee500694d2c00f2975d00c157420075dc9200f814570141565e009ff8c20053a0df00f68bd800560b53012ba068015512e100a05bfa036726ca010db094006e300b0303a8b1009b1c3c003c9d010011e05500e83f6f00d2733f030bde4500646e0a0019df1a00bba45b00ca9f5400772841006fe817004f0c71012d832702c58af80430aeea002b7bc700328929000c725e00e4537e0049b214018e6933004b702600146d19027eebbf00b9fab700a7aae400debce300f2443a0011182800ff2c7e0198dd1000bbd52c01d416100168c9950093ea4e0087fbe600bcd3930022ef9400f04c64006860310099d80000e9435f00c2526201f4392101", 
        "raw": "QVRVU0iJ++iUj///hcBIid94VOgIkP//hcB1LEiJ3+hcAAAAhcB0POgzjf//RIsgSInfSInF6KWN//9FheR1MFtdQVzDDx8ASInf6FCP//8x9roBAAAAicfoMo7//0iD+P91uEiJ31tdQVzpcI3//0SJZQC4/////+vF", 
        "flow_hash": "010000000000000020000000d9bff40343049f0264dda200f72eca0084836305e4007300cc361c09a708f51b0c082215bab691131f86e60b80c04002a196720658e068040b6df102f4042c0b7292ec1ccc7da70f4c9f1b2190fb2a38ee6990037594ee03e3cced5660c05d1542a8ea10fea8112916023426bd97a407f201170c8364170d763fb329e7406709", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x408860   push r12\n0x408862   push rbp\n0x408863   push rbx\n0x408864   mov rbx, rdi\n0x408867   call 0x401800\n0x40886c   test eax, eax\n0x40886e   mov rdi, rbx\n0x408871   js 0x4088c7\n0x408873   call 0x401880\n0x408878   test eax, eax\n0x40887a   jne 0x4088a8\n0x40887c   mov rdi, rbx\n0x40887f   call 0x4088e0\n0x408884   test eax, eax\n0x408886   je 0x4088c4\n0x408888   call 0x4015c0\n0x40888d   mov r12d, dword [rax]\n0x408890   mov rdi, rbx\n0x408893   mov rbp, rax\n0x408896   call 0x401640\n0x40889b   test r12d, r12d\n0x40889e   jne 0x4088d0\n0x4088a0   pop rbx\n0x4088a1   pop rbp\n0x4088a2   pop r12\n0x4088a4   ret\n0x4088a8   mov rdi, rbx\n0x4088ab   call 0x401800\n0x4088b0   xor esi, esi\n0x4088b2   mov edx, 1\n0x4088b7   mov edi, eax\n0x4088b9   call 0x4016f0\n0x4088be   cmp rax, 0xffffffffffffffff\n0x4088c2   jne 0x40887c\n0x4088c4   mov rdi, rbx\n0x4088c7   pop rbx\n0x4088c8   pop rbp\n0x4088c9   pop r12\n0x4088cb   jmp 0x401640\n0x4088d0   mov dword [rbp], r12d\n0x4088d4   mov eax, 0xffffffff\n0x4088d9   jmp 0x4088a0\n"
      }, 
      "offset": 4229216
    }, 
    {
      "proc_desc": {
        "name": "sub.__strdup_790", 
        "raw_len": 205, 
        "vex_hash": "010000000000000040000000e2a8230051f62600694d2c003ef85b00f16606007de4060044df41013e3e10009ff8c2000a059500f4267400cbbb1a0039bca100d6cb380053e0130185b3ba00a06d8e0022c62e008520d0022985ea00ed78340097ed6e00b6173500526aaa00605c0a01646e0a00d3dbed01c8393d01bc2230007728410047c2fd004f0c71012d8327022d6bd3024826440053e70400328929000c725e0027c15f0049b2140161b6500032b14300c410220078c02c0085dd0700ff22a7001b989b0020c0e00011182800905a9e008dc801005341fc00d4161001a2008a00d95e060087fbe60078efa1000edb4b00fc06080068603100f6138000e9435f005a713d00edd6e700", 
        "raw": "QVRVU4A/AEiJ+3QVSYn0SInWSInVTInn6MPZ//+FwHUfSInf6LeP//9IhcBIicN0X0iJ2FtdQVzDDx+AAAAAAEiJ70yJ5ujVkf//SIP4/0iJxXRPSInfSInG6KH9//9IhcBIicN0SUiJ7+jRkP//hcB5vui4jf//RIsgSInFSInf6IqN//8x20SJZQDro2aQ6JuN///HAAwAAABIidhbXUFcwzHb64pmDx+EAAAAAADoe43//0SLIEiJw0iJ7+h9kP//RIkjMdvpZP///w==", 
        "flow_hash": "0100000000000000200000003edcbd1618cfec1216ef3300f72eca0084836305e4007300ea621914939ccc00e9919f314a7c2b00ae122f1780c04002a1967206d27fc810bd3fb719f4042c0b7292ec1ccc7da70f5c3f98107bbfd82dee6990037594ee031bb7330660c05d1575278f25a9cf5105178e62045e54540f5da1f3160cdf6002763fb329e7406709", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x408790   push r12\n0x408792   push rbp\n0x408793   push rbx\n0x408794   cmp byte [rdi], 0\n0x408797   mov rbx, rdi\n0x40879a   je 0x4087b1\n0x40879c   mov r12, rsi\n0x40879f   mov rsi, rdx\n0x4087a2   mov rbp, rdx\n0x4087a5   mov rdi, r12\n0x4087a8   call 0x406170\n0x4087ad   test eax, eax\n0x4087af   jne 0x4087d0\n0x4087b1   mov rdi, rbx\n0x4087b4   call 0x401770\n0x4087b9   test rax, rax\n0x4087bc   mov rbx, rax\n0x4087bf   je 0x408820\n0x4087c1   mov rax, rbx\n0x4087c4   pop rbx\n0x4087c5   pop rbp\n0x4087c6   pop r12\n0x4087c8   ret\n0x4087d0   mov rdi, rbp\n0x4087d3   mov rsi, r12\n0x4087d6   call 0x4019b0\n0x4087db   cmp rax, 0xffffffffffffffff\n0x4087df   mov rbp, rax\n0x4087e2   je 0x408833\n0x4087e4   mov rdi, rbx\n0x4087e7   mov rsi, rax\n0x4087ea   call 0x408590\n0x4087ef   test rax, rax\n0x4087f2   mov rbx, rax\n0x4087f5   je 0x408840\n0x4087f7   mov rdi, rbp\n0x4087fa   call 0x4018d0\n0x4087ff   test eax, eax\n0x408801   jns 0x4087c1\n0x408803   call 0x4015c0\n0x408808   mov r12d, dword [rax]\n0x40880b   mov rbp, rax\n0x40880e   mov rdi, rbx\n0x408811   call 0x4015a0\n0x408816   xor ebx, ebx\n0x408818   mov dword [rbp], r12d\n0x40881c   jmp 0x4087c1\n0x408820   call 0x4015c0\n0x408825   mov dword [rax], 0xc\n0x40882b   mov rax, rbx\n0x40882e   pop rbx\n0x40882f   pop rbp\n0x408830   pop r12\n0x408832   ret\n0x408833   xor ebx, ebx\n0x408835   jmp 0x4087c1\n0x408840   call 0x4015c0\n0x408845   mov r12d, dword [rax]\n0x408848   mov rbx, rax\n0x40884b   mov rdi, rbp\n0x40884e   call 0x4018d0\n0x408853   mov dword [rbx], r12d\n0x408856   xor ebx, ebx\n0x408858   jmp 0x4087c1\n"
      }, 
      "offset": 4229008
    }, 
    {
      "proc_desc": {
        "name": "sub.__freading_8e0", 
        "raw_len": 64, 
        "vex_hash": "0100000000000000400000009142c0048ec17c00eee52e00e0fa1900f1660600eb933700f81457017cb14d001a7fc70299c7e2007e7d5804dbf90403f9f937012eff1d00775a8b05d5560400962b2600a9cf58021e495b01cd0739007b92200038d7e5029b283e06d0826803605c0a01664f75008d06d5000dcbfb02e97f560041201b016b4125036cb51602b92b64000e8635026012a60038ea33006492de09e9257f02cd49d50241809300c9fee8004b9d1404a18507016f2c4a071eb0bd039a583a0164a879001911dc00bd773c002ea2f102ebb7bd038b8770018d020d07226a3e00b6f6350562f51800bcd39300a7a23f02f04c640068603100f613800004b83c00279210007de9eb05", 
        "raw": "SIX/U0iJ+3QR6JKP//+FwHQI9wMAAQAAdQ5Iid9b6T2P//8PH0QAAEiJ37oBAAAAMfboCQAAAEiJ31vpII///w==", 
        "flow_hash": "0100000000000000200000008ce14137e8f7c916f1bd7e1f463413233075b61763ac650ee3dcc72d1884062acef6d4003e192d1a1f86e60b80c04002d283fe33e719af0a8afa0d1df4042c0b7292ec1c09e8ce12007b4911db01a113dd7cb01332830d77797c4b7e89bc7534bcfea9525a33187bfbf10107fa0ba247f201170c8364170d73ad0e7fce2a2e33", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x4088e0   test rdi, rdi\n0x4088e3   push rbx\n0x4088e4   mov rbx, rdi\n0x4088e7   je 0x4088fa\n0x4088e9   call 0x401880\n0x4088ee   test eax, eax\n0x4088f0   je 0x4088fa\n0x4088f2   test dword [rbx], 0x100\n0x4088f8   jne 0x408908\n0x4088fa   mov rdi, rbx\n0x4088fd   pop rbx\n0x4088fe   jmp 0x401840\n0x408908   mov rdi, rbx\n0x40890b   mov edx, 1\n0x408910   xor esi, esi\n0x408912   call 0x408920\n0x408917   mov rdi, rbx\n0x40891a   pop rbx\n0x40891b   jmp 0x401840\n"
      }, 
      "offset": 4229344
    }, 
    {
      "proc_desc": {
        "name": "sub.malloc_980", 
        "raw_len": 115, 
        "vex_hash": "010000000000000040000000e2a82300e8264e02eee52e00808fc3012a9112025fba280177f33d0042783f0033178b00b1b9fc00f4267400923b42021985cc01f5039e004650b601504a520182b2110022c62e0089592a014c4e320094d359022c5b1802cc842c000f929200a0254401664f750034cfbd008cc88c00a3a62c029b32080399e85a01aa461902fc27ab00f1b1680026f40500e20fc800c8b45200986d1901fe6dfb00655e10003ae9960052598c01c41022000cad5d014a3c2d0099de4100debce300a63ac301627fe3000f28c10034699e006bb40200a5bd1d0368c99500967d2c0357bc980685bbaa01936eda003efbc000df72be00eb331e00df39f0007e261e02f4392101", 
        "raw": "SIn4SIPHEEg5+HdkSIPsCOibjv//SIXASInGdFtIjUgQx0AMSvsVFEi6Af8A/wD/AP9IichI9+JIweoISInQSMHgCEgBwkiJyEgp0EiJwkiLBMWgxGAASIkM1aDEYABIiQZIichIg8QIw2YPH0QAADHAww==", 
        "flow_hash": "010000000000000020000000fd6d4a6ad798f5483a60331aeab5d96f2dd63541134b9718e3dcc72dc43ab13a68061712a5efba12ee35813de6edb60d681eaf24d2bb496c06ab36259b67713c226c6e19cc7da70f007b4911db01a1138a82264a12c6c951aeb77397934ab64034640a976c06db14c3926a1cfa0ba247c59028616fe72c6b3760d48bc49e8610", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x408980   mov rax, rdi\n0x408983   add rdi, 0x10\n0x408987   cmp rax, rdi\n0x40898a   ja 0x4089f0\n0x40898c   sub rsp, 8\n0x408990   call 0x401830\n0x408995   test rax, rax\n0x408998   mov rsi, rax\n0x40899b   je 0x4089f8\n0x40899d   lea rcx, [rax + 0x10]\n0x4089a1   mov dword [rax + 0xc], 0x1415fb4a\n0x4089a8   movabs rdx, 0xff00ff00ff00ff01\n0x4089b2   mov rax, rcx\n0x4089b5   mul rdx\n0x4089b8   shr rdx, 8\n0x4089bc   mov rax, rdx\n0x4089bf   shl rax, 8\n0x4089c3   add rdx, rax\n0x4089c6   mov rax, rcx\n0x4089c9   sub rax, rdx\n0x4089cc   mov rdx, rax\n0x4089cf   mov rax, qword [rax*8 + 0x60c4a0]\n0x4089d7   mov qword [rdx*8 + 0x60c4a0], rcx\n0x4089df   mov qword [rsi], rax\n0x4089e2   mov rax, rcx\n0x4089e5   add rsp, 8\n0x4089e9   ret\n0x4089f0   xor eax, eax\n0x4089f2   ret\n"
      }, 
      "offset": 4229504
    }, 
    {
      "proc_desc": {
        "name": "sub.fileno_920", 
        "raw_len": 87, 
        "vex_hash": "0100000000000000400000002fd6740221a91600eee52e0059d7b2007a635f019bb6510277f33d00beef9801d60bed00cc6de701f68bd8002f9c2001427a1d025512e1000da32e0275129f0367d9610322c62e003b491c01bea5a301a23e80008c7e1602e83f6f0028a976006c653404664f750034cfbd008ed6d602a3a62c020660b301b1d89c0181f78a00fc27ab00c98442005c602d002b7bc700d7b9cd010c725e0086fe9f0085a4d400ba19530050fa5100a31648000b051701556c9d005bde22008ee21c0019758d00c805e501f7364a04a6939a016d992800d4161001a4298600963cc7026975680080778e012b5557020296b90168603100abe4c501df39f0008e990801f4392101", 
        "raw": "SItHCEg5RxB0Bunxj///kEiLRyBIOUcodfBIg39IAHXpQVRVQYnUU0iJ9UiJ++itjv//RIniSInuicfokI3//0iD+P90DIMj70iJg5AAAAAxwFtdQVzD", 
        "flow_hash": "0100000000000000200000008ce14137e8f7c9163a60331a7e7df52c2dd6354163ac650ee3dcc72da130811768061712a5efba121f86e60b549ab908681eaf24e719af0aff8acb219b67713c226c6e19cc7da70ff83e170fdb01a11341211b2327d39722797c4b7e1b09bc01bcfea9526c06db14c030e602fa0ba247f201170c8364170d8d12553ac49e8610", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x408920   mov rax, qword [rdi + 8]\n0x408924   cmp qword [rdi + 0x10], rax\n0x408928   je 0x408930\n0x40892a   jmp 0x401920\n0x408930   mov rax, qword [rdi + 0x20]\n0x408934   cmp qword [rdi + 0x28], rax\n0x408938   jne 0x40892a\n0x40893a   cmp qword [rdi + 0x48], 0\n0x40893f   jne 0x40892a\n0x408941   push r12\n0x408943   push rbp\n0x408944   mov r12d, edx\n0x408947   push rbx\n0x408948   mov rbp, rsi\n0x40894b   mov rbx, rdi\n0x40894e   call 0x401800\n0x408953   mov edx, r12d\n0x408956   mov rsi, rbp\n0x408959   mov edi, eax\n0x40895b   call 0x4016f0\n0x408960   cmp rax, 0xffffffffffffffff\n0x408964   je 0x408972\n0x408966   and dword [rbx], 0xffffffef\n0x408969   mov qword [rbx + 0x90], rax\n0x408970   xor eax, eax\n0x408972   pop rbx\n0x408973   pop rbp\n0x408974   pop r12\n0x408976   ret\n"
      }, 
      "offset": 4229408
    }, 
    {
      "proc_desc": {
        "name": "sub.nl_langinfo_240", 
        "raw_len": 1028, 
        "vex_hash": "01000000000000004000000047c7170021a91600a0280d00ef1a0400c15742007de40600b5ee1e00379f3200865e3100874c2c0043350a0013ff2b00ed8f4300b1d517000cae1400bc3e2f00b9931000d3193300ca651a00568f1300f855160086e92100b6173500ce49050030c47d00250700008a4d1200fcc3020064a02d00ec8b07002296480055c72600db05100079390600be4c0b0025941b00c3cf0000a8380a000239300077435a0092600e00af0c2b00c4102200d51a180085dd07005bde22007b6d6600f2443a0083aa12004d71440074053200ec3f3b005a4e2500b5e80500d95e0600899a3400e70805009fd51b000e080100686031009585150092840700b3551c00971d3900", 
        "raw": "QVdBVr8OAAAAQVVBVFVTSIHsmAAAAGRIiwQlKAAAAEiJhCSIAAAAMcDo4rX//0yLPSNiIABIhcBIicO4u5tAAEgPRNhNhf91IemGAAAAZpBMif/o+LP//0mNbAcBSInv6Ouz//9MjXwFAUEPti9AhO10KUyJ/kiJ3+gitf//hcB0DUCA/Sp1yEGAfwEAdcFMif/oubP//0mNXAcBgDsAuBqfQABID0TYSIuMJIgAAABkSDMMJSgAAABIidgPhTQDAABIgcSYAAAAW11BXEFdQV5BX8O/IJ9AAOhysv//SIXASYnEdAWAOAB1S7gYAAAAQb4ZAAAAQbwAn0AAQYA8BC9JjX4OdEhJjX4PTY1uAejctP//SIXASInFD4RpAgAATInyTInmSInv6IK0//9CxkQ1AC/rO0iJx+gSs///SIXASYnGD4WxAgAAvw4AAADonLT//0iFwEiJxQ+EKQIAAEyJ8kyJ5kiJ702J9eg/tP//So1ELQBIuWNoYXJzZXQuunMAAAC+AAACAEiJ70iJCMdACGFsaWFmiVAMMcDoLrX//4XAQYnED4gBAgAAvsKOQACJx+intP//SIXASYnGD4ThAQAASMcEJAAAAAAPHwBJi0YISTtGEA+DTgEAAEiNUAFJiVYID7Y4jUf3g/gBdt+D/yB02oP/Iw+EdgEAAEyJ9ugZtP//SI1MJFBIjVQkEDHAvjCfQABMiffowLL//4P4AQ+OFgEAAEiNVCQQiwpIg8IEjYH//v7+99EhyCWAgICAdOmJwUyNbCRQwekQqYCAAAAPRMFIjUoCSA9E0YnBAMFIjUQkEEiD2gNIKcJBi3UASYPFBI2G//7+/vfWIfAlgICAgHTnicZIiVQkCMHuEKmAgAAAD0TGSY11AonBTA9E7gDBSI1EJFBJg90DSSnFSIM8JABKjQQqD4X1AAAASI1IAkiNeANIiQwk6B6z//9Ii1QkCEmJxE2F5A+E+AAAAEyLPCRIx8f+////SI10JBBIKddIg8IBTSnvTAH/TAHn6Kiy//9LjXw8/0mNVQFIjXQkUE2J5+iSsv//SYtGCEk7RhAPgrL+//9MiffoDLD//4P4/4nHD4Wq/v//TIn36NkiAABIiwQkSIXAdF5BxgQHAEiJ7+gDsP//6zCQSI1QAUmJVggPtgCD+P90K4P4CnQmSYtGCEk7RhBy4UyJ9+i5r///6+JBv7ubQABMiT3CXiAA6c/8//+D+P8PhSz+///rmUSJ5+hisf//Qb+7m0AA659IAwQkTIn/SI1IAkiNcANIiQwk6IKy//9Ii1QkCEmJxOn//v//TIn/Qb+7m0AA6Hev//9MiffoLyIAAOlf////6GWw//9IjUD/6fj8//8=", 
        "flow_hash": "010000000000000020000000d9bff40343049f0216ef3300f72eca0084836305e4007300ed2fb404939ccc0030ac7b0cec228a071f86e60b2c69e806fe7bef010d7a85020b6df102cfa43507a6069506a7e60b0518920404362f0e0a9c8f03067594ee038e606002bc3b3813096be306a9cf510575154702483b5407134327080cdf600235fc680667a4ef21", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x406240   push r15\n0x406242   push r14\n0x406244   mov edi, 0xe\n0x406249   push r13\n0x40624b   push r12\n0x40624d   push rbp\n0x40624e   push rbx\n0x40624f   sub rsp, 0x98\n0x406256   mov rax, qword fs:[0x28]\n0x40625f   mov qword [rsp + 0x88], rax\n0x406267   xor eax, eax\n0x406269   call 0x401850\n0x40626e   mov r15, qword [rip + 0x206223]\n0x406275   test rax, rax\n0x406278   mov rbx, rax\n0x40627b   mov eax, 0x409bbb\n0x406280   cmove rbx, rax\n0x406284   test r15, r15\n0x406287   jne 0x4062aa\n0x406289   jmp 0x406314\n0x406290   mov rdi, r15\n0x406293   call 0x401690\n0x406298   lea rbp, [r15 + rax + 1]\n0x40629d   mov rdi, rbp\n0x4062a0   call 0x401690\n0x4062a5   lea r15, [rbp + rax + 1]\n0x4062aa   movzx ebp, byte [r15]\n0x4062ae   test bpl, bpl\n0x4062b1   je 0x4062dc\n0x4062b3   mov rsi, r15\n0x4062b6   mov rdi, rbx\n0x4062b9   call 0x4017e0\n0x4062be   test eax, eax\n0x4062c0   je 0x4062cf\n0x4062c2   cmp bpl, 0x2a\n0x4062c6   jne 0x406290\n0x4062c8   cmp byte [r15 + 1], 0\n0x4062cd   jne 0x406290\n0x4062cf   mov rdi, r15\n0x4062d2   call 0x401690\n0x4062d7   lea rbx, [r15 + rax + 1]\n0x4062dc   cmp byte [rbx], 0\n0x4062df   mov eax, 0x409f1a\n0x4062e4   cmove rbx, rax\n0x4062e8   mov rcx, qword [rsp + 0x88]\n0x4062f0   xor rcx, qword fs:[0x28]\n0x4062f9   mov rax, rbx\n0x4062fc   jne 0x406636\n0x406302   add rsp, 0x98\n0x406309   pop rbx\n0x40630a   pop rbp\n0x40630b   pop r12\n0x40630d   pop r13\n0x40630f   pop r14\n0x406311   pop r15\n0x406313   ret\n0x406314   mov edi, 0x409f20\n0x406319   call 0x401590\n0x40631e   test rax, rax\n0x406321   mov r12, rax\n0x406324   je 0x40632b\n0x406326   cmp byte [rax], 0\n0x406329   jne 0x406376\n0x40632b   mov eax, 0x18\n0x406330   mov r14d, 0x19\n0x406336   mov r12d, 0x409f00\n0x40633c   cmp byte [r12 + rax], 0x2f\n0x406341   lea rdi, [r14 + 0xe]\n0x406345   je 0x40638f\n0x406347   lea rdi, [r14 + 0xf]\n0x40634b   lea r13, [r14 + 1]\n0x40634f   call 0x401830\n0x406354   test rax, rax\n0x406357   mov rbp, rax\n0x40635a   je 0x4065c9\n0x406360   mov rdx, r14\n0x406363   mov rsi, r12\n0x406366   mov rdi, rbp\n0x406369   call 0x4017f0\n0x40636e   mov byte [rbp + r14], 0x2f\n0x406374   jmp 0x4063b1\n0x406376   mov rdi, rax\n0x406379   call 0x401690\n0x40637e   test rax, rax\n0x406381   mov r14, rax\n0x406384   jne 0x40663b\n0x40638a   mov edi, 0xe\n0x40638f   call 0x401830\n0x406394   test rax, rax\n0x406397   mov rbp, rax\n0x40639a   je 0x4065c9\n0x4063a0   mov rdx, r14\n0x4063a3   mov rsi, r12\n0x4063a6   mov rdi, rbp\n0x4063a9   mov r13, r14\n0x4063ac   call 0x4017f0\n0x4063b1   lea rax, [rbp + r13]\n0x4063b6   movabs rcx, 0x2e74657372616863\n0x4063c0   mov edx, 0x73\n0x4063c5   mov esi, 0x20000\n0x4063ca   mov rdi, rbp\n0x4063cd   mov qword [rax], rcx\n0x4063d0   mov dword [rax + 8], 0x61696c61\n0x4063d7   mov word [rax + 0xc], dx\n0x4063db   xor eax, eax\n0x4063dd   call 0x401910\n0x4063e2   test eax, eax\n0x4063e4   mov r12d, eax\n0x4063e7   js 0x4065ee\n0x4063ed   mov esi, 0x408ec2\n0x4063f2   mov edi, eax\n0x4063f4   call 0x4018a0\n0x4063f9   test rax, rax\n0x4063fc   mov r14, rax\n0x4063ff   je 0x4065e6\n0x406405   mov qword [rsp], 0\n0x40640d   nop dword [rax]\n0x406410   mov rax, qword [r14 + 8]\n0x406414   cmp rax, qword [r14 + 0x10]\n0x406418   jae 0x40656c\n0x40641e   lea rdx, [rax + 1]\n0x406422   mov qword [r14 + 8], rdx\n0x406426   movzx edi, byte [rax]\n0x406429   lea eax, [rdi - 9]\n0x40642c   cmp eax, 1\n0x40642f   jbe 0x406410\n0x406431   cmp edi, 0x20\n0x406434   je 0x406410\n0x406436   cmp edi, 0x23\n0x406439   je 0x4065b5\n0x40643f   mov rsi, r14\n0x406442   call 0x401860\n0x406447   lea rcx, [rsp + 0x50]\n0x40644c   lea rdx, [rsp + 0x10]\n0x406451   xor eax, eax\n0x406453   mov esi, 0x409f30\n0x406458   mov rdi, r14\n0x40645b   call 0x401720\n0x406460   cmp eax, 1\n0x406463   jle 0x40657f\n0x406469   lea rdx, [rsp + 0x10]\n0x40646e   mov ecx, dword [rdx]\n0x406470   add rdx, 4\n0x406474   lea eax, [rcx - 0x1010101]\n0x40647a   not ecx\n0x40647c   and eax, ecx\n0x40647e   and eax, 0x80808080\n0x406483   je 0x40646e\n0x406485   mov ecx, eax\n0x406487   lea r13, [rsp + 0x50]\n0x40648c   shr ecx, 0x10\n0x40648f   test eax, 0x8080\n0x406494   cmove eax, ecx\n0x406497   lea rcx, [rdx + 2]\n0x40649b   cmove rdx, rcx\n0x40649f   mov ecx, eax\n0x4064a1   add cl, al\n0x4064a3   lea rax, [rsp + 0x10]\n0x4064a8   sbb rdx, 3\n0x4064ac   sub rdx, rax\n0x4064af   mov esi, dword [r13]\n0x4064b3   add r13, 4\n0x4064b7   lea eax, [rsi - 0x1010101]\n0x4064bd   not esi\n0x4064bf   and eax, esi\n0x4064c1   and eax, 0x80808080\n0x4064c6   je 0x4064af\n0x4064c8   mov esi, eax\n0x4064ca   mov qword [rsp + 8], rdx\n0x4064cf   shr esi, 0x10\n0x4064d2   test eax, 0x8080\n0x4064d7   cmove eax, esi\n0x4064da   lea rsi, [r13 + 2]\n0x4064de   mov ecx, eax\n0x4064e0   cmove r13, rsi\n0x4064e4   add cl, al\n0x4064e6   lea rax, [rsp + 0x50]\n0x4064eb   sbb r13, 3\n0x4064ef   sub r13, rax\n0x4064f2   cmp qword [rsp], 0\n0x4064f7   lea rax, [rdx + r13]\n0x4064fb   jne 0x4065f6\n0x406501   lea rcx, [rax + 2]\n0x406505   lea rdi, [rax + 3]\n0x406509   mov qword [rsp], rcx\n0x40650d   call 0x401830\n0x406512   mov rdx, qword [rsp + 8]\n0x406517   mov r12, rax\n0x40651a   test r12, r12\n0x40651d   je 0x40661b\n0x406523   mov r15, qword [rsp]\n0x406527   mov rdi, 0xfffffffffffffffe\n0x40652e   lea rsi, [rsp + 0x10]\n0x406533   sub rdi, rdx\n0x406536   add rdx, 1\n0x40653a   sub r15, r13\n0x40653d   add rdi, r15\n0x406540   add rdi, r12\n0x406543   call 0x4017f0\n0x406548   lea rdi, [r12 + r15 - 1]\n0x40654d   lea rdx, [r13 + 1]\n0x406551   lea rsi, [rsp + 0x50]\n0x406556   mov r15, r12\n0x406559   call 0x4017f0\n0x40655e   mov rax, qword [r14 + 8]\n0x406562   cmp rax, qword [r14 + 0x10]\n0x406566   jb 0x40641e\n0x40656c   mov rdi, r14\n0x40656f   call 0x401580\n0x406574   cmp eax, 0xffffffffffffffff\n0x406577   mov edi, eax\n0x406579   jne 0x406429\n0x40657f   mov rdi, r14\n0x406582   call 0x408860\n0x406587   mov rax, qword [rsp]\n0x40658b   test rax, rax\n0x40658e   je 0x4065ee\n0x406590   mov byte [r15 + rax], 0\n0x406595   mov rdi, rbp\n0x406598   call 0x4015a0\n0x40659d   jmp 0x4065cf\n0x4065a0   lea rdx, [rax + 1]\n0x4065a4   mov qword [r14 + 8], rdx\n0x4065a8   movzx eax, byte [rax]\n0x4065ab   cmp eax, 0xffffffffffffffff\n0x4065ae   je 0x4065db\n0x4065b0   cmp eax, 0xa\n0x4065b3   je 0x4065db\n0x4065b5   mov rax, qword [r14 + 8]\n0x4065b9   cmp rax, qword [r14 + 0x10]\n0x4065bd   jb 0x4065a0\n0x4065bf   mov rdi, r14\n0x4065c2   call 0x401580\n0x4065c7   jmp 0x4065ab\n0x4065c9   mov r15d, 0x409bbb\n0x4065cf   mov qword [rip + 0x205ec2], r15\n0x4065d6   jmp 0x4062aa\n0x4065db   cmp eax, 0xffffffffffffffff\n0x4065de   jne 0x406410\n0x4065e4   jmp 0x40657f\n0x4065e6   mov edi, r12d\n0x4065e9   call 0x401750\n0x4065ee   mov r15d, 0x409bbb\n0x4065f4   jmp 0x406595\n0x4065f6   add rax, qword [rsp]\n0x4065fa   mov rdi, r15\n0x4065fd   lea rcx, [rax + 2]\n0x406601   lea rsi, [rax + 3]\n0x406605   mov qword [rsp], rcx\n0x406609   call 0x401890\n0x40660e   mov rdx, qword [rsp + 8]\n0x406613   mov r12, rax\n0x406616   jmp 0x40651a\n0x40661b   mov rdi, r15\n0x40661e   mov r15d, 0x409bbb\n0x406624   call 0x4015a0\n0x406629   mov rdi, r14\n0x40662c   call 0x408860\n0x406631   jmp 0x406595\n0x406636   call 0x4016a0\n0x40663b   lea rax, [rax - 1]\n0x40663f   jmp 0x40633c\n"
      }, 
      "offset": 4219456
    }, 
    {
      "proc_desc": {
        "name": "fcn.00408d20", 
        "raw_len": 41, 
        "vex_hash": "010000000000000040000000ef0941025fbe2b00b69a9a03c30a5c025aa3b0017de40600f81457017cb14d0089d6b200b1b9fc00826cd9004a5dec03263284043807d706715b9e014f5ffd069569dc04b9ba3a00e4b25008e7abaa03c649aa01c99da5077c20960a8990ab02d45ff902bf65d400fbb10301fafdb40a23dbd003553c9d01a225d90ab19c200210f8de02aa61c20420225c00542f19019363f409132eb000dbf5b200ff6ab90172610700a1e99e0730c5b5017e6ab20785dd07007e45e9018ee21c009e3bad01bd773c00d7cfee002f268a028b877001392dd601b5fba20057bb6c0062f518004a001b024a7c21004c2f6200f9f712076b9b720016cfda0106a605059d991c04", 
        "raw": "SI0FITUgAEiFwHQUSIsQMfbp+ov//2YuDx+EAAAAAAAx0jH26eeL//8=", 
        "flow_hash": "010000000000000020000000a8c7887dd798f548f1bd7e1feab5d96f3c08f793134b9718e3dcc72d036b2e7b68061712a5efba12ee35813de6edb60d681eaf24d2bb496c13d07db29b67713c226c6e1909e8ce12007b4911db01a1138a82264a0ce0be92bdd6a5a2934ab640f60ba1cd6c06db14c3926a1cfa0ba247c590286138cb7ee43760d48bce2a2e33", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x408d20   lea rax, [rip + 0x203521]\n0x408d27   test rax, rax\n0x408d2a   je 0x408d40\n0x408d2c   mov rdx, qword [rax]\n0x408d2f   xor esi, esi\n0x408d31   jmp 0x401930\n0x408d40   xor edx, edx\n0x408d42   xor esi, esi\n0x408d44   jmp 0x401930\n"
      }, 
      "offset": 4230432
    }, 
    {
      "proc_desc": {
        "name": "fcn.00408a00", 
        "raw_len": 134, 
        "vex_hash": "010000000000000040000000265f150021a91600eee52e0004e8c400ac0db800dcf4550050d681005f2ebc029da1ca0099c7e200f68bd80008b27b01e0b217028d84db0145a10c03c4aa2f00962b2600fe4f1800912a8901fcf8d6004a1b8901e4dfdc02e83f6f009bb3c100f2f2ae008e8f6400b4190601fba437020db51e00274a1400b6886402cadb6300d9d91f000e8635026012a60038ea3300efc431008bfc0d008fd224001c13b00119f87a00ca73110093644c00a69b5200556c9d00357f3e013928d201eca61600bd773c00f042f7016e20e4016bb402001f083d01226a3e007b007d0060248b03a1151501936eda000296b901c83c0d00eb331e0008a32f0327921000f4392101", 
        "raw": "SIX/dAmBf/xK+xUUdALzw0iJ+Ei6Af8A/wD/AP9I9+JIweoISInQSMHgCEgBwkiJ+Egp0EiLDMWgxGAASIXJdM1IOc91Eus0Dx+EAAAAAABIOcd0E0iJwUiLQfBIhcB17+urDx9EAABIg+kQSItH8EiD7xBIiQHpJIv//0iNDMWgxGAA6+Y=", 
        "flow_hash": "010000000000000020000000cf9189404a342b5c3a60331a463413233075b617058c770c5d302c0ca1308117cef6d40037b830004ad14066549ab908cbe63e59f3766a10eb38d91d0f46e23e3b5c3b3dcc7da70ff83e170f713ccd19a27c9c5f27d3972259a7b18e1b09bc01ef3048527af20a4bc030e6024763b4522b71b65082e3d1518d12553ac49e8610", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x408a00   test rdi, rdi\n0x408a03   je 0x408a0e\n0x408a05   cmp dword [rdi - 4], 0x1415fb4a\n0x408a0c   je 0x408a10\n0x408a0e   ret\n0x408a10   mov rax, rdi\n0x408a13   movabs rdx, 0xff00ff00ff00ff01\n0x408a1d   mul rdx\n0x408a20   shr rdx, 8\n0x408a24   mov rax, rdx\n0x408a27   shl rax, 8\n0x408a2b   add rdx, rax\n0x408a2e   mov rax, rdi\n0x408a31   sub rax, rdx\n0x408a34   mov rcx, qword [rax*8 + 0x60c4a0]\n0x408a3c   test rcx, rcx\n0x408a3f   je 0x408a0e\n0x408a41   cmp rdi, rcx\n0x408a44   jne 0x408a58\n0x408a46   jmp 0x408a7c\n0x408a50   cmp rdi, rax\n0x408a53   je 0x408a68\n0x408a55   mov rcx, rax\n0x408a58   mov rax, qword [rcx - 0x10]\n0x408a5c   test rax, rax\n0x408a5f   jne 0x408a50\n0x408a61   jmp 0x408a0e\n0x408a68   sub rcx, 0x10\n0x408a6c   mov rax, qword [rdi - 0x10]\n0x408a70   sub rdi, 0x10\n0x408a74   mov qword [rcx], rax\n0x408a77   jmp 0x4015a0\n0x408a7c   lea rcx, [rax*8 + 0x60c4a0]\n0x408a84   jmp 0x408a6c\n"
      }, 
      "offset": 4229632
    }, 
    {
      "proc_desc": {
        "name": "main", 
        "raw_len": 3019, 
        "vex_hash": "01000000000000004000000020ed0b0056ba1600a0280d000f17210042e50500a1eb0000f21705009d640700e2300b009a100400be450500e3030d0097fa0300c1c708009c0f08000026190010070200205e0c005c8a00005cb9000057e40e00443504001390000033562e00b6c113009f600600daa63e00fcc3020077b40f00bb4a0b00a777130087260300a750040088710500be4c0b00ba9a0200c46603004c080300afad0b000e5c0500582b0b006f520f0019f204005d5a000096870400657b1600575716000f9c130030d90b002d4c0c00365207004f990700aa040700b32e0600d95e0600db8c01007a151000b6580b00e1d9030070060300f9560500e5600100e7f10100d6b32600", 
        "raw": "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MEiJ2r8BAAAAMcDoCPj//4sdNqIgAEyLbCQQ6VL9///os/T//4sIugEAAACD+V9AD5TGg/kmdxdIugAASAJAAAAASNPqg+IBSIPyAYPiAUA41g+CDQQAAMZEJD0A6Uz///+AfwEAD4Uh+///xwXWoSAAAAAAADHbxkQkZgHpJPv//0iLFcehIAAx/74DAAAA6JMuAABIicXoO/T//4swMf9IicNIiekxwLoJlUAA6GX3//9MK2wkEA+FUAEAAItEJASJBYChIAAxwEiLvCSAAAAAIEQkZejd8///SIt8JFDo0/P//0iLBWShIACAOC10a4s9VaEgAOhs9f//hcAPiM4BAACDRCREAUiDRCRICItEJEQ5RCRAD49K+v//gHwkZgAPhZQCAAAPtkQkZYPwAUiLjCQ4AQAAZEgzDCUoAAAAD7bAD4UWAwAASIHESAEAAFtdQVxBXUFeQV/DgHgBAHSi641MietIK1wkEA+F3gAAAItEJASJBcygIAC4AQAAAOlE////SItEJHBIO4QkoAAAAA+Fcfr//0iLRCR4SDuEJKgAAAAPhV76//+LPZqgIAAx9roBAAAA6Er0//9IO4Qk0AAAAA+NPvr//0iLFX2gIAC+AwAAADH/6EktAAC6BQAAAEiJw75WjkAAMf/olfP//0iJ2UiJwjH2Mf8xwOgU9v//xkQkZQDp1/7//0iLdCQQTInqvwEAAADoyAgAAEk5xQ+Elf7//zH/ugUAAAC+dI5AAOhO8///izNIicK/AQAAADHA6M31///pbv7//0iLdCQQSInavwEAAADohggAAEg5ww+EB////zH/ugUAAAC+dI5AAOgM8///SInD6FTy//+LMEiJ2r8BAAAAMcDog/X//+nY/v//SIsVr58gAL4DAAAAMf/oeywAAEiJw+gj8v//izBIidm6CZVAADH/McDoUPX//8ZEJGUA6RP+//9IixV3nyAAvgMAAAAx/+hDLAAASInD6Ovx//+LMEiJ2boJlUAAMf8xwOgY9f//xkQkZQDp+v3//0iLRCQoTItsJGhJOcdJD0PHSInFSo18LQDooDoAAEiJw0iJRCRQMdJMAetIidhI93QkWEgp0+soZg8fRAAASIXAD4TYAAAASInCSInevwEAAADohwcAAEk5xQ+FkAAAAIs93J4gAEiJ6kiJ3ujtLQAASIP4/0mJxXXESIsVxZ4gAL4DAAAAMf/okSsAAEiJw+g58f//izBIidm6CZVAADH/McDoZvT//0QgZCRl6R/9//8x/+il8v//hcAPiV39//8x/7oFAAAAvpaOQADorPH//0iJw+j08P//izBIidq/AQAAADHA6CP0///pLv3//zH/ugUAAAC+dI5AAOh98f//SYnF6MXw//+LMEyJ6r8BAAAAMcDo9PP//+lB////QbwBAAAA64Ex/7oFAAAAvkaOQADoRvH//0mJxOiO8P//izBMieK/AQAAADHA6L3z///pXPb//+hT8f//SIs15J0gAL8EAAAASIlEJAjojSkAALoFAAAAvoCOQAAx/0iJw+j58P//TItMJAhIicJIidkxwDH/QYsx6HLz//+LRCQEiQWYnSAAMcDpE/z//0iLPZKdIADpwfb//w==", 
        "flow_hash": "010000000000000020000000e4e6d30043049f0216ef330093193f0054bea100e40073001d949a00939ccc00cef6d4004a7c2b0013dd3702649150014b43dd00735f240273b69d0178179300273fd00cfec2a70165e49201362f0e0ae520ee017594ee0326d800011267c301939b7a0fd0e33202fba8710038e77302bc91d5060cdf600293889f05614b1200", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x4019e0   push r15  ; section 14 va=0x004019e0 pa=0x000019e0 sz=29545 vsz=29545 rwx=--r-x .text\n0x4019e2   push r14\n0x4019e4   xor r14d, r14d\n0x4019e7   push r13\n0x4019e9   push r12\n0x4019eb   push rbp\n0x4019ec   push rbx\n0x4019ed   mov rbx, rsi\n0x4019f0   sub rsp, 0x148\n0x4019f7   mov dword [rsp + 0x40], edi\n0x4019fb   mov rax, qword fs:[0x28]\n0x401a04   mov qword [rsp + 0x138], rax\n0x401a0c   xor eax, eax\n0x401a0e   call 0x401940\n0x401a13   mov rdi, qword [rbx]\n0x401a16   mov ebp, eax\n0x401a18   call 0x402c50\n0x401a1d   mov esi, 0x409bbb\n0x401a22   mov edi, 6\n0x401a27   call 0x4018b0\n0x401a2c   mov esi, 0x408df0\n0x401a31   mov edi, 0x408de2\n0x401a36   call 0x401650\n0x401a3b   mov edi, 0x408de2\n0x401a40   call 0x401630\n0x401a45   mov edi, 0x402ae0\n0x401a4a   call 0x408d20\n0x401a4f   mov byte [rsp + 0x3b], 0\n0x401a54   mov byte [rsp + 0x3e], 0\n0x401a59   mov byte [rsp + 0x3f], 0\n0x401a5e   mov byte [rsp + 0x64], 0\n0x401a63   mov byte [rsp + 0x3c], 0\n0x401a68   mov edi, dword [rsp + 0x40]\n0x401a6c   xor r8d, r8d\n0x401a6f   mov ecx, 0x4093c0\n0x401a74   mov edx, 0x408e3b\n0x401a79   mov rsi, rbx\n0x401a7c   call 0x4016b0\n0x401a81   cmp eax, 0xffffffffffffffff\n0x401a84   je 0x401b85\n0x401a8a   cmp eax, 0x62\n0x401a8d   je 0x401b74\n0x401a93   jle 0x401ab7\n0x401a95   cmp eax, 0x73\n0x401a98   je 0x401b6a\n0x401a9e   jle 0x401b05\n0x401aa0   cmp eax, 0x75\n0x401aa3   je 0x401a68\n0x401aa5   jl 0x401b19\n0x401aa7   cmp eax, 0x76\n0x401aaa   jne 0x401b7b\n0x401ab0   mov byte [rsp + 0x3b], 1\n0x401ab5   jmp 0x401a68\n0x401ab7   cmp eax, 0x41\n0x401aba   je 0x401af0\n0x401abc   jg 0x401ad7\n0x401abe   cmp eax, 0xffffff7d\n0x401ac3   je 0x401b29\n0x401ac5   cmp eax, 0xffffff7e\n0x401aca   jne 0x401b7b\n0x401ad0   xor edi, edi\n0x401ad2   call 0x402730\n0x401ad7   cmp eax, 0x45\n0x401ada   je 0x401afb\n0x401adc   cmp eax, 0x54\n0x401adf   jne 0x401b7b\n0x401ae5   mov r14d, 1\n0x401aeb   jmp 0x401a68\n0x401af0   mov r14d, 1\n0x401af6   mov byte [rsp + 0x3b], 1\n0x401afb   mov byte [rsp + 0x3e], 1\n0x401b00   jmp 0x401a68\n0x401b05   cmp eax, 0x65\n0x401b08   je 0x401af6\n0x401b0a   cmp eax, 0x6e\n0x401b0d   jne 0x401b7b\n0x401b0f   mov byte [rsp + 0x3c], 1\n0x401b14   jmp 0x401a68\n0x401b19   mov r14d, 1\n0x401b1f   mov byte [rsp + 0x3b], 1\n0x401b24   jmp 0x401a68\n0x401b29   mov esi, 0x408e02\n0x401b2e   mov edi, 0x408e15\n0x401b33   call 0x403700\n0x401b38   mov rdi, qword [rip + 0x20a7c9]\n0x401b3f   push rcx\n0x401b40   mov r8, rax\n0x401b43   mov rcx, qword [rip + 0x20a72e]\n0x401b4a   push 0\n0x401b4c   mov r9d, 0x408e27\n0x401b52   mov edx, 0x408dde\n0x401b57   mov esi, 0x408d66\n0x401b5c   xor eax, eax\n0x401b5e   call 0x405d80\n0x401b63   xor edi, edi\n0x401b65   call 0x401950\n0x401b6a   mov byte [rsp + 0x3f], 1\n0x401b6f   jmp 0x401a68\n0x401b74   mov byte [rsp + 0x64], 1\n0x401b79   jmp 0x401b0f\n0x401b7b   mov edi, 1\n0x401b80   call 0x402730\n0x401b85   lea rdx, [rsp + 0xa0]\n0x401b8d   mov esi, 1\n0x401b92   mov edi, 1\n0x401b97   call 0x401870\n0x401b9c   test eax, eax\n0x401b9e   js 0x402519\n0x401ba4   mov rax, qword [rsp + 0xd8]\n0x401bac   movabs rdx, 0x1ffffffffffe0000\n0x401bb6   mov qword [rip + 0x20a777], 0x409552\n0x401bc1   mov byte [rsp + 0x66], 0\n0x401bc6   mov byte [rsp + 0x65], 1\n0x401bcb   lea rcx, [rax - 0x20000]\n0x401bd2   cmp rcx, rdx\n0x401bd5   mov edx, 0x20000\n0x401bda   cmovbe rdx, rax\n0x401bde   movsxd rax, ebp\n0x401be1   mov rcx, rax\n0x401be4   mov qword [rsp + 0x58], rax\n0x401be9   mov rax, qword [rsp + 0xa0]\n0x401bf1   mov r15, rdx\n0x401bf4   mov qword [rsp + 0x70], rax\n0x401bf9   mov rax, qword [rsp + 0xa8]\n0x401c01   mov qword [rsp + 0x78], rax\n0x401c06   mov eax, dword [rsp + 0xb8]\n0x401c0d   and eax, 0xf000\n0x401c12   mov dword [rsp + 0x60], eax\n0x401c16   movzx eax, byte [rsp + 0x3e]\n0x401c1b   xor eax, 1\n0x401c1e   mov byte [rsp + 0x67], al\n0x401c22   movsxd rax, dword [rip + 0x20a6e7]\n0x401c29   mov dword [rsp + 0x44], eax\n0x401c2d   lea rax, [rbx + rax*8]\n0x401c31   mov qword [rsp + 0x48], rax\n0x401c36   mov rax, rcx\n0x401c39   lea rcx, [rcx + rdx + 0x12]\n0x401c3e   sub rax, 1\n0x401c42   mov qword [rsp + 0x88], rcx\n0x401c4a   mov qword [rsp + 0x68], rax\n0x401c4f   mov ecx, dword [rsp + 0x40]\n0x401c53   cmp dword [rsp + 0x44], ecx\n0x401c57   jge 0x40259f\n0x401c5d   mov rax, qword [rsp + 0x48]\n0x401c62   mov rdi, qword [rax]\n0x401c65   mov qword [rip + 0x20a6cc], rdi\n0x401c6c   cmp byte [rdi], 0x2d\n0x401c6f   je 0x40214a\n0x401c75   xor esi, esi\n0x401c77   xor eax, eax\n0x401c79   call 0x401910\n0x401c7e   test eax, eax\n0x401c80   mov ebx, eax\n0x401c82   mov dword [rip + 0x20a6ac], eax\n0x401c88   js 0x4023ba\n0x401c8e   lea rdx, [rsp + 0xa0]\n0x401c96   mov esi, ebx\n0x401c98   mov edi, 1\n0x401c9d   call 0x401870\n0x401ca2   test eax, eax\n0x401ca4   js 0x402382\n0x401caa   mov rax, qword [rsp + 0xd8]\n0x401cb2   movabs rdx, 0x1ffffffffffe0000\n0x401cbc   mov edi, ebx\n0x401cbe   lea rcx, [rax - 0x20000]\n0x401cc5   cmp rcx, rdx\n0x401cc8   mov edx, 0x20000\n0x401ccd   mov ecx, 2\n0x401cd2   cmovbe rdx, rax\n0x401cd6   xor esi, esi\n0x401cd8   mov qword [rsp + 0x28], rdx\n0x401cdd   xor edx, edx\n0x401cdf   call 0x402b90\n0x401ce4   cmp dword [rsp + 0x60], 0x8000\n0x401cec   je 0x40226e\n0x401cf2   movzx ecx, byte [rsp + 0x67]\n0x401cf7   cmp byte [rsp + 0x3c], cl\n0x401cfb   jae 0x401d16\n0x401cfd   mov eax, r14d\n0x401d00   xor eax, 1\n0x401d03   cmp byte [rsp + 0x3b], al\n0x401d07   setae r12b\n0x401d0b   or r12b, byte [rsp + 0x3f]\n0x401d10   je 0x4023f2\n0x401d16   mov rbx, qword [rsp + 0x58]\n0x401d1b   mov rbp, qword [rsp + 0x28]\n0x401d20   mov rdi, rbx\n0x401d23   add rdi, rbp\n0x401d26   call 0x405eb0\n0x401d2b   mov rcx, qword [rsp + 0x88]\n0x401d33   mov r13, rax\n0x401d36   mov qword [rsp + 0x50], rax\n0x401d3b   lea rdi, [rcx + rbp*4]\n0x401d3f   call 0x405eb0\n0x401d44   mov rsi, qword [rsp + 0x68]\n0x401d49   mov r12, rax\n0x401d4c   mov qword [rsp + 0x80], rax\n0x401d54   xor edx, edx\n0x401d56   mov byte [rsp + 0x3d], 1\n0x401d5b   add r12, rsi\n0x401d5e   add r13, rsi\n0x401d61   mov rax, r12\n0x401d64   div rbx\n0x401d67   mov rax, r13\n0x401d6a   sub r12, rdx\n0x401d6d   xor edx, edx\n0x401d6f   div rbx\n0x401d72   mov eax, dword [rip + 0x20a5b8]\n0x401d78   mov rcx, r12\n0x401d7b   mov qword [rsp + 0x10], r12\n0x401d80   mov dword [rsp + 4], eax\n0x401d84   sub r13, rdx\n0x401d87   lea rax, [r13 + 1]\n0x401d8b   mov rdi, r13\n0x401d8e   mov qword [rsp + 0x20], r13\n0x401d93   mov qword [rsp + 8], rdi\n0x401d98   mov r13, rcx\n0x401d9b   mov r12, rax\n0x401d9e   mov qword [rsp + 0x30], rax\n0x401da3   mov rax, rcx\n0x401da6   add rax, r15\n0x401da9   mov qword [rsp + 0x18], rax\n0x401dae   nop\n0x401db0   cmp qword [rsp + 0x18], r13\n0x401db5   ja 0x401e25\n0x401db7   mov rbp, qword [rsp + 0x10]\n0x401dbc   nop dword [rax]\n0x401dc0   mov rdx, r15\n0x401dc3   mov rsi, rbp\n0x401dc6   mov edi, 1\n0x401dcb   call 0x402bd0\n0x401dd0   cmp r15, rax\n0x401dd3   je 0x401dff\n0x401dd5   mov edx, 5\n0x401dda   mov esi, 0x408e74\n0x401ddf   xor edi, edi\n0x401de1   call 0x401670\n0x401de6   mov rbx, rax\n0x401de9   call 0x4015c0\n0x401dee   mov esi, dword [rax]\n0x401df0   mov rdx, rbx\n0x401df3   mov edi, 1\n0x401df8   xor eax, eax\n0x401dfa   call 0x401900\n0x401dff   add rbp, r15\n0x401e02   mov rbx, r13\n0x401e05   sub rbx, rbp\n0x401e08   cmp r15, rbx\n0x401e0b   jbe 0x401dc0\n0x401e0d   mov rsi, rbp\n0x401e10   mov rbp, qword [rsp + 0x10]\n0x401e15   mov rdx, rbx\n0x401e18   lea r13, [rbp + rbx]\n0x401e1d   mov rdi, rbp\n0x401e20   call 0x4018f0\n0x401e25   cmp r12, qword [rsp + 8]\n0x401e2a   jbe 0x401fe0\n0x401e30   cmp byte [rsp + 0x3d], 0\n0x401e35   mov dword [rsp + 0x9c], 0\n0x401e40   jne 0x402076\n0x401e46   mov rbx, r13\n0x401e49   sub rbx, qword [rsp + 0x10]\n0x401e4e   jne 0x4020b0\n0x401e54   mov ebx, dword [rip + 0x20a4da]\n0x401e5a   mov rdx, qword [rsp + 0x28]\n0x401e5f   mov rsi, qword [rsp + 0x20]\n0x401e64   mov edi, ebx\n0x401e66   call 0x405250\n0x401e6b   cmp rax, 0xffffffffffffffff\n0x401e6f   je 0x40216a\n0x401e75   test rax, rax\n0x401e78   je 0x40224c\n0x401e7e   mov rsi, qword [rsp + 0x20]\n0x401e83   mov r12, qword [rsp + 0x30]\n0x401e88   add rax, rsi\n0x401e8b   mov qword [rsp + 8], rax\n0x401e90   mov byte [rax], 0xa\n0x401e93   mov rax, rsi\n0x401e96   movzx edx, byte [rax]\n0x401e99   cmp dl, 0xa\n0x401e9c   je 0x401db0\n0x401ea2   mov eax, dword [rsp + 4]\n0x401ea6   test eax, eax\n0x401ea8   js 0x401ed1\n0x401eaa   cmp byte [rsp + 0x3c], 0\n0x401eaf   je 0x401ed1\n0x401eb1   mov byte [rsp + 4], dl\n0x401eb5   call 0x4026b0\n0x401eba   mov rsi, qword [rip + 0x20a397]\n0x401ec1   mov rdi, r13\n0x401ec4   call 0x401660\n0x401ec9   movzx edx, byte [rsp + 4]\n0x401ece   mov r13, rax\n0x401ed1   cmp byte [rsp + 0x3b], 0\n0x401ed6   je 0x401efd\n0x401ed8   jmp 0x401f2f\n0x401ee0   test r14b, r14b\n0x401ee3   je 0x401f02\n0x401ee5   mov byte [r13], 0x5e\n0x401eea   mov byte [r13 + 1], 0x49\n0x401eef   add r13, 2\n0x401ef3   add r12, 1\n0x401ef7   movzx edx, byte [r12 - 1]\n0x401efd   cmp dl, 9\n0x401f00   je 0x401ee0\n0x401f02   cmp dl, 0xa\n0x401f05   je 0x401fd0\n0x401f0b   mov byte [r13], dl\n0x401f0f   add r13, 1\n0x401f13   jmp 0x401ef3\n0x401f18   cmp dl, 0x7e\n0x401f1b   ja 0x401f50\n0x401f1d   mov byte [r13], dl\n0x401f21   add r13, 1\n0x401f25   add r12, 1\n0x401f29   movzx edx, byte [r12 - 1]\n0x401f2f   cmp dl, 0x1f\n0x401f32   ja 0x401f18\n0x401f34   cmp dl, 9\n0x401f37   sete al\n0x401f3a   cmp r14b, al\n0x401f3d   jae 0x401f80\n0x401f3f   mov byte [r13], 9\n0x401f44   add r13, 1\n0x401f48   jmp 0x401f25\n0x401f50   cmp dl, 0x7f\n0x401f53   je 0x401fb8\n0x401f55   cmp dl, 0x9f\n0x401f58   mov byte [r13], 0x4d\n0x401f5d   mov byte [r13 + 1], 0x2d\n0x401f62   jbe 0x401fa0\n0x401f64   cmp dl, 0xff\n0x401f67   je 0x402010\n0x401f6d   add edx, 0xffffffffffffff80\n0x401f70   add r13, 3\n0x401f74   mov byte [r13 - 1], dl\n0x401f78   jmp 0x401f25\n0x401f80   cmp dl, 0xa\n0x401f83   je 0x401fd0\n0x401f85   add edx, 0x40\n0x401f88   mov byte [r13], 0x5e\n0x401f8d   add r13, 2\n0x401f91   mov byte [r13 - 1], dl\n0x401f95   jmp 0x401f25\n0x401fa0   sub edx, 0x40\n0x401fa3   mov byte [r13 + 2], 0x5e\n0x401fa8   add r13, 4\n0x401fac   mov byte [r13 - 1], dl\n0x401fb0   jmp 0x401f25\n0x401fb8   mov byte [r13], 0x5e\n0x401fbd   mov byte [r13 + 1], 0x3f\n0x401fc2   add r13, 2\n0x401fc6   jmp 0x401f25\n0x401fd0   mov dword [rsp + 4], 0xffffffff\n0x401fd8   jmp 0x401db0\n0x401fe0   add dword [rsp + 4], 1\n0x401fe5   mov eax, dword [rsp + 4]\n0x401fe9   test eax, eax\n0x401feb   jle 0x402050\n0x401fed   cmp eax, 1\n0x401ff0   je 0x40202b\n0x401ff2   cmp byte [rsp + 0x3f], 0\n0x401ff7   je 0x402023\n0x401ff9   movzx edx, byte [r12]\n0x401ffe   mov dword [rsp + 4], 2\n0x402006   add r12, 1\n0x40200a   jmp 0x401e99\n0x402010   mov byte [r13 + 2], 0x5e\n0x402015   mov byte [r13 + 3], 0x3f\n0x40201a   add r13, 4\n0x40201e   jmp 0x401f25\n0x402023   mov dword [rsp + 4], 2\n0x40202b   movzx ecx, byte [rsp + 0x64]\n0x402030   cmp byte [rsp + 0x3c], cl\n0x402034   jbe 0x402050\n0x402036   call 0x4026b0\n0x40203b   mov rsi, qword [rip + 0x20a216]\n0x402042   mov rdi, r13\n0x402045   call 0x401660\n0x40204a   mov r13, rax\n0x40204d   nop dword [rax]\n0x402050   cmp byte [rsp + 0x3e], 0\n0x402055   mov rax, r13\n0x402058   je 0x402063\n0x40205a   add rax, 1\n0x40205e   mov byte [r13], 0x24\n0x402063   lea r13, [rax + 1]\n0x402067   mov byte [rax], 0xa\n0x40206a   mov rax, r12\n0x40206d   add r12, 1\n0x402071   jmp 0x401e96\n0x402076   mov ebx, dword [rip + 0x20a2b8]\n0x40207c   lea rdx, [rsp + 0x9c]\n0x402084   xor eax, eax\n0x402086   mov esi, 0x541b\n0x40208b   mov edi, ebx\n0x40208d   call 0x401730\n0x402092   test eax, eax\n0x402094   js 0x402108\n0x402096   mov edx, dword [rsp + 0x9c]\n0x40209d   test edx, edx\n0x40209f   jne 0x401e5a\n0x4020a5   jmp 0x401e46\n0x4020b0   mov r13, qword [rsp + 0x10]\n0x4020b5   mov rdx, rbx\n0x4020b8   mov edi, 1\n0x4020bd   mov rsi, r13\n0x4020c0   call 0x402bd0\n0x4020c5   cmp rbx, rax\n0x4020c8   je 0x401e54\n0x4020ce   mov edx, 5\n0x4020d3   mov esi, 0x408e74\n0x4020d8   xor edi, edi\n0x4020da   call 0x401670\n0x4020df   mov rbx, rax\n0x4020e2   call 0x4015c0\n0x4020e7   mov esi, dword [rax]\n0x4020e9   mov rdx, rbx\n0x4020ec   mov edi, 1\n0x4020f1   xor eax, eax\n0x4020f3   call 0x401900\n0x4020f8   mov ebx, dword [rip + 0x20a236]\n0x4020fe   mov r13, qword [rsp + 0x10]\n0x402103   jmp 0x401e5a\n0x402108   call 0x4015c0\n0x40210d   mov ecx, dword [rax]\n0x40210f   mov edx, 1\n0x402114   cmp ecx, 0x5f\n0x402117   sete sil\n0x40211b   cmp ecx, 0x26\n0x40211e   ja 0x402137\n0x402120   movabs rdx, 0x4002480000\n0x40212a   shr rdx, cl\n0x40212d   and edx, 1\n0x402130   xor rdx, 1\n0x402134   and edx, 1\n0x402137   cmp sil, dl\n0x40213a   jb 0x40254d\n0x402140   mov byte [rsp + 0x3d], 0\n0x402145   jmp 0x402096\n0x40214a   cmp byte [rdi + 1], 0\n0x40214e   jne 0x401c75\n0x402154   mov dword [rip + 0x20a1d6], 0\n0x40215e   xor ebx, ebx\n0x402160   mov byte [rsp + 0x66], 1\n0x402165   jmp 0x401c8e\n0x40216a   mov rdx, qword [rip + 0x20a1c7]\n0x402171   xor edi, edi\n0x402173   mov esi, 3\n0x402178   call 0x405010\n0x40217d   mov rbp, rax\n0x402180   call 0x4015c0\n0x402185   mov esi, dword [rax]\n0x402187   xor edi, edi\n0x402189   mov rbx, rax\n0x40218c   mov rcx, rbp\n0x40218f   xor eax, eax\n0x402191   mov edx, 0x409509\n0x402196   call 0x401900\n0x40219b   sub r13, qword [rsp + 0x10]\n0x4021a0   jne 0x4022f6\n0x4021a6   mov eax, dword [rsp + 4]\n0x4021aa   mov dword [rip + 0x20a180], eax\n0x4021b0   xor eax, eax\n0x4021b2   mov rdi, qword [rsp + 0x80]\n0x4021ba   and byte [rsp + 0x65], al\n0x4021be   call 0x4015a0\n0x4021c3   mov rdi, qword [rsp + 0x50]\n0x4021c8   call 0x4015a0\n0x4021cd   mov rax, qword [rip + 0x20a164]\n0x4021d4   cmp byte [rax], 0x2d\n0x4021d7   je 0x402244\n0x4021d9   mov edi, dword [rip + 0x20a155]\n0x4021df   call 0x401750\n0x4021e4   test eax, eax\n0x4021e6   js 0x4023ba\n0x4021ec   add dword [rsp + 0x44], 1\n0x4021f1   add qword [rsp + 0x48], 8\n0x4021f7   mov eax, dword [rsp + 0x44]\n0x4021fb   cmp dword [rsp + 0x40], eax\n0x4021ff   jg 0x401c4f\n0x402205   cmp byte [rsp + 0x66], 0\n0x40220a   jne 0x4024a4\n0x402210   movzx eax, byte [rsp + 0x65]\n0x402215   xor eax, 1\n0x402218   mov rcx, qword [rsp + 0x138]\n0x402220   xor rcx, qword fs:[0x28]\n0x402229   movzx eax, al\n0x40222c   jne 0x402548\n0x402232   add rsp, 0x148\n0x402239   pop rbx\n0x40223a   pop rbp\n0x40223b   pop r12\n0x40223d   pop r13\n0x40223f   pop r14\n0x402241   pop r15\n0x402243   ret\n0x402244   cmp byte [rax + 1], 0\n0x402248   je 0x4021ec\n0x40224a   jmp 0x4021d9\n0x40224c   mov rbx, r13\n0x40224f   sub rbx, qword [rsp + 0x10]\n0x402254   jne 0x402338\n0x40225a   mov eax, dword [rsp + 4]\n0x40225e   mov dword [rip + 0x20a0cc], eax\n0x402264   mov eax, 1\n0x402269   jmp 0x4021b2\n0x40226e   mov rax, qword [rsp + 0x70]\n0x402273   cmp rax, qword [rsp + 0xa0]\n0x40227b   jne 0x401cf2\n0x402281   mov rax, qword [rsp + 0x78]\n0x402286   cmp rax, qword [rsp + 0xa8]\n0x40228e   jne 0x401cf2\n0x402294   mov edi, dword [rip + 0x20a09a]\n0x40229a   xor esi, esi\n0x40229c   mov edx, 1\n0x4022a1   call 0x4016f0\n0x4022a6   cmp rax, qword [rsp + 0xd0]\n0x4022ae   jge 0x401cf2\n0x4022b4   mov rdx, qword [rip + 0x20a07d]\n0x4022bb   mov esi, 3\n0x4022c0   xor edi, edi\n0x4022c2   call 0x405010\n0x4022c7   mov edx, 5\n0x4022cc   mov rbx, rax\n0x4022cf   mov esi, 0x408e56\n0x4022d4   xor edi, edi\n0x4022d6   call 0x401670\n0x4022db   mov rcx, rbx\n0x4022de   mov rdx, rax\n0x4022e1   xor esi, esi\n0x4022e3   xor edi, edi\n0x4022e5   xor eax, eax\n0x4022e7   call 0x401900\n0x4022ec   mov byte [rsp + 0x65], 0\n0x4022f1   jmp 0x4021cd\n0x4022f6   mov rsi, qword [rsp + 0x10]\n0x4022fb   mov rdx, r13\n0x4022fe   mov edi, 1\n0x402303   call 0x402bd0\n0x402308   cmp r13, rax\n0x40230b   je 0x4021a6\n0x402311   xor edi, edi\n0x402313   mov edx, 5\n0x402318   mov esi, 0x408e74\n0x40231d   call 0x401670\n0x402322   mov esi, dword [rbx]\n0x402324   mov rdx, rax\n0x402327   mov edi, 1\n0x40232c   xor eax, eax\n0x40232e   call 0x401900\n0x402333   jmp 0x4021a6\n0x402338   mov rsi, qword [rsp + 0x10]\n0x40233d   mov rdx, rbx\n0x402340   mov edi, 1\n0x402345   call 0x402bd0\n0x40234a   cmp rbx, rax\n0x40234d   je 0x40225a\n0x402353   xor edi, edi\n0x402355   mov edx, 5\n0x40235a   mov esi, 0x408e74\n0x40235f   call 0x401670\n0x402364   mov rbx, rax\n0x402367   call 0x4015c0\n0x40236c   mov esi, dword [rax]\n0x40236e   mov rdx, rbx\n0x402371   mov edi, 1\n0x402376   xor eax, eax\n0x402378   call 0x401900\n0x40237d   jmp 0x40225a\n0x402382   mov rdx, qword [rip + 0x209faf]\n0x402389   mov esi, 3\n0x40238e   xor edi, edi\n0x402390   call 0x405010\n0x402395   mov rbx, rax\n0x402398   call 0x4015c0\n0x40239d   mov esi, dword [rax]\n0x40239f   mov rcx, rbx\n0x4023a2   mov edx, 0x409509\n0x4023a7   xor edi, edi\n0x4023a9   xor eax, eax\n0x4023ab   call 0x401900\n0x4023b0   mov byte [rsp + 0x65], 0\n0x4023b5   jmp 0x4021cd\n0x4023ba   mov rdx, qword [rip + 0x209f77]\n0x4023c1   mov esi, 3\n0x4023c6   xor edi, edi\n0x4023c8   call 0x405010\n0x4023cd   mov rbx, rax\n0x4023d0   call 0x4015c0\n0x4023d5   mov esi, dword [rax]\n0x4023d7   mov rcx, rbx\n0x4023da   mov edx, 0x409509\n0x4023df   xor edi, edi\n0x4023e1   xor eax, eax\n0x4023e3   call 0x401900\n0x4023e8   mov byte [rsp + 0x65], 0\n0x4023ed   jmp 0x4021ec\n0x4023f2   mov rax, qword [rsp + 0x28]\n0x4023f7   mov r13, qword [rsp + 0x68]\n0x4023fc   cmp r15, rax\n0x4023ff   cmovae rax, r15\n0x402403   mov rbp, rax\n0x402406   lea rdi, [rbp + r13]\n0x40240b   call 0x405eb0\n0x402410   mov rbx, rax\n0x402413   mov qword [rsp + 0x50], rax\n0x402418   xor edx, edx\n0x40241a   add rbx, r13\n0x40241d   mov rax, rbx\n0x402420   div qword [rsp + 0x58]\n0x402425   sub rbx, rdx\n0x402428   jmp 0x402452\n0x402430   test rax, rax\n0x402433   je 0x402511\n0x402439   mov rdx, rax\n0x40243c   mov rsi, rbx\n0x40243f   mov edi, 1\n0x402444   call 0x402bd0\n0x402449   cmp r13, rax\n0x40244c   jne 0x4024e2\n0x402452   mov edi, dword [rip + 0x209edc]\n0x402458   mov rdx, rbp\n0x40245b   mov rsi, rbx\n0x40245e   call 0x405250\n0x402463   cmp rax, 0xffffffffffffffff\n0x402467   mov r13, rax\n0x40246a   jne 0x402430\n0x40246c   mov rdx, qword [rip + 0x209ec5]\n0x402473   mov esi, 3\n0x402478   xor edi, edi\n0x40247a   call 0x405010\n0x40247f   mov rbx, rax\n0x402482   call 0x4015c0\n0x402487   mov esi, dword [rax]\n0x402489   mov rcx, rbx\n0x40248c   mov edx, 0x409509\n0x402491   xor edi, edi\n0x402493   xor eax, eax\n0x402495   call 0x401900\n0x40249a   and byte [rsp + 0x65], r12b\n0x40249f   jmp 0x4021c3\n0x4024a4   xor edi, edi\n0x4024a6   call 0x401750\n0x4024ab   test eax, eax\n0x4024ad   jns 0x402210\n0x4024b3   xor edi, edi\n0x4024b5   mov edx, 5\n0x4024ba   mov esi, 0x408e96\n0x4024bf   call 0x401670\n0x4024c4   mov rbx, rax\n0x4024c7   call 0x4015c0\n0x4024cc   mov esi, dword [rax]\n0x4024ce   mov rdx, rbx\n0x4024d1   mov edi, 1\n0x4024d6   xor eax, eax\n0x4024d8   call 0x401900\n0x4024dd   jmp 0x402210\n0x4024e2   xor edi, edi\n0x4024e4   mov edx, 5\n0x4024e9   mov esi, 0x408e74\n0x4024ee   call 0x401670\n0x4024f3   mov r13, rax\n0x4024f6   call 0x4015c0\n0x4024fb   mov esi, dword [rax]\n0x4024fd   mov rdx, r13\n0x402500   mov edi, 1\n0x402505   xor eax, eax\n0x402507   call 0x401900\n0x40250c   jmp 0x402452\n0x402511   mov r12d, 1\n0x402517   jmp 0x40249a\n0x402519   xor edi, edi\n0x40251b   mov edx, 5\n0x402520   mov esi, 0x408e46\n0x402525   call 0x401670\n0x40252a   mov r12, rax\n0x40252d   call 0x4015c0\n0x402532   mov esi, dword [rax]\n0x402534   mov rdx, r12\n0x402537   mov edi, 1\n0x40253c   xor eax, eax\n0x40253e   call 0x401900\n0x402543   jmp 0x401ba4\n0x402548   call 0x4016a0\n0x40254d   mov rsi, qword [rip + 0x209de4]\n0x402554   mov edi, 4\n0x402559   mov qword [rsp + 8], rax\n0x40255e   call 0x404ef0\n0x402563   mov edx, 5\n0x402568   mov esi, 0x408e80\n0x40256d   xor edi, edi\n0x40256f   mov rbx, rax\n0x402572   call 0x401670\n0x402577   mov r9, qword [rsp + 8]\n0x40257c   mov rdx, rax\n0x40257f   mov rcx, rbx\n0x402582   xor eax, eax\n0x402584   xor edi, edi\n0x402586   mov esi, dword [r9]\n0x402589   call 0x401900\n0x40258e   mov eax, dword [rsp + 4]\n0x402592   mov dword [rip + 0x209d98], eax\n0x402598   xor eax, eax\n0x40259a   jmp 0x4021b2\n0x40259f   mov rdi, qword [rip + 0x209d92]\n0x4025a6   jmp 0x401c6c\n"
      }, 
      "offset": 4200928
    }, 
    {
      "proc_desc": {
        "name": "sub.__ctype_get_mb_cur_max_a90", 
        "raw_len": 517, 
        "vex_hash": "01000000000000004000000004c2450051f62600a0280d00f2975d003100cb007de406004aa53f003e3e10008fef1100c4aa620077506a00399a4b0035802300b1d51700d6602900c4aa2f003f0d350022c62e0046732b00045c0600a23e800026bd0800b617350048eb11000bde45003501340019df1a003c275e002c281c007938040049a8080028c95c00146e450086ae1e00be4c0b00fae51a00d90f1f000c725e00152832008833e400ba1953006f520f00a316480020e215000d8754001ac142006f3f5c0051ab5100111828007d8b66007405320079775e00f6713000833e38004fec3b00760747005c2407009fd51b00fc06080068603100f77b21004a30470012540000971d3900", 
        "raw": "QVRVU0iJ+0iD7FBkSIsEJSgAAABIiUQkSDHA6NCL//9Ig/gBD4Z+AQAASIlcJBDGBCQAMduAPCQASMdEJAQAAAAASI1sJATGRCQMAA+FmQAAAGYPH0QAAEiLTCQQD7YBicKD4B/A6gWD4geLFJVAn0AAD6PCD4P1AAAASMdEJBgBAAAAD74BxkQkIAGJRCQki0QkJMZEJAwBhcB1MUiJ2EiLdCRIZEgzNCUoAAAAD4VMAQAASIPEUFtdQVzDDx8ASMdEJBgBAAAAxkQkIABIg8MBSItEJBhIAUQkEIA8JADGRCQMAA+Ebf///+gAi///TItkJBBIicZMiefogMf//0iNTCQESI18JCRIicJMieboG4v//0iD+P9IiUQkGHSgSIP4/nRiSIXAdSNIi0QkEEjHRCQYAQAAAIA4AA+FpQAAAItUJCSF0g+FgAAAAEiNfCQExkQkIAHok43//4XAD4Qr////xgQkAOki////ZpBIie/oeI3//4XAdDnGBCQB6Wb///8PHwBIi3wkEOhuiv//xkQkIABIiUQkGOkt////Dx+AAAAAAEiJ3+hQiv//6ev+//+5gJ9AALqWAAAAvlSVQAC/YpVAAOiiiv//uYCfQAC6swAAAL5UlUAAv5CVQADoiYr//7mAn0AAurIAAAC+VJVAAL95lUAA6HCK///oC4r//w==", 
        "flow_hash": "010000000000000020000000d9bff403e8f7c91616ef3300f72eca005ee84413e400730031536710e59dc41310dbe20e91c7930a1b73490c80c04002fac1cb0b58e068048afa0d1dcfa435077292ec1c09e8ce12189204048685d60324d2b30ff734471026d80001ff742f13e728db0ffccf331275154702cd2a840ae7c9b1100cdf6002a176e80c21c7d10a", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x408a90   push r12\n0x408a92   push rbp\n0x408a93   push rbx\n0x408a94   mov rbx, rdi\n0x408a97   sub rsp, 0x50\n0x408a9b   mov rax, qword fs:[0x28]\n0x408aa4   mov qword [rsp + 0x48], rax\n0x408aa9   xor eax, eax\n0x408aab   call 0x401680\n0x408ab0   cmp rax, 1\n0x408ab4   jbe 0x408c38\n0x408aba   mov qword [rsp + 0x10], rbx\n0x408abf   mov byte [rsp], 0\n0x408ac3   xor ebx, ebx\n0x408ac5   cmp byte [rsp], 0\n0x408ac9   mov qword [rsp + 4], 0\n0x408ad2   lea rbp, [rsp + 4]\n0x408ad7   mov byte [rsp + 0xc], 0\n0x408adc   jne 0x408b7b\n0x408ae2   nop word [rax + rax]\n0x408ae8   mov rcx, qword [rsp + 0x10]\n0x408aed   movzx eax, byte [rcx]\n0x408af0   mov edx, eax\n0x408af2   and eax, 0x1f\n0x408af5   shr dl, 5\n0x408af8   and edx, 7\n0x408afb   mov edx, dword [rdx*4 + 0x409f40]\n0x408b02   bt edx, eax\n0x408b05   jae 0x408c00\n0x408b0b   mov qword [rsp + 0x18], 1\n0x408b14   movsx eax, byte [rcx]\n0x408b17   mov byte [rsp + 0x20], 1\n0x408b1c   mov dword [rsp + 0x24], eax\n0x408b20   mov eax, dword [rsp + 0x24]\n0x408b24   mov byte [rsp + 0xc], 1\n0x408b29   test eax, eax\n0x408b2b   jne 0x408b5e\n0x408b2d   mov rax, rbx\n0x408b30   mov rsi, qword [rsp + 0x48]\n0x408b35   xor rsi, qword fs:[0x28]\n0x408b3e   jne 0x408c90\n0x408b44   add rsp, 0x50\n0x408b48   pop rbx\n0x408b49   pop rbp\n0x408b4a   pop r12\n0x408b4c   ret\n0x408b50   mov qword [rsp + 0x18], 1\n0x408b59   mov byte [rsp + 0x20], 0\n0x408b5e   add rbx, 1\n0x408b62   mov rax, qword [rsp + 0x18]\n0x408b67   add qword [rsp + 0x10], rax\n0x408b6c   cmp byte [rsp], 0\n0x408b70   mov byte [rsp + 0xc], 0\n0x408b75   je 0x408ae8\n0x408b7b   call 0x401680\n0x408b80   mov r12, qword [rsp + 0x10]\n0x408b85   mov rsi, rax\n0x408b88   mov rdi, r12\n0x408b8b   call 0x405310\n0x408b90   lea rcx, [rsp + 4]\n0x408b95   lea rdi, [rsp + 0x24]\n0x408b9a   mov rdx, rax\n0x408b9d   mov rsi, r12\n0x408ba0   call 0x4016c0\n0x408ba5   cmp rax, 0xffffffffffffffff\n0x408ba9   mov qword [rsp + 0x18], rax\n0x408bae   je 0x408b50\n0x408bb0   cmp rax, 0xfffffffffffffffe\n0x408bb4   je 0x408c18\n0x408bb6   test rax, rax\n0x408bb9   jne 0x408bde\n0x408bbb   mov rax, qword [rsp + 0x10]\n0x408bc0   mov qword [rsp + 0x18], 1\n0x408bc9   cmp byte [rax], 0\n0x408bcc   jne 0x408c77\n0x408bd2   mov edx, dword [rsp + 0x24]\n0x408bd6   test edx, edx\n0x408bd8   jne 0x408c5e\n0x408bde   lea rdi, [rsp + 4]\n0x408be3   mov byte [rsp + 0x20], 1\n0x408be8   call 0x401980\n0x408bed   test eax, eax\n0x408bef   je 0x408b20\n0x408bf5   mov byte [rsp], 0\n0x408bf9   jmp 0x408b20\n0x408c00   mov rdi, rbp\n0x408c03   call 0x401980\n0x408c08   test eax, eax\n0x408c0a   je 0x408c45\n0x408c0c   mov byte [rsp], 1\n0x408c10   jmp 0x408b7b\n0x408c18   mov rdi, qword [rsp + 0x10]\n0x408c1d   call 0x401690\n0x408c22   mov byte [rsp + 0x20], 0\n0x408c27   mov qword [rsp + 0x18], rax\n0x408c2c   jmp 0x408b5e\n0x408c38   mov rdi, rbx\n0x408c3b   call 0x401690\n0x408c40   jmp 0x408b30\n0x408c45   mov ecx, 0x409f80\n0x408c4a   mov edx, 0x96\n0x408c4f   mov esi, 0x409554\n0x408c54   mov edi, 0x409562\n0x408c59   call 0x401700\n0x408c5e   mov ecx, 0x409f80\n0x408c63   mov edx, 0xb3\n0x408c68   mov esi, 0x409554\n0x408c6d   mov edi, 0x409590\n0x408c72   call 0x401700\n0x408c77   mov ecx, 0x409f80\n0x408c7c   mov edx, 0xb2\n0x408c81   mov esi, 0x409554\n0x408c86   mov edi, 0x409579\n0x408c8b   call 0x401700\n0x408c90   call 0x4016a0\n"
      }, 
      "offset": 4229776
    }, 
    {
      "proc_desc": {
        "name": "sub.__ctype_get_mb_cur_max_8a0", 
        "raw_len": 2586, 
        "vex_hash": "010000000000000040000000c5c4110056ba16002f910000ef1a04002fb51000ef940100acd019009d6407006ca90300854f2b008f760100e2df130051b50c001a60260064ee050071aa0000b9931000205e0c0072dd0600b70e2100fe0c0700de4e10008c56020045092c0060c601003501340019df1a00187f3a0077b40f00f89c0f0049a80800078e03004eb60000165d1c00be4c0b00c5d21600019d01009c120000a73e0900b4eb0d0092600e00af0c2b00c9ec030020e21500e9af03007ebc13008442000079112900360e060032152700e8350e006bb402003491000025163f00c3131c00a1d80100398d3f0076090500c0250000f50215007b300300767c0200ca6b0100ca3b3200", 
        "raw": "VUiJ5UFXQVZBVUFUSYn0U0iB7AgBAABIib3g/v//SIn3ZEiLBCUoAAAASIlFyDHASImV2P7//+i0IQAASInDSImF6P7//0i4kiRJkiRJkgRIOcN2JDHASItdyGRIMxwlKAAAAA+FkgkAAEiNZdhbQVxBXUFeQV9dw0iLvej+//9IifhIwecGSMHgA0gpx0iB/68PAAAPhvMCAADoQCAAAEiJw0iF23StSIuF6P7//0yJpRD///9MjXMYxoUA////AEjHhQT///8AAAAAxoUM////AEyNLEBJweUESo0EK0yJrfj+//9IiYXw/v//SI2FAP///0yNYAQPH4QAAAAAAIC9AP///wAPhboDAABIi40Q////D7YBicKD4B/A6gWD4geLFJVAn0AAD6PCD4N+AwAASMeFGP///wEAAAAPvgHGhSD///8BiYUk////i4Uk////xoUM////AYXAD4WOBQAARTH2SIO96P7//wJIi4Xw/v//TI17QEG8AgAAAEjHQAgBAAAAD4aPAAAADx9AAEUPti/rMWYuDx+EAAAAAACAeBAAdDGLQBRBOUcEdEJNhfYPhAAGAABIi7X4/v//So0E80wrNDBLjQR2SMHgBEgB2EWE7XXJSYtX+Eg7UAh1zkmLf/BIizDoI63//4XAdb5Ii43w/v//SYPGAUyJ4Ewp8EqJBOFJg8QBSYPHMEw5pej+//8PhXX///9Ii4XY/v//xoVA////AEUx/0jHhUT///8AAAAAxoVM////AEUx5MZFgABIx0WEAAAAAEjHAAAAAABIi4Xg/v//xkWMAEiJhVD///9IiUWQSI1FgEiDwARIiYXg/v//SI2FQP///0iDwARIiYXw/v//Dx9EAABFhP8PhCUDAABED7Z9oEWE/w+FZAMAAEuNBGRIweAESAHYSItQCEg7VZgPhKAEAABNheQPhK8CAABIi434/v//So0E40yLPAhNKfxNhf8PhGwEAABED7a1TP///0WE9nQvRA+2tWD///9FhPZ1fUiLhVj///9FMfZIAYVQ////SYPvAcaFTP///wAPhDAEAACAvUD///8AD4WeAAAASIuNUP///w+2AYnCg+AfwOoFg+IHixSVQJ9AAA+jwnNiSMeFWP///wEAAAAPvgFBvgEAAADGhWD///8BiYVk////RYT2xoVM////AXSDi71k////hf8PhXX////ogqn//0iNRy5Ig+DwSCnESI1cJA9Ig+PwSIPDEOn4/P//Dx9EAABIi73w/v//6CSt//+FwA+EBgYAAMaFQP///wHoEKr//0yLrVD///9IicZMie/ojub//0iNtUD///9IicJIjU4ESI1+JEyJ7ugkqv//SIP4/0iJhVj///90b0iD+P4PhH0AAABIhcB1K0iLhVD///9Ix4VY////AQAAAIA4AA+FzgUAAESLhWT///9FhcAPhaAFAABIjYVA////xoVg////AUG+AQAAAEiNeATogKz//4XAD4QH////xoVA////AOn7/v//Dx9AAEjHhVj///8BAAAAxoVg////AOng/v//kEiLvVD////oVKn//8aFYP///wBIiYVY////6cD+//+QTInn6Cis//+FwA+ECgUAAMaFAP///wHoFKn//0yLrRD///9IicZMie/okuX//0iNjQD///9Ijb0A////SInCTInuSIPBBEiDxyToIan//0iD+P9IiYUY////D4TAAgAASIP4/g+EawMAAEiFwHUrSIuFEP///0jHhRj///8BAAAAgDgAD4XHBAAARIuNJP///0WFyQ+FmQQAAEiNhQD////GhSD///8BSI14BOh/q///hcAPhOT7///GhQD///8A6dj7//8PHwBED7a1TP///0WE9g+EZwIAAEQPtrVg////RYT2D4W5AgAASIuFWP///0gBhVD///9Ii0WYSAFFkMaFTP///wDGRYwARTH/gH2AAA+FkAAAAEiLTZAPtgGJwoPgH8DqBYPiB4sUlUCfQAAPo8JzWkjHRZgBAAAAD74BQb8BAAAAxkWgAYlFpEWE/8ZFjAEPhJz8//+LVaSF0g+EjAEAAEuNBGRIweAESAHYgHgQAA+Eh/z//ztQFA+EQAEAAOmH/P//Dx+AAAAAAEiLveD+///olKr//4XAD4R2AwAAxkWAAeiDp///TIt1kEiJxkyJ9+gE5P//SI1NgEiNfYBIicJMifZIg8EESIPHJOiZp///SIP4/0iJRZgPhA8CAABIg/j+D4TfAgAASIXAdSBIi0WQSMdFmAEAAACAOAAPhUgDAACLVaSF0g+FHwMAAEiNRYDGRaABQb8BAAAASI14BOgFqv//hcAPhBv////GRYAA6RL///8PH0AAuAEAAABIjY0A////SIu1EP///0iNUShIOdYPhFYBAABJiXboSIuVGP///4TAQYhG+EmJVvB0CouFJP///0GJRvxIi4UY////xoUM////AEmDxjBIAYUQ////6bH5//+QRA+2fYzpNvv//2YPH0QAAEiLdZBIizjopKf//4XAD4VM+///SYPEAUiLRZhIAUWQTDml6P7//8ZFjAAPhSr+//9Ii4VQ////SIuN2P7//0iJAUiJ3+i2GQAAuAEAAADpo/j//w8fQABIi4Xw/v//Tokk4Ok++v//Dx+EAAAAAABIx4UY////AQAAAMaFIP///wDGhQz///8BMcDpBf///4C9QP///wAPhdMAAABIi41Q////D7YBicKD4B/A6gWD4geLFJVAn0AAD6PCD4OTAAAASMeFWP///wEAAAAPvgFBvgEAAADGhWD///8BiYVk////RYT2xoVM////AQ+ER/3//4uNZP///4XJD4U5/f//6SP7//9Ii5UY////TIn36Num//9NiXboD7aFIP///+mP/v//SIu9EP///+hfpf//xoUg////AEiJhRj////pPv///0jHRZgBAAAAxkWgAOlJ/f//SIu98P7//+gfqP//hcAPhAEBAADGhUD///8B6Aul//9Mi71Q////SInGTIn/6Inh//9IjY1A////SI29QP///0iJwkyJ/kiDwQRIg8ck6Bil//9Ig/j/SImFWP///3R/SIP4/g+EjAAAAEiFwHUpSIuFUP///0jHhVj///8BAAAAgDgAD4XCAAAAi7Vk////hfYPhZYAAABIjYVA////xoVg////AUG+AQAAAEiNeATodqf//4XAD4TR/v//xoVA////AOnF/v//SIt9kOhppP//xkWgAEiJRZjpavz//0jHhVj///8BAAAAxoVg////AOmY/v//SIu9UP///+g5pP//xoVg////AEiJhVj////pef7//7lgn0AAupYAAAC+VJVAAL9ilUAA6H2k//+5YJ9AALqzAAAAvlSVQAC/kJVAAOhkpP//6P+j//+5YJ9AALqyAAAAvlSVQAC/eZVAAOhGpP//", 
        "flow_hash": "010000000000000020000000d9bff403b129920216ef3300f72eca00be0afc0228cc170478572e00c7497102cef6d4004a7c2b00aba968061d5a6b014b43dd009f21050873b69d012ae1750098d65b00fec2a7013481e30b6ba73200e520ee017594ee039fcba304083fad03230cfd0065ed370169a25d012a5be3011fb29c021b370901468aa001f6143400", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x4068a0   push rbp\n0x4068a1   mov rbp, rsp\n0x4068a4   push r15\n0x4068a6   push r14\n0x4068a8   push r13\n0x4068aa   push r12\n0x4068ac   mov r12, rsi\n0x4068af   push rbx\n0x4068b0   sub rsp, 0x108\n0x4068b7   mov qword [rbp - 0x120], rdi\n0x4068be   mov rdi, rsi\n0x4068c1   mov rax, qword fs:[0x28]\n0x4068ca   mov qword [rbp - 0x38], rax\n0x4068ce   xor eax, eax\n0x4068d0   mov qword [rbp - 0x128], rdx\n0x4068d7   call 0x408a90\n0x4068dc   mov rbx, rax\n0x4068df   mov qword [rbp - 0x118], rax\n0x4068e6   movabs rax, 0x492492492492492\n0x4068f0   cmp rbx, rax\n0x4068f3   jbe 0x406919\n0x4068f5   xor eax, eax\n0x4068f7   mov rbx, qword [rbp - 0x38]\n0x4068fb   xor rbx, qword fs:[0x28]\n0x406904   jne 0x40729c\n0x40690a   lea rsp, [rbp - 0x28]\n0x40690e   pop rbx\n0x40690f   pop r12\n0x406911   pop r13\n0x406913   pop r14\n0x406915   pop r15\n0x406917   pop rbp\n0x406918   ret\n0x406919   mov rdi, qword [rbp - 0x118]\n0x406920   mov rax, rdi\n0x406923   shl rdi, 6\n0x406927   shl rax, 3\n0x40692b   sub rdi, rax\n0x40692e   cmp rdi, 0xfaf\n0x406935   jbe 0x406c2e\n0x40693b   call 0x408980\n0x406940   mov rbx, rax\n0x406943   test rbx, rbx\n0x406946   je 0x4068f5\n0x406948   mov rax, qword [rbp - 0x118]\n0x40694f   mov qword [rbp - 0xf0], r12\n0x406956   lea r14, [rbx + 0x18]\n0x40695a   mov byte [rbp - 0x100], 0\n0x406961   mov qword [rbp - 0xfc], 0\n0x40696c   mov byte [rbp - 0xf4], 0\n0x406973   lea r13, [rax + rax*2]\n0x406977   shl r13, 4\n0x40697b   lea rax, [rbx + r13]\n0x40697f   mov qword [rbp - 0x108], r13\n0x406986   mov qword [rbp - 0x110], rax\n0x40698d   lea rax, [rbp - 0x100]\n0x406994   lea r12, [rax + 4]\n0x406998   nop dword [rax + rax]\n0x4069a0   cmp byte [rbp - 0x100], 0\n0x4069a7   jne 0x406d67\n0x4069ad   mov rcx, qword [rbp - 0xf0]\n0x4069b4   movzx eax, byte [rcx]\n0x4069b7   mov edx, eax\n0x4069b9   and eax, 0x1f\n0x4069bc   shr dl, 5\n0x4069bf   and edx, 7\n0x4069c2   mov edx, dword [rdx*4 + 0x409f40]\n0x4069c9   bt edx, eax\n0x4069cc   jae 0x406d50\n0x4069d2   mov qword [rbp - 0xe8], 1\n0x4069dd   movsx eax, byte [rcx]\n0x4069e0   mov byte [rbp - 0xe0], 1\n0x4069e7   mov dword [rbp - 0xdc], eax\n0x4069ed   mov eax, dword [rbp - 0xdc]\n0x4069f3   mov byte [rbp - 0xf4], 1\n0x4069fa   test eax, eax\n0x4069fc   jne 0x406f90\n0x406a02   xor r14d, r14d\n0x406a05   cmp qword [rbp - 0x118], 2\n0x406a0d   mov rax, qword [rbp - 0x110]\n0x406a14   lea r15, [rbx + 0x40]\n0x406a18   mov r12d, 2\n0x406a1e   mov qword [rax + 8], 1\n0x406a26   jbe 0x406abb\n0x406a2c   nop dword [rax]\n0x406a30   movzx r13d, byte [r15]\n0x406a34   jmp 0x406a67\n0x406a40   cmp byte [rax + 0x10], 0\n0x406a44   je 0x406a77\n0x406a46   mov eax, dword [rax + 0x14]\n0x406a49   cmp dword [r15 + 4], eax\n0x406a4d   je 0x406a91\n0x406a4f   test r14, r14\n0x406a52   je 0x407058\n0x406a58   mov rsi, qword [rbp - 0x108]\n0x406a5f   lea rax, [rbx + r14*8]\n0x406a63   sub r14, qword [rax + rsi]\n0x406a67   lea rax, [r14 + r14*2]\n0x406a6b   shl rax, 4\n0x406a6f   add rax, rbx\n0x406a72   test r13b, r13b\n0x406a75   jne 0x406a40\n0x406a77   mov rdx, qword [r15 - 8]\n0x406a7b   cmp rdx, qword [rax + 8]\n0x406a7f   jne 0x406a4f\n0x406a81   mov rdi, qword [r15 - 0x10]\n0x406a85   mov rsi, qword [rax]\n0x406a88   call 0x4017b0\n0x406a8d   test eax, eax\n0x406a8f   jne 0x406a4f\n0x406a91   mov rcx, qword [rbp - 0x110]\n0x406a98   add r14, 1\n0x406a9c   mov rax, r12\n0x406a9f   sub rax, r14\n0x406aa2   mov qword [rcx + r12*8], rax\n0x406aa6   add r12, 1\n0x406aaa   add r15, 0x30\n0x406aae   cmp qword [rbp - 0x118], r12\n0x406ab5   jne 0x406a30\n0x406abb   mov rax, qword [rbp - 0x128]\n0x406ac2   mov byte [rbp - 0xc0], 0\n0x406ac9   xor r15d, r15d\n0x406acc   mov qword [rbp - 0xbc], 0\n0x406ad7   mov byte [rbp - 0xb4], 0\n0x406ade   xor r12d, r12d\n0x406ae1   mov byte [rbp - 0x80], 0\n0x406ae5   mov qword [rbp - 0x7c], 0\n0x406aed   mov qword [rax], 0\n0x406af4   mov rax, qword [rbp - 0x120]\n0x406afb   mov byte [rbp - 0x74], 0\n0x406aff   mov qword [rbp - 0xb0], rax\n0x406b06   mov qword [rbp - 0x70], rax\n0x406b0a   lea rax, [rbp - 0x80]\n0x406b0e   add rax, 4\n0x406b12   mov qword [rbp - 0x120], rax\n0x406b19   lea rax, [rbp - 0xc0]\n0x406b20   add rax, 4\n0x406b24   mov qword [rbp - 0x110], rax\n0x406b2b   nop dword [rax + rax]\n0x406b30   test r15b, r15b\n0x406b33   je 0x406e5e\n0x406b39   movzx r15d, byte [rbp - 0x60]\n0x406b3e   test r15b, r15b\n0x406b41   jne 0x406eab\n0x406b47   lea rax, [r12 + r12*2]\n0x406b4b   shl rax, 4\n0x406b4f   add rax, rbx\n0x406b52   mov rdx, qword [rax + 8]\n0x406b56   cmp rdx, qword [rbp - 0x68]\n0x406b5a   je 0x407000\n0x406b60   test r12, r12\n0x406b63   je 0x406e18\n0x406b69   mov rcx, qword [rbp - 0x108]\n0x406b70   lea rax, [rbx + r12*8]\n0x406b74   mov r15, qword [rax + rcx]\n0x406b78   sub r12, r15\n0x406b7b   test r15, r15\n0x406b7e   je 0x406ff0\n0x406b84   movzx r14d, byte [rbp - 0xb4]\n0x406b8c   test r14b, r14b\n0x406b8f   je 0x406bc0\n0x406b91   movzx r14d, byte [rbp - 0xa0]\n0x406b99   test r14b, r14b\n0x406b9c   jne 0x406c1b\n0x406b9e   mov rax, qword [rbp - 0xa8]\n0x406ba5   xor r14d, r14d\n0x406ba8   add qword [rbp - 0xb0], rax\n0x406baf   sub r15, 1\n0x406bb3   mov byte [rbp - 0xb4], 0\n0x406bba   je 0x406ff0\n0x406bc0   cmp byte [rbp - 0xc0], 0\n0x406bc7   jne 0x406c6b\n0x406bcd   mov rcx, qword [rbp - 0xb0]\n0x406bd4   movzx eax, byte [rcx]\n0x406bd7   mov edx, eax\n0x406bd9   and eax, 0x1f\n0x406bdc   shr dl, 5\n0x406bdf   and edx, 7\n0x406be2   mov edx, dword [rdx*4 + 0x409f40]\n0x406be9   bt edx, eax\n0x406bec   jae 0x406c50\n0x406bee   mov qword [rbp - 0xa8], 1\n0x406bf9   movsx eax, byte [rcx]\n0x406bfc   mov r14d, 1\n0x406c02   mov byte [rbp - 0xa0], 1\n0x406c09   mov dword [rbp - 0x9c], eax\n0x406c0f   test r14b, r14b\n0x406c12   mov byte [rbp - 0xb4], 1\n0x406c19   je 0x406b9e\n0x406c1b   mov edi, dword [rbp - 0x9c]\n0x406c21   test edi, edi\n0x406c23   jne 0x406b9e\n0x406c29   call 0x4015b0\n0x406c2e   lea rax, [rdi + 0x2e]\n0x406c32   and rax, 0xfffffffffffffff0\n0x406c36   sub rsp, rax\n0x406c39   lea rbx, [rsp + 0xf]\n0x406c3e   and rbx, 0xfffffffffffffff0\n0x406c42   add rbx, 0x10\n0x406c46   jmp 0x406943\n0x406c50   mov rdi, qword [rbp - 0x110]\n0x406c57   call 0x401980\n0x406c5c   test eax, eax\n0x406c5e   je 0x40726a\n0x406c64   mov byte [rbp - 0xc0], 1\n0x406c6b   call 0x401680\n0x406c70   mov r13, qword [rbp - 0xb0]\n0x406c77   mov rsi, rax\n0x406c7a   mov rdi, r13\n0x406c7d   call 0x405310\n0x406c82   lea rsi, [rbp - 0xc0]\n0x406c89   mov rdx, rax\n0x406c8c   lea rcx, [rsi + 4]\n0x406c90   lea rdi, [rsi + 0x24]\n0x406c94   mov rsi, r13\n0x406c97   call 0x4016c0\n0x406c9c   cmp rax, 0xffffffffffffffff\n0x406ca0   mov qword [rbp - 0xa8], rax\n0x406ca7   je 0x406d18\n0x406ca9   cmp rax, 0xfffffffffffffffe\n0x406cad   je 0x406d30\n0x406cb3   test rax, rax\n0x406cb6   jne 0x406ce3\n0x406cb8   mov rax, qword [rbp - 0xb0]\n0x406cbf   mov qword [rbp - 0xa8], 1\n0x406cca   cmp byte [rax], 0\n0x406ccd   jne 0x4072a1\n0x406cd3   mov r8d, dword [rbp - 0x9c]\n0x406cda   test r8d, r8d\n0x406cdd   jne 0x407283\n0x406ce3   lea rax, [rbp - 0xc0]\n0x406cea   mov byte [rbp - 0xa0], 1\n0x406cf1   mov r14d, 1\n0x406cf7   lea rdi, [rax + 4]\n0x406cfb   call 0x401980\n0x406d00   test eax, eax\n0x406d02   je 0x406c0f\n0x406d08   mov byte [rbp - 0xc0], 0\n0x406d0f   jmp 0x406c0f\n0x406d18   mov qword [rbp - 0xa8], 1\n0x406d23   mov byte [rbp - 0xa0], 0\n0x406d2a   jmp 0x406c0f\n0x406d30   mov rdi, qword [rbp - 0xb0]\n0x406d37   call 0x401690\n0x406d3c   mov byte [rbp - 0xa0], 0\n0x406d43   mov qword [rbp - 0xa8], rax\n0x406d4a   jmp 0x406c0f\n0x406d50   mov rdi, r12\n0x406d53   call 0x401980\n0x406d58   test eax, eax\n0x406d5a   je 0x40726a\n0x406d60   mov byte [rbp - 0x100], 1\n0x406d67   call 0x401680\n0x406d6c   mov r13, qword [rbp - 0xf0]\n0x406d73   mov rsi, rax\n0x406d76   mov rdi, r13\n0x406d79   call 0x405310\n0x406d7e   lea rcx, [rbp - 0x100]\n0x406d85   lea rdi, [rbp - 0x100]\n0x406d8c   mov rdx, rax\n0x406d8f   mov rsi, r13\n0x406d92   add rcx, 4\n0x406d96   add rdi, 0x24\n0x406d9a   call 0x4016c0\n0x406d9f   cmp rax, 0xffffffffffffffff\n0x406da3   mov qword [rbp - 0xe8], rax\n0x406daa   je 0x407070\n0x406db0   cmp rax, 0xfffffffffffffffe\n0x406db4   je 0x407125\n0x406dba   test rax, rax\n0x406dbd   jne 0x406dea\n0x406dbf   mov rax, qword [rbp - 0xf0]\n0x406dc6   mov qword [rbp - 0xe8], 1\n0x406dd1   cmp byte [rax], 0\n0x406dd4   jne 0x4072a1\n0x406dda   mov r9d, dword [rbp - 0xdc]\n0x406de1   test r9d, r9d\n0x406de4   jne 0x407283\n0x406dea   lea rax, [rbp - 0x100]\n0x406df1   mov byte [rbp - 0xe0], 1\n0x406df8   lea rdi, [rax + 4]\n0x406dfc   call 0x401980\n0x406e01   test eax, eax\n0x406e03   je 0x4069ed\n0x406e09   mov byte [rbp - 0x100], 0\n0x406e10   jmp 0x4069ed\n0x406e18   movzx r14d, byte [rbp - 0xb4]\n0x406e20   test r14b, r14b\n0x406e23   je 0x407090\n0x406e29   movzx r14d, byte [rbp - 0xa0]\n0x406e31   test r14b, r14b\n0x406e34   jne 0x4070f3\n0x406e3a   mov rax, qword [rbp - 0xa8]\n0x406e41   add qword [rbp - 0xb0], rax\n0x406e48   mov rax, qword [rbp - 0x68]\n0x406e4c   add qword [rbp - 0x70], rax\n0x406e50   mov byte [rbp - 0xb4], 0\n0x406e57   mov byte [rbp - 0x74], 0\n0x406e5b   xor r15d, r15d\n0x406e5e   cmp byte [rbp - 0x80], 0\n0x406e62   jne 0x406ef8\n0x406e68   mov rcx, qword [rbp - 0x70]\n0x406e6c   movzx eax, byte [rcx]\n0x406e6f   mov edx, eax\n0x406e71   and eax, 0x1f\n0x406e74   shr dl, 5\n0x406e77   and edx, 7\n0x406e7a   mov edx, dword [rdx*4 + 0x409f40]\n0x406e81   bt edx, eax\n0x406e84   jae 0x406ee0\n0x406e86   mov qword [rbp - 0x68], 1\n0x406e8e   movsx eax, byte [rcx]\n0x406e91   mov r15d, 1\n0x406e97   mov byte [rbp - 0x60], 1\n0x406e9b   mov dword [rbp - 0x5c], eax\n0x406e9e   test r15b, r15b\n0x406ea1   mov byte [rbp - 0x74], 1\n0x406ea5   je 0x406b47\n0x406eab   mov edx, dword [rbp - 0x5c]\n0x406eae   test edx, edx\n0x406eb0   je 0x407042\n0x406eb6   lea rax, [r12 + r12*2]\n0x406eba   shl rax, 4\n0x406ebe   add rax, rbx\n0x406ec1   cmp byte [rax + 0x10], 0\n0x406ec5   je 0x406b52\n0x406ecb   cmp edx, dword [rax + 0x14]\n0x406ece   je 0x407014\n0x406ed4   jmp 0x406b60\n0x406ee0   mov rdi, qword [rbp - 0x120]\n0x406ee7   call 0x401980\n0x406eec   test eax, eax\n0x406eee   je 0x40726a\n0x406ef4   mov byte [rbp - 0x80], 1\n0x406ef8   call 0x401680\n0x406efd   mov r14, qword [rbp - 0x70]\n0x406f01   mov rsi, rax\n0x406f04   mov rdi, r14\n0x406f07   call 0x405310\n0x406f0c   lea rcx, [rbp - 0x80]\n0x406f10   lea rdi, [rbp - 0x80]\n0x406f14   mov rdx, rax\n0x406f17   mov rsi, r14\n0x406f1a   add rcx, 4\n0x406f1e   add rdi, 0x24\n0x406f22   call 0x4016c0\n0x406f27   cmp rax, 0xffffffffffffffff\n0x406f2b   mov qword [rbp - 0x68], rax\n0x406f2f   je 0x407144\n0x406f35   cmp rax, 0xfffffffffffffffe\n0x406f39   je 0x40721e\n0x406f3f   test rax, rax\n0x406f42   jne 0x406f64\n0x406f44   mov rax, qword [rbp - 0x70]\n0x406f48   mov qword [rbp - 0x68], 1\n0x406f50   cmp byte [rax], 0\n0x406f53   jne 0x4072a1\n0x406f59   mov edx, dword [rbp - 0x5c]\n0x406f5c   test edx, edx\n0x406f5e   jne 0x407283\n0x406f64   lea rax, [rbp - 0x80]\n0x406f68   mov byte [rbp - 0x60], 1\n0x406f6c   mov r15d, 1\n0x406f72   lea rdi, [rax + 4]\n0x406f76   call 0x401980\n0x406f7b   test eax, eax\n0x406f7d   je 0x406e9e\n0x406f83   mov byte [rbp - 0x80], 0\n0x406f87   jmp 0x406e9e\n0x406f90   mov eax, 1\n0x406f95   lea rcx, [rbp - 0x100]\n0x406f9c   mov rsi, qword [rbp - 0xf0]\n0x406fa3   lea rdx, [rcx + 0x28]\n0x406fa7   cmp rsi, rdx\n0x406faa   je 0x407106\n0x406fb0   mov qword [r14 - 0x18], rsi\n0x406fb4   mov rdx, qword [rbp - 0xe8]\n0x406fbb   test al, al\n0x406fbd   mov byte [r14 - 8], al\n0x406fc1   mov qword [r14 - 0x10], rdx\n0x406fc5   je 0x406fd1\n0x406fc7   mov eax, dword [rbp - 0xdc]\n0x406fcd   mov dword [r14 - 4], eax\n0x406fd1   mov rax, qword [rbp - 0xe8]\n0x406fd8   mov byte [rbp - 0xf4], 0\n0x406fdf   add r14, 0x30\n0x406fe3   add qword [rbp - 0xf0], rax\n0x406fea   jmp 0x4069a0\n0x406ff0   movzx r15d, byte [rbp - 0x74]\n0x406ff5   jmp 0x406b30\n0x407000   mov rsi, qword [rbp - 0x70]\n0x407004   mov rdi, qword [rax]\n0x407007   call 0x4017b0\n0x40700c   test eax, eax\n0x40700e   jne 0x406b60\n0x407014   add r12, 1\n0x407018   mov rax, qword [rbp - 0x68]\n0x40701c   add qword [rbp - 0x70], rax\n0x407020   cmp qword [rbp - 0x118], r12\n0x407027   mov byte [rbp - 0x74], 0\n0x40702b   jne 0x406e5b\n0x407031   mov rax, qword [rbp - 0xb0]\n0x407038   mov rcx, qword [rbp - 0x128]\n0x40703f   mov qword [rcx], rax\n0x407042   mov rdi, rbx\n0x407045   call 0x408a00\n0x40704a   mov eax, 1\n0x40704f   jmp 0x4068f7\n0x407058   mov rax, qword [rbp - 0x110]\n0x40705f   mov qword [rax + r12*8], r12\n0x407063   jmp 0x406aa6\n0x407070   mov qword [rbp - 0xe8], 1\n0x40707b   mov byte [rbp - 0xe0], 0\n0x407082   mov byte [rbp - 0xf4], 1\n0x407089   xor eax, eax\n0x40708b   jmp 0x406f95\n0x407090   cmp byte [rbp - 0xc0], 0\n0x407097   jne 0x407170\n0x40709d   mov rcx, qword [rbp - 0xb0]\n0x4070a4   movzx eax, byte [rcx]\n0x4070a7   mov edx, eax\n0x4070a9   and eax, 0x1f\n0x4070ac   shr dl, 5\n0x4070af   and edx, 7\n0x4070b2   mov edx, dword [rdx*4 + 0x409f40]\n0x4070b9   bt edx, eax\n0x4070bc   jae 0x407155\n0x4070c2   mov qword [rbp - 0xa8], 1\n0x4070cd   movsx eax, byte [rcx]\n0x4070d0   mov r14d, 1\n0x4070d6   mov byte [rbp - 0xa0], 1\n0x4070dd   mov dword [rbp - 0x9c], eax\n0x4070e3   test r14b, r14b\n0x4070e6   mov byte [rbp - 0xb4], 1\n0x4070ed   je 0x406e3a\n0x4070f3   mov ecx, dword [rbp - 0x9c]\n0x4070f9   test ecx, ecx\n0x4070fb   jne 0x406e3a\n0x407101   jmp 0x406c29\n0x407106   mov rdx, qword [rbp - 0xe8]\n0x40710d   mov rdi, r14\n0x407110   call 0x4017f0\n0x407115   mov qword [r14 - 0x18], r14\n0x407119   movzx eax, byte [rbp - 0xe0]\n0x407120   jmp 0x406fb4\n0x407125   mov rdi, qword [rbp - 0xf0]\n0x40712c   call 0x401690\n0x407131   mov byte [rbp - 0xe0], 0\n0x407138   mov qword [rbp - 0xe8], rax\n0x40713f   jmp 0x407082\n0x407144   mov qword [rbp - 0x68], 1\n0x40714c   mov byte [rbp - 0x60], 0\n0x407150   jmp 0x406e9e\n0x407155   mov rdi, qword [rbp - 0x110]\n0x40715c   call 0x401980\n0x407161   test eax, eax\n0x407163   je 0x40726a\n0x407169   mov byte [rbp - 0xc0], 1\n0x407170   call 0x401680\n0x407175   mov r15, qword [rbp - 0xb0]\n0x40717c   mov rsi, rax\n0x40717f   mov rdi, r15\n0x407182   call 0x405310\n0x407187   lea rcx, [rbp - 0xc0]\n0x40718e   lea rdi, [rbp - 0xc0]\n0x407195   mov rdx, rax\n0x407198   mov rsi, r15\n0x40719b   add rcx, 4\n0x40719f   add rdi, 0x24\n0x4071a3   call 0x4016c0\n0x4071a8   cmp rax, 0xffffffffffffffff\n0x4071ac   mov qword [rbp - 0xa8], rax\n0x4071b3   je 0x407234\n0x4071b5   cmp rax, 0xfffffffffffffffe\n0x4071b9   je 0x40724b\n0x4071bf   test rax, rax\n0x4071c2   jne 0x4071ed\n0x4071c4   mov rax, qword [rbp - 0xb0]\n0x4071cb   mov qword [rbp - 0xa8], 1\n0x4071d6   cmp byte [rax], 0\n0x4071d9   jne 0x4072a1\n0x4071df   mov esi, dword [rbp - 0x9c]\n0x4071e5   test esi, esi\n0x4071e7   jne 0x407283\n0x4071ed   lea rax, [rbp - 0xc0]\n0x4071f4   mov byte [rbp - 0xa0], 1\n0x4071fb   mov r14d, 1\n0x407201   lea rdi, [rax + 4]\n0x407205   call 0x401980\n0x40720a   test eax, eax\n0x40720c   je 0x4070e3\n0x407212   mov byte [rbp - 0xc0], 0\n0x407219   jmp 0x4070e3\n0x40721e   mov rdi, qword [rbp - 0x70]\n0x407222   call 0x401690\n0x407227   mov byte [rbp - 0x60], 0\n0x40722b   mov qword [rbp - 0x68], rax\n0x40722f   jmp 0x406e9e\n0x407234   mov qword [rbp - 0xa8], 1\n0x40723f   mov byte [rbp - 0xa0], 0\n0x407246   jmp 0x4070e3\n0x40724b   mov rdi, qword [rbp - 0xb0]\n0x407252   call 0x401690\n0x407257   mov byte [rbp - 0xa0], 0\n0x40725e   mov qword [rbp - 0xa8], rax\n0x407265   jmp 0x4070e3\n0x40726a   mov ecx, 0x409f60\n0x40726f   mov edx, 0x96\n0x407274   mov esi, 0x409554\n0x407279   mov edi, 0x409562\n0x40727e   call 0x401700\n0x407283   mov ecx, 0x409f60\n0x407288   mov edx, 0xb3\n0x40728d   mov esi, 0x409554\n0x407292   mov edi, 0x409590\n0x407297   call 0x401700\n0x40729c   call 0x4016a0\n0x4072a1   mov ecx, 0x409f60\n0x4072a6   mov edx, 0xb2\n0x4072ab   mov esi, 0x409554\n0x4072b0   mov edi, 0x409579\n0x4072b5   call 0x401700\n"
      }, 
      "offset": 4221088
    }, 
    {
      "proc_desc": {
        "name": "sub.__ctype_get_mb_cur_max_2c0", 
        "raw_len": 4188, 
        "vex_hash": "010000000000000040000000572e0600ba1f020078290900ef1a0400d2590100a1eb00003e630500e55c03004696020094af1000676c2900c6ba15000fcf0b00b1d517005e0a0400dfb10700b99310009dfa050004810500e8190000fcb82b0026bd080064202600d14c04007abb0d00a3672b0033f70300fcc30200b20e0400793804002260060048e10d00a7500400349d0500e651000053e70400ac9e040052310400494547002e680d0072610700471c0c00d8982d0005fb0900e9af030032ae100057571600803004005a3004004c0503006f5015009d8b02003491000033d50300d29a1100a1d80100e7080500760905000e0801007006030027e214005bbc04007541170084ff1100", 
        "raw": "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", 
        "flow_hash": "01000000000000002000000002de380591ee850216ef3300df10c800f71cca018c95000278572e00939ccc00cef6d4004a7c2b007f988f03769f5c0460edb9005e676c0074dc5c012ae17500483c8402fec2a70165e49201d53e10013d5fe406198d270226d800013fa22203b534270565ed37015a3ce6002a5be301e6e641009bb9db01a9183600614b1200", 
        "callconv": "amd64", 
        "apicalls": [], 
        "arch": "AMD64", 
        "asm": "0x4072c0   push r15\n0x4072c2   push r14\n0x4072c4   push r13\n0x4072c6   push r12\n0x4072c8   mov r12, rsi\n0x4072cb   push rbp\n0x4072cc   push rbx\n0x4072cd   sub rsp, 0x198\n0x4072d4   mov rax, qword fs:[0x28]\n0x4072dd   mov qword [rsp + 0x188], rax\n0x4072e5   xor eax, eax\n0x4072e7   mov qword [rsp + 0x10], rdi\n0x4072ec   call 0x401680\n0x4072f1   cmp rax, 1\n0x4072f5   jbe 0x407520\n0x4072fb   movsx eax, byte [r12]\n0x407300   mov qword [rsp + 0x50], r12\n0x407305   lea rbx, [rsp + 0x44]\n0x40730a   mov byte [rsp + 0x40], 0\n0x40730f   mov qword [rsp + 0x44], 0\n0x407318   mov byte [rsp + 0x4c], 0\n0x40731d   mov edx, eax\n0x40731f   mov esi, eax\n0x407321   shr dl, 5\n0x407324   and esi, 0x1f\n0x407327   and edx, 7\n0x40732a   mov edx, dword [rdx*4 + 0x409f40]\n0x407331   bt edx, esi\n0x407334   jae 0x407480\n0x40733a   mov qword [rsp + 0x58], 1\n0x407343   mov dword [rsp + 0x64], eax\n0x407347   mov byte [rsp + 0x60], 1\n0x40734c   mov esi, dword [rsp + 0x64]\n0x407350   mov byte [rsp + 0x4c], 1\n0x407355   test esi, esi\n0x407357   je 0x4077d0\n0x40735d   mov rax, qword [rsp + 0x10]\n0x407362   lea r13, [rsp + 0x144]\n0x40736a   mov qword [rsp + 0x90], r12\n0x407372   mov byte [rsp + 0x80], 0\n0x40737a   mov qword [rsp + 0x84], 0\n0x407386   xor r15d, r15d\n0x407389   mov byte [rsp + 0x8c], 0\n0x407391   mov byte [rsp + 0xc0], 0\n0x407399   xor r14d, r14d\n0x40739c   mov qword [rsp + 0xd0], rax\n0x4073a4   lea rax, [rsp + 0x104]\n0x4073ac   mov qword [rsp + 0xc4], 0\n0x4073b8   mov byte [rsp + 0xcc], 0\n0x4073c0   mov qword [rsp + 8], 0\n0x4073c9   mov byte [rsp + 0x27], 1\n0x4073ce   mov qword [rsp + 0x28], rax\n0x4073d3   cmp byte [rsp + 0xc0], 0\n0x4073db   lea rbx, [rsp + 0xc0]\n0x4073e3   jne 0x407731\n0x4073e9   mov rcx, qword [rsp + 0xd0]\n0x4073f1   movzx eax, byte [rcx]\n0x4073f4   mov edx, eax\n0x4073f6   and eax, 0x1f\n0x4073f9   shr dl, 5\n0x4073fc   and edx, 7\n0x4073ff   mov edx, dword [rdx*4 + 0x409f40]\n0x407406   bt edx, eax\n0x407409   jae 0x407710\n0x40740f   mov qword [rsp + 0xd8], 1\n0x40741b   movsx eax, byte [rcx]\n0x40741e   mov byte [rsp + 0xe0], 1\n0x407426   mov dword [rsp + 0xe4], eax\n0x40742d   mov ecx, dword [rsp + 0xe4]\n0x407434   mov byte [rsp + 0xcc], 1\n0x40743c   test ecx, ecx\n0x40743e   je 0x4076b0\n0x407444   cmp r15, 9\n0x407448   jbe 0x408248\n0x40744e   cmp byte [rsp + 0x27], 0\n0x407453   je 0x408248\n0x407459   lea rax, [r15 + r15*4]\n0x40745d   cmp qword [rsp + 8], rax\n0x407462   jae 0x407889\n0x407468   mov rbx, qword [rsp + 8]\n0x40746d   mov byte [rsp + 0x27], 1\n0x407472   mov qword [rsp + 8], r14\n0x407477   add rbx, 1\n0x40747b   jmp 0x4079a5\n0x407480   mov rdi, rbx\n0x407483   call 0x401980\n0x407488   test eax, eax\n0x40748a   je 0x40829d\n0x407490   mov byte [rsp + 0x40], 1\n0x407495   call 0x401680\n0x40749a   mov r13, qword [rsp + 0x50]\n0x40749f   mov rsi, rax\n0x4074a2   mov rdi, r13\n0x4074a5   call 0x405310\n0x4074aa   lea rdi, [rsp + 0x64]\n0x4074af   mov rcx, rbx\n0x4074b2   mov rdx, rax\n0x4074b5   mov rsi, r13\n0x4074b8   call 0x4016c0\n0x4074bd   cmp rax, 0xffffffffffffffff\n0x4074c1   mov qword [rsp + 0x58], rax\n0x4074c6   je 0x407820\n0x4074cc   cmp rax, 0xfffffffffffffffe\n0x4074d0   je 0x40820b\n0x4074d6   test rax, rax\n0x4074d9   jne 0x4074fe\n0x4074db   mov rax, qword [rsp + 0x50]\n0x4074e0   mov qword [rsp + 0x58], 1\n0x4074e9   cmp byte [rax], 0\n0x4074ec   jne 0x408303\n0x4074f2   mov eax, dword [rsp + 0x64]\n0x4074f6   test eax, eax\n0x4074f8   jne 0x408061\n0x4074fe   lea rdi, [rsp + 0x44]\n0x407503   mov byte [rsp + 0x60], 1\n0x407508   call 0x401980\n0x40750d   test eax, eax\n0x40750f   je 0x40734c\n0x407515   mov byte [rsp + 0x40], 0\n0x40751a   jmp 0x40734c\n0x407520   movzx r15d, byte [r12]\n0x407525   mov rbp, qword [rsp + 0x10]\n0x40752a   mov rax, rbp\n0x40752d   test r15b, r15b\n0x407530   je 0x407680\n0x407536   cmp byte [rbp], 0\n0x40753a   je 0x4076b0\n0x407540   add rbp, 1\n0x407544   mov r9, r12\n0x407547   xor r8d, r8d\n0x40754a   xor ebx, ebx\n0x40754c   xor r13d, r13d\n0x40754f   mov edi, 1\n0x407554   cmp r13, 9\n0x407558   lea r14, [rbp - 1]\n0x40755c   jbe 0x4075a3\n0x40755e   test dil, dil\n0x407561   je 0x4075a3\n0x407563   lea rax, [r13 + r13*4]\n0x407568   cmp rbx, rax\n0x40756b   jb 0x40759e\n0x40756d   test r9, r9\n0x407570   je 0x4077e0\n0x407576   mov rsi, rbx\n0x407579   mov rdi, r9\n0x40757c   mov qword [rsp + 8], r9\n0x407581   sub rsi, r8\n0x407584   call 0x401740\n0x407589   mov r9, qword [rsp + 8]\n0x40758e   mov r8, rbx\n0x407591   add r9, rax\n0x407594   cmp byte [r9], 0\n0x407598   je 0x4077e0\n0x40759e   mov edi, 1\n0x4075a3   add r13, 1\n0x4075a7   cmp r15b, byte [rbp - 1]\n0x4075ab   je 0x4076b8\n0x4075b1   cmp byte [rbp], 0\n0x4075b5   je 0x4076b0\n0x4075bb   add rbx, 1\n0x4075bf   add rbp, 1\n0x4075c3   jmp 0x407554\n0x4075c5   mov qword [rsp + 0x158], 1\n0x4075d1   mov byte [rsp + 0x160], 0\n0x4075d9   mov rax, qword [rsp + 0x158]\n0x4075e1   add qword [rsp + 0x150], rax\n0x4075e9   lea rax, [rsp + 0x164]\n0x4075f1   mov byte [rsp + 0x14c], 0\n0x4075f9   add rbx, 1\n0x4075fd   mov qword [rsp + 0x18], rax\n0x407602   nop word [rax + rax]\n0x407608   cmp byte [rsp + 0x140], 0\n0x407610   jne 0x407d40\n0x407616   mov rcx, qword [rsp + 0x150]\n0x40761e   movzx eax, byte [rcx]\n0x407621   mov edx, eax\n0x407623   and eax, 0x1f\n0x407626   shr dl, 5\n0x407629   and edx, 7\n0x40762c   mov edx, dword [rdx*4 + 0x409f40]\n0x407633   bt edx, eax\n0x407636   jae 0x407d28\n0x40763c   mov qword [rsp + 0x158], 1\n0x407648   movsx eax, byte [rcx]\n0x40764b   mov byte [rsp + 0x160], 1\n0x407653   mov dword [rsp + 0x164], eax\n0x40765a   mov eax, dword [rsp + 0x164]\n0x407661   mov byte [rsp + 0x14c], 1\n0x407669   test eax, eax\n0x40766b   jne 0x407c3c\n0x407671   mov rax, qword [rsp + 0xd0]\n0x407679   nop dword [rax]\n0x407680   mov rbx, qword [rsp + 0x188]\n0x407688   xor rbx, qword fs:[0x28]\n0x407691   jne 0x4082c0\n0x407697   add rsp, 0x198\n0x40769e   pop rbx\n0x40769f   pop rbp\n0x4076a0   pop r12\n0x4076a2   pop r13\n0x4076a4   pop r14\n0x4076a6   pop r15\n0x4076a8   ret\n0x4076b0   xor eax, eax\n0x4076b2   jmp 0x407680\n0x4076b8   movzx eax, byte [r12 + 1]\n0x4076be   test al, al\n0x4076c0   je 0x407706\n0x4076c2   movzx ecx, byte [rbp]\n0x4076c6   test cl, cl\n0x4076c8   je 0x4076b0\n0x4076ca   cmp cl, al\n0x4076cc   lea rdx, [rbx + 2]\n0x4076d0   jne 0x4080a8\n0x4076d6   neg rbx\n0x4076d9   lea rax, [r12 + rbx]\n0x4076dd   add rbx, r14\n0x4076e0   jmp 0x4076fe\n0x4076e8   movzx esi, byte [rbx + rdx]\n0x4076ec   test sil, sil\n0x4076ef   je 0x4076b0\n0x4076f1   add rdx, 1\n0x4076f5   cmp cl, sil\n0x4076f8   jne 0x4080a8\n0x4076fe   movzx ecx, byte [rax + rdx]\n0x407702   test cl, cl\n0x407704   jne 0x4076e8\n0x407706   mov rax, r14\n0x407709   jmp 0x407680\n0x407710   lea rbx, [rsp + 0xc0]\n0x407718   lea rdi, [rbx + 4]\n0x40771c   call 0x401980\n0x407721   test eax, eax\n0x407723   je 0x40829d\n0x407729   mov byte [rsp + 0xc0], 1\n0x407731   call 0x401680\n0x407736   mov rbp, qword [rsp + 0xd0]\n0x40773e   mov rsi, rax\n0x407741   mov rdi, rbp\n0x407744   call 0x405310\n0x407749   lea rcx, [rbx + 4]\n0x40774d   lea rdi, [rbx + 0x24]\n0x407751   mov rdx, rax\n0x407754   mov rsi, rbp\n0x407757   call 0x4016c0\n0x40775c   cmp rax, 0xffffffffffffffff\n0x407760   mov qword [rsp + 0xd8], rax\n0x407768   je 0x408130\n0x40776e   cmp rax, 0xfffffffffffffffe\n0x407772   je 0x407840\n0x407778   test rax, rax\n0x40777b   jne 0x4077a9\n0x40777d   mov rax, qword [rsp + 0xd0]\n0x407785   mov qword [rsp + 0xd8], 1\n0x407791   cmp byte [rax], 0\n0x407794   jne 0x408303\n0x40779a   mov eax, dword [rsp + 0xe4]\n0x4077a1   test eax, eax\n0x4077a3   jne 0x408061\n0x4077a9   lea rdi, [rbx + 4]\n0x4077ad   mov byte [rsp + 0xe0], 1\n0x4077b5   call 0x401980\n0x4077ba   test eax, eax\n0x4077bc   je 0x40742d\n0x4077c2   mov byte [rsp + 0xc0], 0\n0x4077ca   jmp 0x40742d\n0x4077d0   mov rax, qword [rsp + 0x10]\n0x4077d5   jmp 0x407680\n0x4077e0   mov rdi, r12\n0x4077e3   mov qword [rsp + 8], r8\n0x4077e8   call 0x401690\n0x4077ed   lea rcx, [rsp + 0x38]\n0x4077f2   mov rdx, rax\n0x4077f5   mov rsi, r12\n0x4077f8   mov rdi, r14\n0x4077fb   call 0x406700\n0x407800   test al, al\n0x407802   mov r8, qword [rsp + 8]\n0x407807   jne 0x4082b6\n0x40780d   xor r9d, r9d\n0x407810   xor edi, edi\n0x407812   jmp 0x4075a3\n0x407820   mov qword [rsp + 0x58], 1\n0x407829   mov byte [rsp + 0x60], 0\n0x40782e   mov byte [rsp + 0x4c], 1\n0x407833   jmp 0x40735d\n0x407840   mov rdi, qword [rsp + 0xd0]\n0x407848   call 0x401690\n0x40784d   mov byte [rsp + 0xe0], 0\n0x407855   mov qword [rsp + 0xd8], rax\n0x40785d   cmp r15, 9\n0x407861   mov byte [rsp + 0xcc], 1\n0x407869   jbe 0x407bc0\n0x40786f   cmp byte [rsp + 0x27], 0\n0x407874   je 0x407bc0\n0x40787a   lea rax, [r15 + r15*4]\n0x40787e   cmp qword [rsp + 8], rax\n0x407883   jb 0x4082c5\n0x407889   mov rbx, qword [rsp + 8]\n0x40788e   sub rbx, r14\n0x407891   je 0x4082e8\n0x407897   movzx ebp, byte [rsp + 0x8c]\n0x40789f   lea rax, [rsp + 0x84]\n0x4078a7   mov qword [rsp + 0x18], rax\n0x4078ac   test bpl, bpl\n0x4078af   je 0x4078e6\n0x4078b1   movzx ebp, byte [rsp + 0xa0]\n0x4078b9   test bpl, bpl\n0x4078bc   jne 0x40794e\n0x4078c2   mov rax, qword [rsp + 0x98]\n0x4078ca   xor ebp, ebp\n0x4078cc   add qword [rsp + 0x90], rax\n0x4078d4   sub rbx, 1\n0x4078d8   mov byte [rsp + 0x8c], 0\n0x4078e0   je 0x4080b0\n0x4078e6   cmp byte [rsp + 0x80], 0\n0x4078ee   jne 0x407aea\n0x4078f4   mov rcx, qword [rsp + 0x90]\n0x4078fc   movzx eax, byte [rcx]\n0x4078ff   mov edx, eax\n0x407901   and eax, 0x1f\n0x407904   shr dl, 5\n0x407907   and edx, 7\n0x40790a   mov edx, dword [rdx*4 + 0x409f40]\n0x407911   bt edx, eax\n0x407914   jae 0x407ad0\n0x40791a   mov qword [rsp + 0x98], 1\n0x407926   movsx eax, byte [rcx]\n0x407929   mov ebp, 1\n0x40792e   mov byte [rsp + 0xa0], 1\n0x407936   mov dword [rsp + 0xa4], eax\n0x40793d   test bpl, bpl\n0x407940   mov byte [rsp + 0x8c], 1\n0x407948   je 0x4078c2\n0x40794e   mov r11d, dword [rsp + 0xa4]\n0x407956   test r11d, r11d\n0x407959   jne 0x4078c2\n0x40795f   cmp byte [rsp + 0x8c], 0\n0x407967   je 0x4080b0\n0x40796d   mov rdi, qword [rsp + 0x10]\n0x407972   lea rdx, [rsp + 0x38]\n0x407977   mov rsi, r12\n0x40797a   call 0x4068a0\n0x40797f   test al, al\n0x407981   jne 0x4082b6\n0x407987   movzx eax, byte [rsp + 0xe0]\n0x40798f   mov byte [rsp + 0x27], 0\n0x407994   mov rbx, qword [rsp + 8]\n0x407999   add rbx, 1\n0x40799d   test al, al\n0x40799f   je 0x407f80\n0x4079a5   cmp byte [rsp + 0x60], 0\n0x4079aa   je 0x407f80\n0x4079b0   mov eax, dword [rsp + 0x64]\n0x4079b4   cmp dword [rsp + 0xe4], eax\n0x4079bb   jne 0x407c70\n0x4079c1   mov rax, qword [rsp + 0xc0]\n0x4079c9   mov rdx, qword [rsp + 0xe0]\n0x4079d1   mov qword [rsp + 0x150], r12\n0x4079d9   mov byte [rsp + 0x140], 0\n0x4079e1   mov qword [r13], 0\n0x4079e9   mov byte [rsp + 0x14c], 0\n0x4079f1   mov qword [rsp + 0x100], rax\n0x4079f9   mov rax, qword [rsp + 0xc8]\n0x407a01   mov qword [rsp + 0x120], rdx\n0x407a09   mov rdx, qword [rsp + 0xe8]\n0x407a11   mov qword [rsp + 0x108], rax\n0x407a19   mov rax, qword [rsp + 0xd0]\n0x407a21   mov qword [rsp + 0x128], rdx\n0x407a29   mov rdx, qword [rsp + 0xf0]\n0x407a31   mov byte [rsp + 0x10c], 0\n0x407a39   mov qword [rsp + 0x110], rax\n0x407a41   mov rax, qword [rsp + 0xd8]\n0x407a49   add qword [rsp + 0x110], rax\n0x407a51   mov qword [rsp + 0x130], rdx\n0x407a59   mov rdx, qword [rsp + 0xf8]\n0x407a61   mov qword [rsp + 0x118], rax\n0x407a69   movsx eax, byte [r12]\n0x407a6e   mov qword [rsp + 0x138], rdx\n0x407a76   mov edx, eax\n0x407a78   mov ecx, eax\n0x407a7a   shr dl, 5\n0x407a7d   and ecx, 0x1f\n0x407a80   and edx, 7\n0x407a83   mov edx, dword [rdx*4 + 0x409f40]\n0x407a8a   bt edx, ecx\n0x407a8d   jae 0x407fd0\n0x407a93   mov qword [rsp + 0x158], 1\n0x407a9f   mov dword [rsp + 0x164], eax\n0x407aa6   mov byte [rsp + 0x160], 1\n0x407aae   mov edx, dword [rsp + 0x164]\n0x407ab5   mov byte [rsp + 0x14c], 1\n0x407abd   test edx, edx\n0x407abf   jne 0x4075d9\n0x407ac5   call 0x4015b0\n0x407ad0   mov rdi, qword [rsp + 0x18]\n0x407ad5   call 0x401980\n0x407ada   test eax, eax\n0x407adc   je 0x40829d\n0x407ae2   mov byte [rsp + 0x80], 1\n0x407aea   call 0x401680\n0x407aef   mov r14, qword [rsp + 0x90]\n0x407af7   mov rsi, rax\n0x407afa   mov rdi, r14\n0x407afd   call 0x405310\n0x407b02   lea rsi, [rsp + 0x80]\n0x407b0a   lea rcx, [rsp + 0x84]\n0x407b12   mov rdx, rax\n0x407b15   lea rdi, [rsi + 0x24]\n0x407b19   mov rsi, r14\n0x407b1c   call 0x4016c0\n0x407b21   cmp rax, 0xffffffffffffffff\n0x407b25   mov qword [rsp + 0x98], rax\n0x407b2d   je 0x407ba0\n0x407b2f   cmp rax, 0xfffffffffffffffe\n0x407b33   je 0x407bf8\n0x407b39   test rax, rax\n0x407b3c   jne 0x407b6a\n0x407b3e   mov rax, qword [rsp + 0x90]\n0x407b46   mov qword [rsp + 0x98], 1\n0x407b52   cmp byte [rax], 0\n0x407b55   jne 0x408303\n0x407b5b   mov ebp, dword [rsp + 0xa4]\n0x407b62   test ebp, ebp\n0x407b64   jne 0x408061\n0x407b6a   lea rdi, [rsp + 0x84]\n0x407b72   mov byte [rsp + 0xa0], 1\n0x407b7a   mov ebp, 1\n0x407b7f   call 0x401980\n0x407b84   test eax, eax\n0x407b86   je 0x40793d\n0x407b8c   mov byte [rsp + 0x80], 0\n0x407b94   jmp 0x40793d\n0x407ba0   mov qword [rsp + 0x98], 1\n0x407bac   mov byte [rsp + 0xa0], 0\n0x407bb4   jmp 0x40793d\n0x407bc0   add qword [rsp + 8], 1\n0x407bc6   mov rbx, qword [rsp + 0xd8]\n0x407bce   cmp rbx, qword [rsp + 0x58]\n0x407bd3   je 0x407fa0\n0x407bd9   add qword [rsp + 0xd0], rbx\n0x407be1   mov byte [rsp + 0xcc], 0\n0x407be9   add r15, 1\n0x407bed   jmp 0x4073d3\n0x407bf8   mov rdi, qword [rsp + 0x90]\n0x407c00   call 0x401690\n0x407c05   mov byte [rsp + 0xa0], 0\n0x407c0d   mov qword [rsp + 0x98], rax\n0x407c15   jmp 0x40793d\n0x407c20   mov qword [rsp + 0x158], 1\n0x407c2c   mov byte [rsp + 0x160], 0\n0x407c34   mov byte [rsp + 0x14c], 1\n0x407c3c   movzx ebp, byte [rsp + 0x10c]\n0x407c44   test bpl, bpl\n0x407c47   je 0x407c90\n0x407c49   movzx ebp, byte [rsp + 0x120]\n0x407c51   test bpl, bpl\n0x407c54   jne 0x407cf8\n0x407c5a   mov rdx, qword [rsp + 0x118]\n0x407c62   cmp rdx, qword [rsp + 0x158]\n0x407c6a   je 0x407eb0\n0x407c70   mov rax, qword [rsp + 8]\n0x407c75   mov qword [rsp + 8], rbx\n0x407c7a   mov rbx, qword [rsp + 0xd8]\n0x407c82   mov r14, rax\n0x407c85   jmp 0x407bd9\n0x407c90   cmp byte [rsp + 0x100], 0\n0x407c98   jne 0x407dfa\n0x407c9e   mov rcx, qword [rsp + 0x110]\n0x407ca6   movzx eax, byte [rcx]\n0x407ca9   mov edx, eax\n0x407cab   and eax, 0x1f\n0x407cae   shr dl, 5\n0x407cb1   and edx, 7\n0x407cb4   mov edx, dword [rdx*4 + 0x409f40]\n0x407cbb   bt edx, eax\n0x407cbe   jae 0x407de0\n0x407cc4   mov qword [rsp + 0x118], 1\n0x407cd0   movsx eax, byte [rcx]\n0x407cd3   mov ebp, 1\n0x407cd8   mov byte [rsp + 0x120], 1\n0x407ce0   mov dword [rsp + 0x124], eax\n0x407ce7   test bpl, bpl\n0x407cea   mov byte [rsp + 0x10c], 1\n0x407cf2   je 0x407c5a\n0x407cf8   mov eax, dword [rsp + 0x124]\n0x407cff   test eax, eax\n0x407d01   je 0x4076b0\n0x407d07   cmp byte [rsp + 0x160], 0\n0x407d0f   je 0x407c5a\n0x407d15   cmp dword [rsp + 0x164], eax\n0x407d1c   setne dl\n0x407d1f   jmp 0x407eca\n0x407d28   mov rdi, r13\n0x407d2b   call 0x401980\n0x407d30   test eax, eax\n0x407d32   je 0x40829d\n0x407d38   mov byte [rsp + 0x140], 1\n0x407d40   call 0x401680\n0x407d45   mov rbp, qword [rsp + 0x150]\n0x407d4d   mov rsi, rax\n0x407d50   mov rdi, rbp\n0x407d53   call 0x405310\n0x407d58   mov rdi, qword [rsp + 0x18]\n0x407d5d   mov rcx, r13\n0x407d60   mov rdx, rax\n0x407d63   mov rsi, rbp\n0x407d66   call 0x4016c0\n0x407d6b   cmp rax, 0xffffffffffffffff\n0x407d6f   mov qword [rsp + 0x158], rax\n0x407d77   je 0x407c20\n0x407d7d   cmp rax, 0xfffffffffffffffe\n0x407d81   je 0x407f30\n0x407d87   test rax, rax\n0x407d8a   jne 0x407dba\n0x407d8c   mov rax, qword [rsp + 0x150]\n0x407d94   mov qword [rsp + 0x158], 1\n0x407da0   cmp byte [rax], 0\n0x407da3   jne 0x408303\n0x407da9   mov r8d, dword [rsp + 0x164]\n0x407db1   test r8d, r8d\n0x407db4   jne 0x408061\n0x407dba   mov rdi, r13\n0x407dbd   mov byte [rsp + 0x160], 1\n0x407dc5   call 0x401980\n0x407dca   test eax, eax\n0x407dcc   je 0x40765a\n0x407dd2   mov byte [rsp + 0x140], 0\n0x407dda   jmp 0x40765a\n0x407de0   mov rdi, qword [rsp + 0x28]\n0x407de5   call 0x401980\n0x407dea   test eax, eax\n0x407dec   je 0x40829d\n0x407df2   mov byte [rsp + 0x100], 1\n0x407dfa   call 0x401680\n0x407dff   mov r14, qword [rsp + 0x110]\n0x407e07   mov rsi, rax\n0x407e0a   mov rdi, r14\n0x407e0d   call 0x405310\n0x407e12   lea rsi, [rsp + 0x100]\n0x407e1a   lea rcx, [rsp + 0x104]\n0x407e22   mov rdx, rax\n0x407e25   mov rdi, rsi\n0x407e28   mov rsi, r14\n0x407e2b   add rdi, 0x24\n0x407e2f   call 0x4016c0\n0x407e34   cmp rax, 0xffffffffffffffff\n0x407e38   mov qword [rsp + 0x118], rax\n0x407e40   je 0x407f10\n0x407e46   cmp rax, 0xfffffffffffffffe\n0x407e4a   je 0x407f58\n0x407e50   test rax, rax\n0x407e53   jne 0x407e81\n0x407e55   mov rax, qword [rsp + 0x110]\n0x407e5d   mov qword [rsp + 0x118], 1\n0x407e69   cmp byte [rax], 0\n0x407e6c   jne 0x408303\n0x407e72   mov edi, dword [rsp + 0x124]\n0x407e79   test edi, edi\n0x407e7b   jne 0x408061\n0x407e81   lea rdi, [rsp + 0x104]\n0x407e89   mov byte [rsp + 0x120], 1\n0x407e91   mov ebp, 1\n0x407e96   call 0x401980\n0x407e9b   test eax, eax\n0x407e9d   je 0x407ce7\n0x407ea3   mov byte [rsp + 0x100], 0\n0x407eab   jmp 0x407ce7\n0x407eb0   mov rsi, qword [rsp + 0x150]\n0x407eb8   mov rdi, qword [rsp + 0x110]\n0x407ec0   call 0x4017b0\n0x407ec5   test eax, eax\n0x407ec7   setne dl\n0x407eca   test dl, dl\n0x407ecc   lea rax, [rbx + 1]\n0x407ed0   jne 0x407c70\n0x407ed6   mov rdx, qword [rsp + 0x118]\n0x407ede   mov byte [rsp + 0x10c], 0\n0x407ee6   mov rbx, rax\n0x407ee9   add qword [rsp + 0x110], rdx\n0x407ef1   mov byte [rsp + 0x14c], 0\n0x407ef9   mov rdx, qword [rsp + 0x158]\n0x407f01   add qword [rsp + 0x150], rdx\n0x407f09   jmp 0x407608\n0x407f10   mov qword [rsp + 0x118], 1\n0x407f1c   mov byte [rsp + 0x120], 0\n0x407f24   jmp 0x407ce7\n0x407f30   mov rdi, qword [rsp + 0x150]\n0x407f38   call 0x401690\n0x407f3d   mov byte [rsp + 0x160], 0\n0x407f45   mov qword [rsp + 0x158], rax\n0x407f4d   jmp 0x407c34\n0x407f58   mov rdi, qword [rsp + 0x110]\n0x407f60   call 0x401690\n0x407f65   mov byte [rsp + 0x120], 0\n0x407f6d   mov qword [rsp + 0x118], rax\n0x407f75   jmp 0x407ce7\n0x407f80   mov rax, qword [rsp + 8]\n0x407f85   mov qword [rsp + 8], rbx\n0x407f8a   mov rbx, qword [rsp + 0xd8]\n0x407f92   cmp rbx, qword [rsp + 0x58]\n0x407f97   mov r14, rax\n0x407f9a   jne 0x407bd9\n0x407fa0   mov rsi, qword [rsp + 0x50]\n0x407fa5   mov rdi, qword [rsp + 0xd0]\n0x407fad   mov rdx, rbx\n0x407fb0   call 0x4017b0\n0x407fb5   test eax, eax\n0x407fb7   jne 0x407bd9\n0x407fbd   mov rbx, qword [rsp + 8]\n0x407fc2   mov qword [rsp + 8], r14\n0x407fc7   jmp 0x4079c1\n0x407fd0   mov rdi, r13\n0x407fd3   call 0x401980\n0x407fd8   test eax, eax\n0x407fda   je 0x40829d\n0x407fe0   mov byte [rsp + 0x140], 1\n0x407fe8   call 0x401680\n0x407fed   mov rbp, qword [rsp + 0x150]\n0x407ff5   mov rsi, rax\n0x407ff8   mov rdi, rbp\n0x407ffb   call 0x405310\n0x408000   lea rdi, [rsp + 0x164]\n0x408008   mov rcx, r13\n0x40800b   mov rdx, rax\n0x40800e   mov rsi, rbp\n0x408011   call 0x4016c0\n0x408016   cmp rax, 0xffffffffffffffff\n0x40801a   mov qword [rsp + 0x158], rax\n0x408022   je 0x4075c5\n0x408028   cmp rax, 0xfffffffffffffffe\n0x40802c   je 0x408260\n0x408032   test rax, rax\n0x408035   jne 0x408080\n0x408037   mov rax, qword [rsp + 0x150]\n0x40803f   mov qword [rsp + 0x158], 1\n0x40804b   cmp byte [rax], 0\n0x40804e   jne 0x408303\n0x408054   mov r9d, dword [rsp + 0x164]\n0x40805c   test r9d, r9d\n0x40805f   je 0x408080\n0x408061   mov ecx, 0x409f60\n0x408066   mov edx, 0xb3\n0x40806b   mov esi, 0x409554\n0x408070   mov edi, 0x409590\n0x408075   call 0x401700\n0x408080   mov rdi, r13\n0x408083   mov byte [rsp + 0x160], 1\n0x40808b   call 0x401980\n0x408090   test eax, eax\n0x408092   je 0x407aae\n0x408098   mov byte [rsp + 0x140], 0\n0x4080a0   jmp 0x407aae\n0x4080a8   mov rbx, rdx\n0x4080ab   jmp 0x4075bf\n0x4080b0   cmp byte [rsp + 0x80], 0\n0x4080b8   lea rbx, [rsp + 0x80]\n0x4080c0   jne 0x40816a\n0x4080c6   mov rcx, qword [rsp + 0x90]\n0x4080ce   movzx eax, byte [rcx]\n0x4080d1   mov edx, eax\n0x4080d3   and eax, 0x1f\n0x4080d6   shr dl, 5\n0x4080d9   and edx, 7\n0x4080dc   mov edx, dword [rdx*4 + 0x409f40]\n0x4080e3   bt edx, eax\n0x4080e6   jae 0x408149\n0x4080e8   mov qword [rsp + 0x98], 1\n0x4080f4   movsx eax, byte [rcx]\n0x4080f7   mov edx, 1\n0x4080fc   mov byte [rsp + 0xa0], 1\n0x408104   mov dword [rsp + 0xa4], eax\n0x40810b   mov byte [rsp + 0x8c], 1\n0x408113   test dl, dl\n0x408115   jne 0x4082d5\n0x40811b   movzx eax, byte [rsp + 0xe0]\n0x408123   mov byte [rsp + 0x27], 1\n0x408128   jmp 0x407994\n0x408130   mov qword [rsp + 0xd8], 1\n0x40813c   mov byte [rsp + 0xe0], 0\n0x408144   jmp 0x40785d\n0x408149   lea rbx, [rsp + 0x80]\n0x408151   lea rdi, [rbx + 4]\n0x408155   call 0x401980\n0x40815a   test eax, eax\n0x40815c   je 0x40829d\n0x408162   mov byte [rsp + 0x80], 1\n0x40816a   call 0x401680\n0x40816f   mov rbp, qword [rsp + 0x90]\n0x408177   mov rsi, rax\n0x40817a   mov rdi, rbp\n0x40817d   call 0x405310\n0x408182   lea rcx, [rbx + 4]\n0x408186   lea rdi, [rbx + 0x24]\n0x40818a   mov rdx, rax\n0x40818d   mov rsi, rbp\n0x408190   call 0x4016c0\n0x408195   cmp rax, 0xffffffffffffffff\n0x408199   mov qword [rsp + 0x98], rax\n0x4081a1   je 0x408282\n0x4081a7   cmp rax, 0xfffffffffffffffe\n0x4081ab   je 0x408224\n0x4081ad   test rax, rax\n0x4081b0   jne 0x4081e0\n0x4081b2   mov rax, qword [rsp + 0x90]\n0x4081ba   mov qword [rsp + 0x98], 1\n0x4081c6   cmp byte [rax], 0\n0x4081c9   jne 0x408303\n0x4081cf   mov r10d, dword [rsp + 0xa4]\n0x4081d7   test r10d, r10d\n0x4081da   jne 0x408061\n0x4081e0   lea rdi, [rbx + 4]\n0x4081e4   mov byte [rsp + 0xa0], 1\n0x4081ec   call 0x401980\n0x4081f1   test eax, eax\n0x4081f3   mov edx, 1\n0x4081f8   je 0x40810b\n0x4081fe   mov byte [rsp + 0x80], 0\n0x408206   jmp 0x40810b\n0x40820b   mov rdi, qword [rsp + 0x50]\n0x408210   call 0x401690\n0x408215   mov byte [rsp + 0x60], 0\n0x40821a   mov qword [rsp + 0x58], rax\n0x40821f   jmp 0x40782e\n0x408224   mov rdi, qword [rsp + 0x90]\n0x40822c   call 0x401690\n0x408231   mov byte [rsp + 0xa0], 0\n0x408239   mov qword [rsp + 0x98], rax\n0x408241   xor edx, edx\n0x408243   jmp 0x40810b\n0x408248   mov rbx, qword [rsp + 8]\n0x40824d   mov qword [rsp + 8], r14\n0x408252   add rbx, 1\n0x408256   jmp 0x4079a5\n0x408260   mov rdi, qword [rsp + 0x150]\n0x408268   call 0x401690\n0x40826d   mov byte [rsp + 0x160], 0\n0x408275   mov qword [rsp + 0x158], rax\n0x40827d   jmp 0x4075d9\n0x408282   mov qword [rsp + 0x98], 1\n0x40828e   mov byte [rsp + 0xa0], 0\n0x408296   xor edx, edx\n0x408298   jmp 0x40810b\n0x40829d   mov ecx, 0x409f60\n0x4082a2   mov edx, 0x96\n0x4082a7   mov esi, 0x409554\n0x4082ac   mov edi, 0x409562\n0x4082b1   call 0x401700\n0x4082b6   mov rax, qword [rsp + 0x38]\n0x4082bb   jmp 0x407680\n0x4082c0   call 0x4016a0\n0x4082c5   add qword [rsp + 8], 1\n0x4082cb   mov byte [rsp + 0x27], 1\n0x4082d0   jmp 0x407bc6\n0x4082d5   cmp dword [rsp + 0xa4], 0\n0x4082dd   jne 0x40811b\n0x4082e3   jmp 0x40796d\n0x4082e8   cmp byte [rsp + 0x8c], 0\n0x4082f0   je 0x4080b0\n0x4082f6   movzx edx, byte [rsp + 0xa0]\n0x4082fe   jmp 0x408113\n0x408303   mov ecx, 0x409f60\n0x408308   mov edx, 0xb2\n0x40830d   mov esi, 0x409554\n0x408312   mov edi, 0x409579\n0x408317   call 0x401700\n"
      }, 
      "offset": 4223680
    }
  ]
}